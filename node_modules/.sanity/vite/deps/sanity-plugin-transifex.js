import {
  Schema2,
  arrayToJSONMatchPath,
  arrow,
  autoUpdate,
  buildMarksTree,
  computePosition,
  ct,
  detectOverflow,
  extractWithPath,
  flip,
  ft,
  hide,
  htmlToBlocks,
  init_is_prop_valid_browser_esm,
  isPortableTextBlock,
  isPortableTextListItemBlock,
  isPortableTextToolkitList,
  isPortableTextToolkitSpan,
  isPortableTextToolkitTextNode,
  is_prop_valid_browser_esm_exports,
  nestLists,
  nt,
  offset,
  pt,
  randomKey,
  require_Refractor,
  require_react_dom,
  require_react_is,
  shift,
  spanToPlainText,
  tt,
  useClient,
  useSchema
} from "./chunk-673C7PZ7.js";
import "./chunk-QWZQRRZG.js";
import {
  require_jsx_runtime
} from "./chunk-ZJRBQQU2.js";
import {
  require_react
} from "./chunk-ZRWYN6LL.js";
import {
  __toCommonJS,
  __toESM
} from "./chunk-AUZ3RYOM.js";

// node_modules/sanity-translations-tab/dist/index.esm.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var import_react48 = __toESM(require_react());

// node_modules/sanity-translations-tab/node_modules/@sanity/ui/dist/index.esm.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var import_react47 = __toESM(require_react());
var import_react_is = __toESM(require_react_is());

// node_modules/sanity-translations-tab/node_modules/@sanity/color/dist/index.js
var black$1 = "#101112";
var white$1 = "#fff";
var gray = {
  "50": {
    title: "Gray 50",
    hex: "#f2f3f5"
  },
  "100": {
    title: "Gray 100",
    hex: "#e6e8ec"
  },
  "200": {
    title: "Gray 200",
    hex: "#ced2d9"
  },
  "300": {
    title: "Gray 300",
    hex: "#b6bcc6"
  },
  "400": {
    title: "Gray 400",
    hex: "#9ea6b3"
  },
  "500": {
    title: "Gray 500",
    hex: "#8690a0"
  },
  "600": {
    title: "Gray 600",
    hex: "#6e7683"
  },
  "700": {
    title: "Gray 700",
    hex: "#565d67"
  },
  "800": {
    title: "Gray 800",
    hex: "#3f434a"
  },
  "900": {
    title: "Gray 900",
    hex: "#272a2e"
  },
  "950": {
    title: "Gray 950",
    hex: "#1b1d20"
  }
};
var blue = {
  "50": {
    title: "Blue 50",
    hex: "#e8f1fe"
  },
  "100": {
    title: "Blue 100",
    hex: "#d2e3fe"
  },
  "200": {
    title: "Blue 200",
    hex: "#a6c8fd"
  },
  "300": {
    title: "Blue 300",
    hex: "#7aacfd"
  },
  "400": {
    title: "Blue 400",
    hex: "#4e91fc"
  },
  "500": {
    title: "Blue 500",
    hex: "#2276fc"
  },
  "600": {
    title: "Blue 600",
    hex: "#1e61cd"
  },
  "700": {
    title: "Blue 700",
    hex: "#1a4d9e"
  },
  "800": {
    title: "Blue 800",
    hex: "#17396f"
  },
  "900": {
    title: "Blue 900",
    hex: "#132540"
  },
  "950": {
    title: "Blue 950",
    hex: "#111b29"
  }
};
var purple = {
  "50": {
    title: "Purple 50",
    hex: "#f8e9fe"
  },
  "100": {
    title: "Purple 100",
    hex: "#f2d3fe"
  },
  "200": {
    title: "Purple 200",
    hex: "#e6a7fd"
  },
  "300": {
    title: "Purple 300",
    hex: "#d97bfd"
  },
  "400": {
    title: "Purple 400",
    hex: "#cd4efc"
  },
  "500": {
    title: "Purple 500",
    hex: "#c123fc"
  },
  "600": {
    title: "Purple 600",
    hex: "#9d1fcd"
  },
  "700": {
    title: "Purple 700",
    hex: "#7a1b9e"
  },
  "800": {
    title: "Purple 800",
    hex: "#56186f"
  },
  "900": {
    title: "Purple 900",
    hex: "#331440"
  },
  "950": {
    title: "Purple 950",
    hex: "#211229"
  }
};
var magenta = {
  "50": {
    title: "Magenta 50",
    hex: "#fcebf5"
  },
  "100": {
    title: "Magenta 100",
    hex: "#f9d7eb"
  },
  "200": {
    title: "Magenta 200",
    hex: "#f4afd8"
  },
  "300": {
    title: "Magenta 300",
    hex: "#ef87c4"
  },
  "400": {
    title: "Magenta 400",
    hex: "#ea5fb1"
  },
  "500": {
    title: "Magenta 500",
    hex: "#e5389e"
  },
  "600": {
    title: "Magenta 600",
    hex: "#ba3082"
  },
  "700": {
    title: "Magenta 700",
    hex: "#8f2866"
  },
  "800": {
    title: "Magenta 800",
    hex: "#65204a"
  },
  "900": {
    title: "Magenta 900",
    hex: "#3a182d"
  },
  "950": {
    title: "Magenta 950",
    hex: "#25141f"
  }
};
var red = {
  "50": {
    title: "Red 50",
    hex: "#fdebea"
  },
  "100": {
    title: "Red 100",
    hex: "#fcd8d5"
  },
  "200": {
    title: "Red 200",
    hex: "#f9b1ab"
  },
  "300": {
    title: "Red 300",
    hex: "#f68b82"
  },
  "400": {
    title: "Red 400",
    hex: "#f36458"
  },
  "500": {
    title: "Red 500",
    hex: "#f03e2f"
  },
  "600": {
    title: "Red 600",
    hex: "#c33529"
  },
  "700": {
    title: "Red 700",
    hex: "#962c23"
  },
  "800": {
    title: "Red 800",
    hex: "#69231d"
  },
  "900": {
    title: "Red 900",
    hex: "#3c1a17"
  },
  "950": {
    title: "Red 950",
    hex: "#261514"
  }
};
var orange = {
  "50": {
    title: "Orange 50",
    hex: "#fef0e6"
  },
  "100": {
    title: "Orange 100",
    hex: "#fee2ce"
  },
  "200": {
    title: "Orange 200",
    hex: "#fdc59d"
  },
  "300": {
    title: "Orange 300",
    hex: "#fca86d"
  },
  "400": {
    title: "Orange 400",
    hex: "#fb8b3c"
  },
  "500": {
    title: "Orange 500",
    hex: "#e57322"
  },
  "600": {
    title: "Orange 600",
    hex: "#ba5f1f"
  },
  "700": {
    title: "Orange 700",
    hex: "#904b1b"
  },
  "800": {
    title: "Orange 800",
    hex: "#653818"
  },
  "900": {
    title: "Orange 900",
    hex: "#3a2415"
  },
  "950": {
    title: "Orange 950",
    hex: "#251a13"
  }
};
var yellow = {
  "50": {
    title: "Yellow 50",
    hex: "#fef7da"
  },
  "100": {
    title: "Yellow 100",
    hex: "#fdefb6"
  },
  "200": {
    title: "Yellow 200",
    hex: "#fcdf6d"
  },
  "300": {
    title: "Yellow 300",
    hex: "#fbd024"
  },
  "400": {
    title: "Yellow 400",
    hex: "#d9b421"
  },
  "500": {
    title: "Yellow 500",
    hex: "#b7991e"
  },
  "600": {
    title: "Yellow 600",
    hex: "#967e1c"
  },
  "700": {
    title: "Yellow 700",
    hex: "#746219"
  },
  "800": {
    title: "Yellow 800",
    hex: "#534717"
  },
  "900": {
    title: "Yellow 900",
    hex: "#312c14"
  },
  "950": {
    title: "Yellow 950",
    hex: "#201e13"
  }
};
var green = {
  "50": {
    title: "Green 50",
    hex: "#e7f9ed"
  },
  "100": {
    title: "Green 100",
    hex: "#d0f4dc"
  },
  "200": {
    title: "Green 200",
    hex: "#a1eaba"
  },
  "300": {
    title: "Green 300",
    hex: "#72e097"
  },
  "400": {
    title: "Green 400",
    hex: "#43d675"
  },
  "500": {
    title: "Green 500",
    hex: "#3ab564"
  },
  "600": {
    title: "Green 600",
    hex: "#329454"
  },
  "700": {
    title: "Green 700",
    hex: "#297343"
  },
  "800": {
    title: "Green 800",
    hex: "#215233"
  },
  "900": {
    title: "Green 900",
    hex: "#183122"
  },
  "950": {
    title: "Green 950",
    hex: "#14211a"
  }
};
var cyan = {
  "50": {
    title: "Cyan 50",
    hex: "#e3fafd"
  },
  "100": {
    title: "Cyan 100",
    hex: "#c7f5fc"
  },
  "200": {
    title: "Cyan 200",
    hex: "#90ecf9"
  },
  "300": {
    title: "Cyan 300",
    hex: "#59e3f6"
  },
  "400": {
    title: "Cyan 400",
    hex: "#22daf4"
  },
  "500": {
    title: "Cyan 500",
    hex: "#1fb8ce"
  },
  "600": {
    title: "Cyan 600",
    hex: "#1c97a8"
  },
  "700": {
    title: "Cyan 700",
    hex: "#197583"
  },
  "800": {
    title: "Cyan 800",
    hex: "#16545d"
  },
  "900": {
    title: "Cyan 900",
    hex: "#133237"
  },
  "950": {
    title: "Cyan 950",
    hex: "#112124"
  }
};
var hues = {
  gray,
  blue,
  purple,
  magenta,
  red,
  orange,
  yellow,
  green,
  cyan
};
var black = {
  title: "Black",
  hex: black$1
};
var white = {
  title: "White",
  hex: white$1
};

// node_modules/sanity-translations-tab/node_modules/@sanity/icons/dist/index.js
var import_react = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var AccessDeniedIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "access-denied",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M18.1568 6.84315C21.281 9.96734 21.281 15.0327 18.1568 18.1569C15.0326 21.281 9.96733 21.281 6.84313 18.1569C3.71894 15.0327 3.71894 9.96734 6.84313 6.84315C9.96733 3.71895 15.0326 3.71895 18.1568 6.84315ZM18.1568 6.84315L6.844 18.156",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var ActivityIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "activity",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M21 15H19L15.5 7L11 18L8 12L6 15H4",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var AddCircleIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "add-circle",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M8 12.4H17M12.5 8V17M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var AddCommentIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "add-comment",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M13 6.5H7.5C6.39543 6.5 5.5 7.39543 5.5 8.5V14.5C5.5 15.6046 6.39543 16.5 7.5 16.5H9.5V20.5L13.5 16.5H16.5C17.6046 16.5 18.5 15.6046 18.5 14.5V12M15 6.5H22M18.5 10V3",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var AddIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "add",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M12.5 5V20M5 12.5H20",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var ApiIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "api",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M5.93047 13.2107L6.66782 10.3728H6.73089L7.45854 13.2107H5.93047ZM8.17164 16H9.66089L7.56041 9H5.93047L3.82999 16H5.20767L5.65396 14.2876H7.73505L8.17164 16Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M10.5389 9V16H11.9166V13.7782H13.0323C14.541 13.7782 15.5015 12.8517 15.5015 11.3964C15.5015 9.92654 14.5701 9 13.1003 9H10.5389ZM11.9166 10.1303H12.751C13.6533 10.1303 14.1044 10.5475 14.1044 11.3867C14.1044 12.2308 13.6533 12.6431 12.751 12.6431H11.9166V10.1303Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M21.1675 16V14.8164H19.717V10.1836H21.1675V9H16.8889V10.1836H18.3393V14.8164H16.8889V16H21.1675Z",
            fill: "currentColor"
          }
        )
      ]
    }
  );
});
var ArchiveIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "archive",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M12.5 10.5V17M20.5 7.5V20.5H4.5V7.5L7.5 4.5H17.5L20.5 7.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M4.5 7.5H20.5M16 14L12.5 17.5L9 14",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var ArrowDownIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "arrow-down",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("path", { d: "M12.5 19.5V5", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M18 14L12.5 19.5L7 14",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var ArrowLeftIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "arrow-left",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("path", { d: "M5.5 12.5H20", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M11 18L5.5 12.5L11 7",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var ArrowRightIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "arrow-right",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("path", { d: "M19.5 12.5H5", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M14 7L19.5 12.5L14 18",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var ArrowTopRightIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "arrow-top-right",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("path", { d: "M16.5 8.5L7 18", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }),
        (0, import_jsx_runtime.jsx)("path", { d: "M9 8.5H16.5V16", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" })
      ]
    }
  );
});
var ArrowUpIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "arrow-up",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M7 11L12.5 5.5L18 11",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)("path", { d: "M12.5 5.5V20", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" })
      ]
    }
  );
});
var AsteriskIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "asterisk",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M12.5 4V21M16.75 5.13879L8.25 19.8612M19.8612 8.25L5.13878 16.75M4.00002 12.5H21M5.13881 8.25L19.8612 16.75M8.25002 5.13879L16.75 19.8612",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var BarChartIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "bar-chart",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M5.5 5V19.5H20M8.5 18V13M11.5 18V9M14.5 18V11M17.5 18V7",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var BasketIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "basket",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M8.5 10.5H5L6.5 19.5H18.5L20 10.5H16.5M8.5 10.5L10.2721 5.18377C10.4082 4.77543 10.7903 4.5 11.2208 4.5H13.7792C14.2097 4.5 14.5918 4.77543 14.7279 5.18377L16.5 10.5M8.5 10.5H16.5M8.5 10.5L9.5 19.5M16.5 10.5L15.5 19.5M12.5 10.5V19.5M19.5 13.5H5.5M19 16.5H6",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var BellIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "bell",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M10.5 17.5V18.5C10.5 20 11.5 20.5 12.5 20.5C13.5 20.5 14.5 20 14.5 18.5V17.5M5.5 17.5C6.5 16 6.5 15 6.5 12C6.5 8 8.5 5.5 12.5 5.5C16.5 5.5 18.5 8 18.5 12C18.5 15 18.5 16 19.5 17.5H5.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var BillIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "bill",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M6.50001 5.5C8.50003 5.5 8.50003 8 8.50003 8V9.5M6.50001 5.5C4.5 5.5 4.5 8 4.5 8L4.50001 9.5H8.50003M6.50001 5.5C6.50001 5.5 15.8333 5.5 17.6667 5.5C19.5 5.5 19.5 8.5 19.5 8.5V20L17.6667 19L15.8333 20L14 19L12.1667 20L10.3334 19L8.50003 20V9.5M11 12.5H15M11 9.5H16M11 15.5H16",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var BinaryDocumentIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "binary-document",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("path", { d: "M11.5 4.5V9.5H6.5", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M9.5 12.5V17.5M11.5 4.5H18.5V20.5H6.5V9.5L11.5 4.5ZM12.5 12.5V17.5H15.5V12.5H12.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinecap: "square",
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var BlockContentIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "block-content",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M21 7.60002L11 7.60003V6.40003L21 6.40002V7.60002Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M21 11.2667L12.4833 11.2667V10.0667L21 10.0667V11.2667Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M21 14.9334H13.9254V13.7334L21 13.7334V14.9334Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M21 18.6002H4V17.4002H21V18.6002Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M9.86438 15.6H11.2L8.27623 7.60003H6.92377L4 15.6H5.29072L6.0371 13.4767H9.12362L9.86438 15.6ZM7.53546 9.05255H7.63086L8.80374 12.4344H6.35698L7.53546 9.05255Z",
            fill: "currentColor"
          }
        )
      ]
    }
  );
});
var BlockElementIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "block-element",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M5 19.5H20M5 5.5H20M6.5 8.5H18.5V16.5H6.5V8.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var BlockquoteIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "blockquote",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M10 17.5H19M6 7.5H19M10 12.5H17M6.5 12V18",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var BoldIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "bold",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M13.2087 18C15.5322 18 16.9731 16.793 16.9731 14.8844C16.9731 13.4812 15.9245 12.3949 14.4836 12.2892V12.1534C15.6001 11.9875 16.4526 10.9841 16.4526 9.82991C16.4526 8.14761 15.1927 7.11409 13.0804 7.11409H8.32019V18H13.2087ZM10.5985 8.85674H12.4995C13.5859 8.85674 14.212 9.37727 14.212 10.2448C14.212 11.1199 13.5406 11.6254 12.3109 11.6254H10.5985V8.85674ZM10.5985 16.2574V13.1643H12.575C13.9178 13.1643 14.6496 13.6924 14.6496 14.6882C14.6496 15.7066 13.9404 16.2574 12.6278 16.2574H10.5985Z",
          fill: "currentColor"
        }
      )
    }
  );
});
var BoltIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "bolt",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M18 11.5L9 21L11 13.5H7L16 4L14 11.5H18Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var BookIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "book",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M20.5 17.5V5.5L12.5 6.5M20.5 17.5L12.5 18.5M20.5 17.5V18.5M4.5 17.5V5.5L12.5 6.5M4.5 17.5L12.5 18.5M4.5 17.5V18.5M12.5 18.5L4.5 19.5V18.5M12.5 18.5L20.5 19.5V18.5M12.5 18.5V6.5M12.5 18.5H4.5M12.5 18.5H20.5",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var BottleIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "bottle",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M7.5 17.5L17.5 17.5M17.5 13C17.5 12.087 17.5 11.3518 17.5 11C17.5 8.5 14.5 9 14.5 7.37494L14.5 5.5M17.5 13C17.5 15.1229 17.5 18.7543 17.5 20.5022C17.5 21.0545 17.0523 21.5 16.5 21.5L8.5 21.5C7.94772 21.5 7.5 21.0547 7.5 20.5024C7.5 18.8157 7.5 15.3546 7.5 13M17.5 13L7.5 13M7.5 13C7.5 12.2538 7.5 11.5648 7.5 11C7.5 8.5 10.5 9 10.5 7.37494L10.5 5.5M10.5 5.5L10.5 3.99999C10.5 3.72385 10.7239 3.49999 11 3.49999L14 3.49999C14.2761 3.49999 14.5 3.72385 14.5 3.99999L14.5 5.5M10.5 5.5L14.5 5.5",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var BulbFilledIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "bulb-filled",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M16.4272 14.3368C15.8273 15.1773 15.5 16.1794 15.5 17.212V18.5C15.5 19.0523 15.0523 19.5 14.5 19.5H14V20.5C14 21.0523 13.5523 21.5 13 21.5H12C11.4477 21.5 11 21.0523 11 20.5V19.5H10.5C9.94772 19.5 9.5 19.0523 9.5 18.5V17.212C9.5 16.1794 9.17266 15.1773 8.57284 14.3368C7.60216 12.9767 7 11.94 7 10C7 7 9.5 4.5 12.5 4.5C15.5 4.5 18 7 18 10C18 11.94 17.3978 12.9767 16.4272 14.3368Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M16.4272 14.3368L15.9388 13.9883L16.4272 14.3368ZM14 19.5V18.9H13.4V19.5H14ZM11 19.5H11.6V18.9H11V19.5ZM8.57284 14.3368L9.06122 13.9883H9.06122L8.57284 14.3368ZM16.1 17.212C16.1 16.3069 16.3868 15.4261 16.9155 14.6853L15.9388 13.9883C15.2678 14.9284 14.9 16.0519 14.9 17.212H16.1ZM16.1 18.5V17.212H14.9V18.5H16.1ZM14.5 20.1C15.3837 20.1 16.1 19.3837 16.1 18.5H14.9C14.9 18.7209 14.7209 18.9 14.5 18.9V20.1ZM14 20.1H14.5V18.9H14V20.1ZM13.4 19.5V20.5H14.6V19.5H13.4ZM13.4 20.5C13.4 20.7209 13.2209 20.9 13 20.9V22.1C13.8837 22.1 14.6 21.3837 14.6 20.5H13.4ZM13 20.9H12V22.1H13V20.9ZM12 20.9C11.7791 20.9 11.6 20.7209 11.6 20.5H10.4C10.4 21.3837 11.1163 22.1 12 22.1V20.9ZM11.6 20.5V19.5H10.4V20.5H11.6ZM10.5 20.1H11V18.9H10.5V20.1ZM8.9 18.5C8.9 19.3837 9.61634 20.1 10.5 20.1V18.9C10.2791 18.9 10.1 18.7209 10.1 18.5H8.9ZM8.9 17.212V18.5H10.1V17.212H8.9ZM8.08446 14.6853C8.61315 15.4261 8.9 16.3069 8.9 17.212H10.1C10.1 16.0519 9.73217 14.9284 9.06122 13.9883L8.08446 14.6853ZM6.4 10C6.4 11.0377 6.56208 11.8595 6.86624 12.611C7.16624 13.3521 7.59495 13.9995 8.08446 14.6853L9.06122 13.9883C8.58004 13.314 8.22233 12.7629 7.97858 12.1607C7.739 11.5688 7.6 10.9023 7.6 10H6.4ZM12.5 3.9C9.16863 3.9 6.4 6.66863 6.4 10H7.6C7.6 7.33137 9.83137 5.1 12.5 5.1V3.9ZM18.6 10C18.6 6.66863 15.8314 3.9 12.5 3.9V5.1C15.1686 5.1 17.4 7.33137 17.4 10H18.6ZM16.9155 14.6853C17.4051 13.9995 17.8338 13.3521 18.1338 12.611C18.4379 11.8595 18.6 11.0377 18.6 10H17.4C17.4 10.9023 17.261 11.5688 17.0214 12.1607C16.7777 12.7629 16.42 13.314 15.9388 13.9883L16.9155 14.6853Z",
            fill: "currentColor"
          }
        )
      ]
    }
  );
});
var BulbOutlineIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "bulb-outline",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M9.5 16.5H15.5M11 20V20.5C11 21.0523 11.4477 21.5 12 21.5H13C13.5523 21.5 14 21.0523 14 20.5V20M18 10C18 11.94 17.3978 12.9767 16.4272 14.3368C15.8273 15.1773 15.5 16.1794 15.5 17.212V18.5C15.5 19.0523 15.0523 19.5 14.5 19.5H10.5C9.94772 19.5 9.5 19.0523 9.5 18.5V17.212C9.5 16.1794 9.17266 15.1773 8.57284 14.3368C7.60216 12.9767 7 11.94 7 10C7 7 9.5 4.5 12.5 4.5C15.5 4.5 18 7 18 10Z",
          stroke: "currentColor",
          strokeWidth: 1.2
        }
      )
    }
  );
});
var CalendarIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "calendar",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M4.5 10.5V19.5H20.5V10.5M4.5 10.5V5.5H20.5V10.5M4.5 10.5H12.5H20.5M20.5 13.5H16.5M16.5 13.5H12.5M16.5 13.5V10.5M16.5 13.5V16.5M12.5 13.5H8.5M12.5 13.5V16.5M12.5 13.5V10.5M8.5 13.5H4.5M8.5 13.5V10.5M8.5 13.5V16.5M20.5 16.5H16.5M16.5 16.5H12.5M16.5 16.5V19.5M12.5 16.5H8.5M12.5 16.5V19.5M8.5 16.5H4.5M8.5 16.5V19.5M17.5 8V3M7.5 8V3",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var CaseIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "case",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M9 8.5122V6C9 5.44772 9.44772 5 10 5H15C15.5523 5 16 5.44772 16 6V8.5122M4.5 12V18.5C4.5 19.0523 4.94772 19.5 5.5 19.5H19.5C20.0523 19.5 20.5 19.0523 20.5 18.5V12M4.5 12V9.5122C4.5 8.95991 4.94772 8.5122 5.5 8.5122H19.5C20.0523 8.5122 20.5 8.95991 20.5 9.5122V12M4.5 12L11.7978 14.7367C12.2505 14.9064 12.7495 14.9064 13.2022 14.7367L20.5 12",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var ChartUpwardIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "chart-upward",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M5.5 5V19.5H20M7.5 16L11.5 11.5L15.5 14L19.5 8.5",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var CheckmarkCircleIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "checkmark-circle",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M9.5 12.1316L11.7414 14.5L16 10M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var CheckmarkIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "checkmark",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M5.5 11.5L10.5 16.5L19.5 7.60001",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var ChevronDownIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "chevron-down",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M17 10.5L12.5 15L8 10.5",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var ChevronLeftIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "chevron-left",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M14.5 17L10 12.5L14.5 8",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var ChevronRightIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "chevron-right",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M10.5 8L15 12.5L10.5 17",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var ChevronUpIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "chevron-up",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M8 14.5L12.5 10L17 14.5",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var CircleIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "circle",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "circle",
        {
          cx: 12.5,
          cy: 12.5,
          r: 8,
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var ClipboardIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "clipboard",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M8 5.5H6.5V19.5H18.5V5.5H17M12.5 3C11.5 3 11.5 4.5 11 4.5C10 4.5 9.5 5 9.5 6.5H15.6C15.6 5 15 4.5 14 4.5C13.5 4.5 13.5 3 12.5 3Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var ClipboardImageIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "clipboard-image",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M8 5.5H6.5V19.5H10.5M17 5.5H18.5V11.5M10.5 18.5L12.73 15.8983C13.1327 15.4285 13.8613 15.4335 14.2575 15.909L15.299 17.1588C15.6754 17.6105 16.3585 17.6415 16.7743 17.2257L16.9903 17.0097C17.2947 16.7053 17.7597 16.6298 18.1447 16.8223L20.5 18M10.5 11.5H20.5V21.5H10.5V11.5ZM12.5 3C11.5 3 11.5 4.5 11 4.5C10 4.5 9.5 5 9.5 6.5H15.6C15.6 5 15 4.5 14 4.5C13.5 4.5 13.5 3 12.5 3Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var ClockIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "clock",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M12.5 8V12.5L15.5 15.5M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var CloseCircleIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "close-circle",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M9.5 15.5L12.5 12.5M12.5 12.5L15.5 9.5M12.5 12.5L9.5 9.5M12.5 12.5L15.5 15.5M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var CloseIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "close",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M18 7L7 18M7 7L18 18",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var CodeBlockIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "code-block",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M11 15L8.5 12.5L11 10M14 10L16.5 12.5L14 15M5.5 6.5H19.5V18.5H5.5V6.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var CodeIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "code",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M11 16L7.5 12.5L11 9M14 9L17.5 12.5L14 16",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var CogIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "cog",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M14.2624 5.40607L13.8714 4.42848C13.6471 3.86771 13.104 3.5 12.5 3.5C11.896 3.5 11.3529 3.86771 11.1286 4.42848L10.7376 5.40607C10.5857 5.78585 10.2869 6.08826 9.90901 6.2448C9.53111 6.40133 9.10603 6.39874 8.73006 6.23761L7.76229 5.82285C7.20716 5.58494 6.56311 5.70897 6.13604 6.13604C5.70897 6.56311 5.58494 7.20716 5.82285 7.76229L6.23761 8.73006C6.39874 9.10602 6.40133 9.53111 6.2448 9.90901C6.08826 10.2869 5.78585 10.5857 5.40607 10.7376L4.42848 11.1286C3.86771 11.3529 3.5 11.896 3.5 12.5C3.5 13.104 3.86771 13.6471 4.42848 13.8714L5.40607 14.2624C5.78585 14.4143 6.08826 14.7131 6.2448 15.091C6.40133 15.4689 6.39874 15.894 6.23761 16.2699L5.82285 17.2377C5.58494 17.7928 5.70897 18.4369 6.13604 18.864C6.56311 19.291 7.20716 19.4151 7.76229 19.1772L8.73006 18.7624C9.10603 18.6013 9.53111 18.5987 9.90901 18.7552C10.2869 18.9117 10.5857 19.2141 10.7376 19.5939L11.1286 20.5715C11.3529 21.1323 11.896 21.5 12.5 21.5C13.104 21.5 13.6471 21.1323 13.8714 20.5715L14.2624 19.5939C14.4143 19.2141 14.7131 18.9117 15.091 18.7552C15.4689 18.5987 15.894 18.6013 16.2699 18.7624L17.2377 19.1771C17.7928 19.4151 18.4369 19.291 18.864 18.864C19.291 18.4369 19.4151 17.7928 19.1771 17.2377L18.7624 16.2699C18.6013 15.894 18.5987 15.4689 18.7552 15.091C18.9117 14.7131 19.2141 14.4143 19.5939 14.2624L20.5715 13.8714C21.1323 13.6471 21.5 13.104 21.5 12.5C21.5 11.896 21.1323 11.3529 20.5715 11.1286L19.5939 10.7376C19.2141 10.5857 18.9117 10.2869 18.7552 9.90901C18.5987 9.53111 18.6013 9.10602 18.7624 8.73006L19.1772 7.76229C19.4151 7.20716 19.291 6.56311 18.864 6.13604C18.4369 5.70897 17.7928 5.58494 17.2377 5.82285L16.2699 6.23761C15.894 6.39874 15.4689 6.40133 15.091 6.2448C14.7131 6.08826 14.4143 5.78585 14.2624 5.40607Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M16.5 12.5C16.5 14.7091 14.7091 16.5 12.5 16.5C10.2909 16.5 8.5 14.7091 8.5 12.5C8.5 10.2909 10.2909 8.5 12.5 8.5C14.7091 8.5 16.5 10.2909 16.5 12.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var CollapseIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "collapse",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M6 14.5L10.5 14.5V19M19 10.5H14.5L14.5 6",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M10.5 14.5L6 19M14.5 10.5L19 6",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var ColorWheelIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "color-wheel",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M9.43853 5.10896L11.1606 9.26642M13.8394 15.7336L15.5615 19.891M15.7336 11.1606L19.891 9.43853M9.26642 13.8394L5.10896 15.5615M5.3139 9.52342L9.23359 11.147M15.7664 13.853L19.6861 15.4766M13.853 9.23359L15.4766 5.3139M9.52342 19.6861L11.147 15.7664M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5ZM16 12.5C16 14.433 14.433 16 12.5 16C10.567 16 9 14.433 9 12.5C9 10.567 10.567 9 12.5 9C14.433 9 16 10.567 16 12.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var CommentIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "comment",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M7.5 16.5H9.5V20.5L13.5 16.5H17.5C18.6046 16.5 19.5 15.6046 19.5 14.5V8.5C19.5 7.39543 18.6046 6.5 17.5 6.5H7.5C6.39543 6.5 5.5 7.39543 5.5 8.5V14.5C5.5 15.6046 6.39543 16.5 7.5 16.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var ComponentIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "component",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M8.5 8.5L12.5 12.5M12.5 12.5L16.5 16.5M12.5 12.5L16.5 8.5M12.5 12.5L8.5 16.5M12.5 4L21 12.5L12.5 21L4 12.5L12.5 4Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var ComposeIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "compose",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M17 6L19 8M14 5.5H5.5V19.5H19.5V11M9 16L9.5 13.5L19 4L21 6L11.5 15.5L9 16Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var ConfettiIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "confetti",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M16.5 6.25C16.9142 6.25 17.25 5.91421 17.25 5.5C17.25 5.08579 16.9142 4.75 16.5 4.75C16.0858 4.75 15.75 5.08579 15.75 5.5C15.75 5.91421 16.0858 6.25 16.5 6.25ZM19.5 16.25C19.9142 16.25 20.25 15.9142 20.25 15.5C20.25 15.0858 19.9142 14.75 19.5 14.75C19.0858 14.75 18.75 15.0858 18.75 15.5C18.75 15.9142 19.0858 16.25 19.5 16.25Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M13 4C11 6 14.5 5.5 12.5 7.5M21 12C19 14 19.5 10.5 17.5 12.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinecap: "round",
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M6.99288 20.296L7.21541 20.8532L6.99288 20.296ZM15.3657 16.952L15.1432 16.3948L15.3657 16.952ZM4.48221 17.7853L5.03942 18.0078L4.48221 17.7853ZM7.82614 9.41242L8.38334 9.63495L8.38334 9.63495L7.82614 9.41242ZM4.9038 19.8744L4.47954 20.2986L4.9038 19.8744ZM20.6 5C20.6 4.66863 20.3314 4.4 20 4.4C19.6686 4.4 19.4 4.66863 19.4 5L20.6 5ZM15.6417 16.0661C15.6727 16.0352 15.6429 16.1034 15.3784 16.0633C15.1285 16.0255 14.78 15.9035 14.3486 15.6771C13.4924 15.2279 12.4323 14.4325 11.389 13.3892L10.5405 14.2377C11.645 15.3423 12.8008 16.2201 13.791 16.7397C14.2827 16.9977 14.7649 17.1841 15.1987 17.2498C15.6178 17.3133 16.1246 17.2803 16.4903 16.9146L15.6417 16.0661ZM11.389 13.3892C10.3457 12.3459 9.55032 11.2858 9.10105 10.4296C8.87467 9.99821 8.75268 9.64963 8.71484 9.39979C8.67477 9.13524 8.74302 9.10551 8.71208 9.13645L7.86355 8.28792C7.49788 8.65359 7.46489 9.1604 7.52837 9.5795C7.59408 10.0133 7.78043 10.4955 8.03847 10.9872C8.55805 11.9774 9.4359 13.1332 10.5405 14.2377L11.389 13.3892ZM8.71208 9.13645C8.68114 9.16739 8.71088 9.09913 8.97542 9.1392C9.22526 9.17705 9.57384 9.29904 10.0052 9.52542C10.8614 9.97469 11.9215 10.77 12.9648 11.8134L13.8134 10.9648C12.7088 9.86026 11.553 8.98242 10.5628 8.46283C10.0711 8.20479 9.58894 8.01844 9.15513 7.95274C8.73603 7.88926 8.22923 7.92224 7.86355 8.28792L8.71208 9.13645ZM12.9648 11.8134C14.0081 12.8567 14.8035 13.9168 15.2528 14.7729C15.4791 15.2043 15.6011 15.5529 15.639 15.8028C15.679 16.0673 15.6108 16.097 15.6417 16.0661L16.4903 16.9146C16.8559 16.5489 16.8889 16.0421 16.8254 15.623C16.7597 15.1892 16.5734 14.7071 16.3153 14.2153C15.7958 13.2252 14.9179 12.0694 13.8134 10.9648L12.9648 11.8134ZM7.21541 20.8532L15.5883 17.5092L15.1432 16.3948L6.77034 19.7387L7.21541 20.8532ZM5.03942 18.0078L8.38334 9.63495L7.26893 9.18988L3.92501 17.5628L5.03942 18.0078ZM7.86355 8.28792C7.60626 8.54522 7.40381 8.85216 7.26893 9.18988L8.38334 9.63495C8.45773 9.44869 8.5696 9.27894 8.71208 9.13644L7.86355 8.28792ZM3.92501 17.5628C3.54833 18.5059 3.76251 19.5816 4.47954 20.2986L5.32807 19.4501C4.95514 19.0772 4.83814 18.5118 5.03942 18.0078L3.92501 17.5628ZM15.6417 16.0661C15.4993 16.2086 15.3295 16.3204 15.1432 16.3948L15.5883 17.5092C15.926 17.3744 16.2329 17.1719 16.4903 16.9146L15.6417 16.0661ZM6.77034 19.7387C6.26637 19.94 5.70099 19.823 5.32807 19.4501L4.47954 20.2986C5.19657 21.0157 6.27225 21.2298 7.21541 20.8532L6.77034 19.7387ZM19.4 5C19.4 7.17816 18.8838 8.08287 18.3136 8.50727C17.6938 8.96864 16.8379 9.02116 15.7269 9.06388C14.7129 9.10288 13.4438 9.13208 12.4699 9.857C11.4463 10.6189 10.9 12.005 10.9 14.3269H12.1C12.1 12.1487 12.6162 11.244 13.1864 10.8196C13.8062 10.3582 14.6621 10.3057 15.7731 10.263C16.7871 10.224 18.0562 10.1948 19.0301 9.46988C20.0537 8.70799 20.6 7.32184 20.6 5L19.4 5Z",
            fill: "currentColor"
          }
        )
      ]
    }
  );
});
var ControlsIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "controls",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M6.5 5V7.5M6.5 7.5C5.39543 7.5 4.5 8.39543 4.5 9.5C4.5 10.6046 5.39543 11.5 6.5 11.5M6.5 7.5C7.60457 7.5 8.5 8.39543 8.5 9.5C8.5 10.6046 7.60457 11.5 6.5 11.5M6.5 11.5V20M12.5 5V13.5M12.5 13.5C11.3954 13.5 10.5 14.3954 10.5 15.5C10.5 16.6046 11.3954 17.5 12.5 17.5M12.5 13.5C13.6046 13.5 14.5 14.3954 14.5 15.5C14.5 16.6046 13.6046 17.5 12.5 17.5M12.5 17.5V20M18.5 5V7.5M18.5 7.5C17.3954 7.5 16.5 8.39543 16.5 9.5C16.5 10.6046 17.3954 11.5 18.5 11.5M18.5 7.5C19.6046 7.5 20.5 8.39543 20.5 9.5C20.5 10.6046 19.6046 11.5 18.5 11.5M18.5 11.5V20",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var CopyIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "copy",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M8.5 8.5H5.5V20.5H16.5V16.5M19.5 4.5H8.5V16.5H19.5V4.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var CreditCardIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "credit-card",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M20.5 9.5H4.5V11.5H20.5V9.5Z",
            fill: "currentColor",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M7 15.5H14M5.5 18.5H19.5C20.0523 18.5 20.5 18.0523 20.5 17.5V7.5C20.5 6.94772 20.0523 6.5 19.5 6.5H5.5C4.94772 6.5 4.5 6.94772 4.5 7.5V17.5C4.5 18.0523 4.94772 18.5 5.5 18.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var CropIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "crop",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M9.5 5V15.5H20M5 9.5H15.5V20",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var CubeIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "cube",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M4.5 8L12.5 3L20.5 8V17L12.5 22L4.5 17V8Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M12.5 22V13M12.5 13L4.5 8M12.5 13L20.5 8",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var DashboardIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "dashboard",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M14.5 19.5V12.5M10.5 12.5V5.5M5.5 12.5H19.5M5.5 19.5H19.5V5.5H5.5V19.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var DatabaseIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "database",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M18.5 7V17.5C18.5 19.0594 16.0504 20.5 12.5 20.5C8.9496 20.5 6.5 19.0594 6.5 17.5V7M18.5 7C18.5 8.45543 15.8137 9.5 12.5 9.5C9.18629 9.5 6.5 8.45543 6.5 7C6.5 5.54457 9.18629 4.5 12.5 4.5C15.8137 4.5 18.5 5.54457 18.5 7Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var DesktopIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "desktop",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M4.5 13.5V15.5C4.5 16.0523 4.94772 16.5 5.5 16.5H12.5M4.5 13.5V6.5C4.5 5.94772 4.94772 5.5 5.5 5.5H19.5C20.0523 5.5 20.5 5.94772 20.5 6.5V13.5M4.5 13.5H20.5M20.5 13.5V15.5C20.5 16.0523 20.0523 16.5 19.5 16.5H12.5M12.5 16.5V19.5M12.5 19.5H8M12.5 19.5H17",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var DiamondIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "diamond",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M21 10.5L12.5 21M21 10.5L18 5.5H11M21 10.5H16M12.5 21L4 10.5M12.5 21L9 10.5M12.5 21L16 10.5M4 10.5L7 5.5H11M4 10.5H9M9 10.5H12.5H16M9 10.5L11 5.5M16 10.5L14.5 5.5H11",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var DocumentIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "document",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("path", { d: "M11.5 4.5V9.5H6.5", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M11.5 4.5H18.5V20.5H6.5L6.5 9.5M11.5 4.5L6.5 9.5M11.5 4.5V9.5H6.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var DocumentPdfIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "document-pdf",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M12.7127 13.8012L12.7193 13.77C12.8488 13.2366 13.0117 12.5716 12.8845 11.969C12.7997 11.4937 12.4493 11.3084 12.1503 11.295C11.7977 11.2794 11.483 11.4803 11.4049 11.7726C11.2576 12.3082 11.3893 13.0402 11.6303 13.973C11.3268 14.6961 10.8425 15.7472 10.4877 16.3721C9.8271 16.7135 8.94113 17.2402 8.80946 17.9053C8.78268 18.028 8.81392 18.1842 8.88757 18.3248C8.97014 18.481 9.10181 18.6015 9.25579 18.6596C9.32274 18.6841 9.40308 18.7042 9.49681 18.7042C9.88959 18.7042 10.5256 18.3873 11.3736 16.9322C11.5031 16.8898 11.637 16.8452 11.7664 16.8006C12.3734 16.5953 13.0028 16.381 13.5718 16.2851C14.2012 16.622 14.9175 16.8385 15.404 16.8385C15.8861 16.8385 16.0758 16.5529 16.1472 16.381C16.2722 16.0797 16.2119 15.7004 16.0088 15.4973C15.7143 15.2072 14.9979 15.1313 13.882 15.2696C13.3331 14.9349 12.9738 14.4796 12.7127 13.8012ZM10.2645 17.1911C9.95431 17.6419 9.71998 17.8673 9.59278 17.9655C9.7423 17.691 10.0346 17.4009 10.2645 17.1911ZM12.2195 11.9355C12.3355 12.1341 12.3199 12.7345 12.2306 13.038C12.1213 12.5939 12.1056 11.9645 12.1704 11.8909L12.2195 11.9355ZM12.1837 14.6247C12.4225 15.0376 12.7238 15.3924 13.0563 15.6557C12.5743 15.7651 12.1346 15.9458 11.7419 16.1065C11.6481 16.1445 11.5566 16.1824 11.4674 16.2181C11.7642 15.6803 12.0119 15.071 12.1837 14.6247ZM15.6562 16.0864L15.6428 16.1065C15.6428 16.1065 15.4375 16.2315 14.6497 15.9213C15.5558 15.8789 15.6562 16.0864 15.6562 16.0864Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)("path", { d: "M11.5 4.5V9.5H6.5", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M11.5 4.5H18.5V20.5H6.5V9.5L11.5 4.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var DocumentRemoveIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "document-remove",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("path", { d: "M11.5 4.5V9.5H6.5", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M6.5 14V20.5H18.5V14M6.5 11V9.5L11.5 4.5H18.5V11M3 12.5H22",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var DocumentSheetIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "document-sheet",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("path", { d: "M11.5 4.5V9.5H6.5", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M10.4 19V16.4M10.4 16.4L10.4 13.4M10.4 16.4H8M10.4 16.4H14.4M10.4 13.4V11M10.4 13.4H8M10.4 13.4H14.4M14.4 19V16.4M14.4 16.4V13.4M14.4 16.4H17M14.4 13.4V11M14.4 13.4H17M11.5 4.5H18.5V20.5H6.5V9.5L11.5 4.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var DocumentTextIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "document-text",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("path", { d: "M11.5 4.5V9.5H6.5", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M16 13H9M14 16H9M11.5 4.5H18.5V20.5H6.5V9.5L11.5 4.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var DocumentVideoIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "document-video",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M11.5 16.5V13.5L14 15L11.5 16.5Z",
            fill: "currentColor",
            stroke: "currentColor",
            strokeWidth: 1.2
          }
        ),
        (0, import_jsx_runtime.jsx)("path", { d: "M11.5 4.5V9.5H6.5", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M11.5 4.5H18.5V20.5H6.5V9.5L11.5 4.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var DocumentWordIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "document-word",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M12.4699 13.4588H12.5263L13.6328 17H14.5435L16 12H14.9952L14.0656 15.7214H14.0129L12.929 12H12.0672L10.9984 15.7214H10.9419L10.0124 12H9L10.4565 17H11.371L12.4699 13.4588Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)("path", { d: "M11.5 4.5V9.5H6.5", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M11.5 4.5H18.5V20.5H6.5V9.5L11.5 4.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var DocumentZipIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "document-zip",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("path", { d: "M11.5 4.5V9.5H6.5", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M15 4.5L13.5 5L15.5 6L13.5 7L15.5 8L13.5 9L15.5 10L13.5 11L14.5 11.5V13M11.5 4.5H18.5V20.5H6.5V9.5L11.5 4.5ZM13.5 13H15.5L16 17H13L13.5 13Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var DocumentsIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "documents",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("path", { d: "M10.5 4.5V9.5H5.5", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M16.5 7.5H19.5V21.5H8.5V18.5M10.5 4.5H16.5V18.5H5.5V9.5L10.5 4.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var DotIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "dot",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "circle",
        {
          cx: 12.5,
          cy: 12.5,
          r: 2.5,
          fill: "currentColor",
          stroke: "currentColor",
          strokeWidth: 1.2
        }
      )
    }
  );
});
var DoubleChevronDownIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "double-chevron-down",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M17 8L12.5 12.5L8 8M17 13L12.5 17.5L8 13",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var DoubleChevronLeftIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "double-chevron-left",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M12 17L7.5 12.5L12 8M17 17L12.5 12.5L17 8",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var DoubleChevronRightIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "double-chevron-right",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M13 8L17.5 12.5L13 17M8 8L12.5 12.5L8 17",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var DoubleChevronUpIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "double-chevron-up",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M8 12L12.5 7.5L17 12M8 17L12.5 12.5L17 17",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var DownloadIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "download",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M19.5 17V19.5H5.5V17M12.5 16L12.5 5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M17.5 11L12.5 16L7.5 11",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var DragHandleIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "drag-handle",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M9.5 8C10.3284 8 11 7.32843 11 6.5C11 5.67157 10.3284 5 9.5 5C8.67157 5 8 5.67157 8 6.5C8 7.32843 8.67157 8 9.5 8Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M9.5 14C10.3284 14 11 13.3284 11 12.5C11 11.6716 10.3284 11 9.5 11C8.67157 11 8 11.6716 8 12.5C8 13.3284 8.67157 14 9.5 14Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M11 18.5C11 19.3284 10.3284 20 9.5 20C8.67157 20 8 19.3284 8 18.5C8 17.6716 8.67157 17 9.5 17C10.3284 17 11 17.6716 11 18.5Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M15.5 8C16.3284 8 17 7.32843 17 6.5C17 5.67157 16.3284 5 15.5 5C14.6716 5 14 5.67157 14 6.5C14 7.32843 14.6716 8 15.5 8Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M17 12.5C17 13.3284 16.3284 14 15.5 14C14.6716 14 14 13.3284 14 12.5C14 11.6716 14.6716 11 15.5 11C16.3284 11 17 11.6716 17 12.5Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M15.5 20C16.3284 20 17 19.3284 17 18.5C17 17.6716 16.3284 17 15.5 17C14.6716 17 14 17.6716 14 18.5C14 19.3284 14.6716 20 15.5 20Z",
            fill: "currentColor"
          }
        )
      ]
    }
  );
});
var DropIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "drop",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M18.5 14.5C18.5 18 16 20.5 12.5 20.5C9 20.5 6.5 18 6.5 14.5C6.5 11 9.5 7.50001 12.5 4.5C15.5 7.5 18.5 11 18.5 14.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var EarthAmericasIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "earth-americas",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M7 13L5.5 9L10 5H15V10L14 9H11L9.5 11L10.5 12H12V13L13 14.5H15.5L18.5 17L15.5 19.5L10.5 20V17L12.5 15L9 13L7 10.5V13Z",
            fill: "currentColor",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "circle",
          {
            cx: 12.5,
            cy: 12.5,
            r: 8,
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var EarthGlobeIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "earth-globe",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M5.5 16.5H19.5M5.5 8.5H19.5M4.5 12.5H20.5M12.5 20.5C12.5 20.5 8 18.5 8 12.5C8 6.5 12.5 4.5 12.5 4.5M12.5 4.5C12.5 4.5 17 6.5 17 12.5C17 18.5 12.5 20.5 12.5 20.5M12.5 4.5V20.5M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var EditIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "edit",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M15 7L18 10M6 19L7 15L17 5L20 8L10 18L6 19Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var EllipsisHorizontalIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "ellipsis-horizontal",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M6.5 11C7.32843 11 8 11.6716 8 12.5C8 13.3284 7.32843 14 6.5 14C5.67157 14 5 13.3284 5 12.5C5 11.6716 5.67157 11 6.5 11Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M12.5 11C13.3284 11 14 11.6716 14 12.5C14 13.3284 13.3284 14 12.5 14C11.6716 14 11 13.3284 11 12.5C11 11.6716 11.6716 11 12.5 11Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M18.5 11C19.3284 11 20 11.6716 20 12.5C20 13.3284 19.3284 14 18.5 14C17.6716 14 17 13.3284 17 12.5C17 11.6716 17.6716 11 18.5 11Z",
            fill: "currentColor"
          }
        )
      ]
    }
  );
});
var EllipsisVerticalIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "ellipsis-vertical",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M14 6.5C14 7.32843 13.3284 8 12.5 8C11.6716 8 11 7.32843 11 6.5C11 5.67157 11.6716 5 12.5 5C13.3284 5 14 5.67157 14 6.5Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M14 12.5C14 13.3284 13.3284 14 12.5 14C11.6716 14 11 13.3284 11 12.5C11 11.6716 11.6716 11 12.5 11C13.3284 11 14 11.6716 14 12.5Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M14 18.5C14 19.3284 13.3284 20 12.5 20C11.6716 20 11 19.3284 11 18.5C11 17.6716 11.6716 17 12.5 17C13.3284 17 14 17.6716 14 18.5Z",
            fill: "currentColor"
          }
        )
      ]
    }
  );
});
var EnterIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "enter",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("path", { d: "M6 14.5H19.5V7", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M10 18.5L6 14.5L10 10.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var EnterRightIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "enter-right",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("path", { d: "M19 14.5H5.5V7", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M15 18.5L19 14.5L15 10.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var EnvelopeIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "envelope",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M20.5 18.5H4.5V6.5H20.5V18.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M20.5 18.5L17.75 15.5L15 12.5M4.5 18.5L10 12.5M20.5 6.5L12.5 15L4.5 6.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var EqualIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "equal",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("path", { d: "M7.5 4.5H3.5V20.5H7.5", stroke: "currentColor", strokeWidth: 1.2 }),
        (0, import_jsx_runtime.jsx)("path", { d: "M17.5 20.5L21.5 20.5L21.5 4.5L17.5 4.5", stroke: "currentColor", strokeWidth: 1.2 }),
        (0, import_jsx_runtime.jsx)("path", { d: "M9 10.5H16", stroke: "currentColor", strokeWidth: 1.2 }),
        (0, import_jsx_runtime.jsx)("path", { d: "M9 14.5H16", stroke: "currentColor", strokeWidth: 1.2 })
      ]
    }
  );
});
var ErrorFilledIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "error-filled",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          fillRule: "evenodd",
          clipRule: "evenodd",
          d: "M4 12.5C4 7.80558 7.80558 4 12.5 4C17.1944 4 21 7.80558 21 12.5C21 17.1944 17.1944 21 12.5 21C7.80558 21 4 17.1944 4 12.5ZM13 14.5V16H12V14.5H13ZM12 9V13H13V9H12Z",
          fill: "currentColor"
        }
      )
    }
  );
});
var ErrorOutlineIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "error-outline",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M12.5 16V14.5M12.5 9V13M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var ExpandIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "expand",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M14 6.5H18.5V11M11 18.5H6.5V14",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M18.5 6.5L14 11M6.5 18.5L11 14",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var EyeClosedIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "eye-closed",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M7 15.5L5.5 17.5M20.5 12.5C19.8612 13.5647 19.041 14.6294 18.0008 15.501M18.0008 15.501C16.5985 16.676 14.7965 17.5 12.5 17.5M18.0008 15.501L18 15.5M18.0008 15.501L19.5 17.5M12.5 17.5C8.5 17.5 6 15 4.5 12.5M12.5 17.5V20M15.5 17L16.5 19.5M9.5 17L8.5 19.5",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var EyeOpenIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "eye-open",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M9.39999 12.5C9.39999 10.7879 10.7879 9.39999 12.5 9.39999C14.2121 9.39999 15.6 10.7879 15.6 12.5C15.6 14.2121 14.2121 15.6 12.5 15.6C10.7879 15.6 9.39999 14.2121 9.39999 12.5Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M12.5 7.5C8.5 7.5 6 10 4.5 12.5C6 15 8.5 17.5 12.5 17.5C16.5 17.5 19 15 20.5 12.5C19 10 16.5 7.5 12.5 7.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var FilterIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "filter",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M11 12L6 7V6L19 6L19 7L14 12V17L11 19V12Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinecap: "square",
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var FolderIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "folder",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M11.5 8.5H19.5V18.5H5.5V5.5H10.5L11.5 8.5ZM11.5 8.5H5.5",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var GenerateIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "generate",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M9 5.30423C6.33576 6.60253 4.5 9.33688 4.5 12.5C4.5 16.9183 8.08172 20.5 12.5 20.5C16.9183 20.5 20.5 16.9183 20.5 12.5C20.5 8.08172 16.9183 4.5 12.5 4.5V14.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M16 11L12.5 14.5L9 11",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var GroqIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "groq",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("path", { d: "M13 13H21L13 21L13 13Z", fill: "currentColor" }),
        (0, import_jsx_runtime.jsx)("path", { d: "M12 12V4L4 12H12Z", fill: "currentColor" }),
        (0, import_jsx_runtime.jsx)("path", { d: "M12 13H4L12 21V13Z", fill: "currentColor" })
      ]
    }
  );
});
var HashIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "hash",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M8.33894 16.1002H5.44615L5.63077 14.9002H8.52356L9.26202 10.1002H6.36923L6.55384 8.90018H9.44663L9.89281 6H11.1069L10.6608 8.90018H15.4466L15.8928 6H17.1069L16.6608 8.90018H19.5539L19.3693 10.1002H16.4761L15.7377 14.9002H18.6308L18.4462 16.1002H15.5531L15.1069 19H13.8928L14.3389 16.1002H9.55306L9.10693 19H7.89281L8.33894 16.1002ZM10.4761 10.1002L9.73767 14.9002H14.5236L15.262 10.1002H10.4761Z",
          fillRule: "evenodd",
          clipRule: "evenodd",
          fill: "currentColor"
        }
      )
    }
  );
});
var HeartFilledIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "heart-filled",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M17 16C15.8 17.3235 12.5 20.5 12.5 20.5C12.5 20.5 9.2 17.3235 8 16C5.2 12.9118 4.5 11.7059 4.5 9.5C4.5 7.29412 6.1 5.5 8.5 5.5C10.5 5.5 11.7 6.82353 12.5 8.14706C13.3 6.82353 14.5 5.5 16.5 5.5C18.9 5.5 20.5 7.29412 20.5 9.5C20.5 11.7059 19.8 12.9118 17 16Z",
          fill: "currentColor",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var HeartIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "heart",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M17 16C15.8 17.3235 12.5 20.5 12.5 20.5C12.5 20.5 9.2 17.3235 8 16C5.2 12.9118 4.5 11.7059 4.5 9.5C4.5 7.29412 6.1 5.5 8.5 5.5C10.5 5.5 11.7 6.82353 12.5 8.14706C13.3 6.82353 14.5 5.5 16.5 5.5C18.9 5.5 20.5 7.29412 20.5 9.5C20.5 11.7059 19.8 12.9118 17 16Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var HelpCircleIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "help-circle",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M12.5 13C12.5 11 14 11.5 14 10C14 9.34375 13.5 8.5 12.5 8.5C11.5 8.5 11 9 10.5 9.5M12.5 16V14.5M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var HighlightIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "highlight",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "m20.25 9.005-2.719 4.71M10.75 3.504l-2.725 4.72m9.506 5.49-9.506-5.49m9.506 5.49L16.5 15.5l-3.268.634L12 18l-.586-.352m-3.39-9.423L7 10l1 3-1 2 .586.351m0 0L4.902 20h5.155l1.357-2.352m-3.828-2.297 3.828 2.297M13 20h7",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var HomeIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "home",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M6.5 8.75V18.5H18.5V8.75M4.5 10L12.5 5L20.5 10M14.5 18.5V11.5H10.5V18.5",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var IceCreamIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "ice-cream",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M9.5 13.5L12.5 20.5L15.5 13.5M12.5 8.26389C11.9692 7.78885 11.2684 7.5 10.5 7.5C8.84315 7.5 7.5 8.84315 7.5 10.5C7.5 12.1569 8.84315 13.5 10.5 13.5C11.2684 13.5 11.9692 13.2111 12.5 12.7361M9.5 7.5C9.5 5.84315 10.8431 4.5 12.5 4.5C14.1569 4.5 15.5 5.84315 15.5 7.5M17.5 10.5C17.5 12.1569 16.1569 13.5 14.5 13.5C12.8431 13.5 11.5 12.1569 11.5 10.5C11.5 8.84315 12.8431 7.5 14.5 7.5C16.1569 7.5 17.5 8.84315 17.5 10.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var ImageIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "image",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M5.5 15.5L8.79289 12.2071C9.18342 11.8166 9.81658 11.8166 10.2071 12.2071L12.8867 14.8867C13.2386 15.2386 13.7957 15.2782 14.1938 14.9796L15.1192 14.2856C15.3601 14.1049 15.6696 14.0424 15.9618 14.1154L19.5 15M5.5 6.5H19.5V18.5H5.5V6.5ZM15.5 10.5C15.5 11.0523 15.0523 11.5 14.5 11.5C13.9477 11.5 13.5 11.0523 13.5 10.5C13.5 9.94772 13.9477 9.5 14.5 9.5C15.0523 9.5 15.5 9.94772 15.5 10.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var ImageRemoveIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "image-remove",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M5.5 11V6.5H19.5V11M5.5 14V18.5H19.5V14M3 12.5H22",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var ImagesIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "images",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M18.5 7.5H20.5V19.5H6.5V17.5M4.5 14.5L7.79289 11.2071C8.18342 10.8166 8.81658 10.8166 9.20711 11.2071L11.8867 13.8867C12.2386 14.2386 12.7957 14.2782 13.1938 13.9796L14.1192 13.2856C14.3601 13.1049 14.6696 13.0424 14.9618 13.1154L18.5 14M4.5 5.5H18.5V17.5H4.5V5.5ZM14.5 9.5C14.5 10.0523 14.0523 10.5 13.5 10.5C12.9477 10.5 12.5 10.0523 12.5 9.5C12.5 8.94772 12.9477 8.5 13.5 8.5C14.0523 8.5 14.5 8.94772 14.5 9.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var InfoFilledIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "info-filled",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          fillRule: "evenodd",
          clipRule: "evenodd",
          d: "M21 12.5C21 17.1944 17.1944 21 12.5 21C7.80558 21 4 17.1944 4 12.5C4 7.80558 7.80558 4 12.5 4C17.1944 4 21 7.80558 21 12.5ZM12 10.5V9H13V10.5H12ZM13 16V12H12V16H13Z",
          fill: "currentColor"
        }
      )
    }
  );
});
var InfoOutlineIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "info-outline",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M12.5 10.5V9M12.5 12V16M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var InlineElementIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "inline-element",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M5.5 5V20M19.5 5V20M8.5 6.5H16.5V18.5H8.5V6.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var InlineIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "inline",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M12.5 6.5H19.5V18.5H12.5M12.5 6.5H5.5V18.5H12.5M12.5 6.5V18.5",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var InsertAboveIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "insert-above",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M14.5 10.5556L10.5 10.5556M12.5 12.5L12.5 8.5M18.5 5.5L6.5 5.5M18.5 19.5L6.5 19.5L6.5 15.5L18.5 15.5L18.5 19.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinecap: "square",
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var InsertBelowIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "insert-below",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M10.5 14.5H14.5M12.5 12.5V16.5M6.5 19.5H18.5M6.5 5.5H18.5V9.5H6.5V5.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinecap: "square",
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var ItalicIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "italic",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M10.43 18H11.7276L13.4551 9.86763H12.1576L10.43 18ZM13.3043 8.29849C13.8022 8.29849 14.2095 7.89112 14.2095 7.39322C14.2095 6.89532 13.8022 6.48795 13.3043 6.48795C12.8064 6.48795 12.399 6.89532 12.399 7.39322C12.399 7.89112 12.8064 8.29849 13.3043 8.29849Z",
          fill: "currentColor"
        }
      )
    }
  );
});
var JoystickIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "joystick",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M9.5 16V14.5H15.5V16M13.5 10.5V14.5M11.5 10.5V14.5M15.5 7.5C15.5 9.15685 14.1569 10.5 12.5 10.5C10.8431 10.5 9.5 9.15685 9.5 7.5C9.5 5.84315 10.8431 4.5 12.5 4.5C14.1569 4.5 15.5 5.84315 15.5 7.5ZM18.5 19.5H6.5C5.94772 19.5 5.5 19.0523 5.5 18.5V17.5C5.5 16.9477 5.94772 16.5 6.5 16.5H18.5C19.0523 16.5 19.5 16.9477 19.5 17.5V18.5C19.5 19.0523 19.0523 19.5 18.5 19.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var JsonIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "json",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M11 5.5H9.5C8.39543 5.5 7.5 6.39543 7.5 7.5V12.5M7.5 12.5H4M7.5 12.5V17.5C7.5 18.6046 8.39543 19.5 9.5 19.5H11M14 5.5H15.5C16.6046 5.5 17.5 6.39543 17.5 7.5V12.5M17.5 12.5H21M17.5 12.5V17.5C17.5 18.6046 16.6046 19.5 15.5 19.5H14",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var LaunchIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "launch",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M12 7.5H6.5V18.5H17.5V13M19.5 5.5L10.5 14.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)("path", { d: "M14 5.5H19.5V11", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" })
      ]
    }
  );
});
var LeaveIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "leave",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M14.5 15V18.5H5.5V6.5H14.5V10M9 12.5H21.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M18 9L21.5 12.5L18 16",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var LemonIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "lemon",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M10.6569 10.3431L6.41422 14.5858C7.58579 15.7574 9.12132 16.3431 10.6569 16.3431M10.6569 10.3431L14.8995 6.1005C16.0711 7.27208 16.6569 8.80761 16.6569 10.3431M10.6569 10.3431L10.6569 16.3431M10.6569 10.3431L16.6569 10.3431M10.6569 10.3431L14.8995 14.5858M14.8995 14.5858C13.7279 15.7574 12.1924 16.3431 10.6569 16.3431M14.8995 14.5858C16.0711 13.4142 16.6569 11.8787 16.6569 10.3431M16.3137 4.68629C19.4379 7.81049 19.4379 12.8758 16.3137 16C13.1895 19.1242 8.12419 19.1242 5 16L16.3137 4.68629Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var LinkIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "link",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M11 12.5L12.5 14C13.281 14.781 14.719 14.781 15.5 14L18.5 11C19.281 10.219 19.281 8.78105 18.5 8L18 7.5C17.2189 6.71895 15.781 6.71895 15 7.5L13 9.5M12 15.5L10 17.5C9.21895 18.281 7.78105 18.281 7 17.5L6.5 17C5.71895 16.219 5.71896 14.781 6.5 14L9.50001 11C10.2811 10.219 11.719 10.2189 12.5 11L14 12.5",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var LinkRemovedIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "link-removed",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M18.5 11C19.281 10.219 19.281 8.78108 18.5 8.00003L18 7.50003C17.2189 6.71898 15.781 6.71898 15 7.50003L13 9.50003M15.5 14C14.7189 14.7811 13.281 14.7811 12.5 14M6.5 14C5.71895 14.7811 5.71894 16.219 6.49999 17L6.99999 17.5C7.78104 18.2811 9.21894 18.2811 9.99999 17.5L12 15.5M12.5 11C11.719 10.219 10.281 10.219 9.5 11M3 12.5H22",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var LockIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "lock",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M15.5 11.5V8.5C15.5 6.5 14 5.5 12.5 5.5C11 5.5 9.5 6.5 9.5 8.5V11.5M7.5 11.5H17.5V19.5H7.5V11.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var LogoJsIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "logo-js",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          fillRule: "evenodd",
          clipRule: "evenodd",
          d: "M20 5H5V20H20V5ZM12.5254 16.1572C12.5254 17.4189 11.7742 18.1536 10.4792 18.1536C9.24243 18.1536 8.49121 17.4189 8.45801 16.2942V16.261H9.67407V16.2859C9.69897 16.7466 9.9729 17.0703 10.4626 17.0703C10.9939 17.0703 11.272 16.7507 11.272 16.1489V12.011H12.5254V16.1572ZM18.2893 16.2153C18.2893 17.4023 17.3679 18.1536 15.8738 18.1536C14.4419 18.1536 13.5371 17.4688 13.4666 16.4062L13.4624 16.3398H14.6702L14.6743 16.3813C14.72 16.8296 15.2056 17.1326 15.907 17.1326C16.5752 17.1326 17.0359 16.813 17.0359 16.3523V16.3481C17.0359 15.9539 16.7412 15.7339 15.9983 15.5803L15.3674 15.4517C14.1223 15.1985 13.5869 14.6174 13.5869 13.7085V13.7043C13.5869 12.592 14.5415 11.8574 15.8696 11.8574C17.2683 11.8574 18.0901 12.5962 18.1689 13.5964L18.1731 13.6504H16.9944L16.9861 13.6006C16.9155 13.1731 16.5005 12.8743 15.8696 12.8743C15.2512 12.8784 14.8403 13.1606 14.8403 13.6089V13.613C14.8403 14.0032 15.1309 14.2356 15.8364 14.3809L16.4714 14.5095C17.7373 14.771 18.2893 15.2773 18.2893 16.2112V16.2153Z",
          fill: "currentColor"
        }
      )
    }
  );
});
var LogoTsIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "logo-ts",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          fillRule: "evenodd",
          clipRule: "evenodd",
          d: "M20 5H5V20H20V5ZM11.0769 18H9.82349V13.0444H8.02637V12.011H12.874V13.0444H11.0769V18ZM18.2893 16.2153C18.2893 17.4023 17.3679 18.1536 15.8738 18.1536C14.4419 18.1536 13.5371 17.4688 13.4666 16.4062L13.4624 16.3398H14.6702L14.6743 16.3813C14.72 16.8296 15.2056 17.1326 15.907 17.1326C16.5752 17.1326 17.0359 16.813 17.0359 16.3523V16.3481C17.0359 15.9539 16.7412 15.7339 15.9983 15.5803L15.3674 15.4517C14.1223 15.1985 13.5869 14.6174 13.5869 13.7085V13.7043C13.5869 12.592 14.5415 11.8574 15.8696 11.8574C17.2683 11.8574 18.0901 12.5962 18.1689 13.5964L18.1731 13.6504H16.9944L16.9861 13.6006C16.9155 13.1731 16.5005 12.8743 15.8696 12.8743C15.2512 12.8784 14.8403 13.1606 14.8403 13.6089V13.613C14.8403 14.0032 15.1309 14.2356 15.8364 14.3809L16.4714 14.5095C17.7373 14.771 18.2893 15.2773 18.2893 16.2112V16.2153Z",
          fill: "currentColor"
        }
      )
    }
  );
});
var MasterDetailIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "master-detail",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M7 9.5H10M11.5 6.5V18.5M7 12.5H10M13 9.5H18M7 15.5H10M5.5 6.5H19.5V18.5H5.5V6.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var MenuIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "menu",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M6 7.5H19M6 17.5H19M6 12.5H19",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var MobileDeviceIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "mobile-device",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M7.5 6.5C7.5 5.39543 8.39543 4.5 9.5 4.5H15.5C16.6046 4.5 17.5 5.39543 17.5 6.5V18.5C17.5 19.6046 16.6046 20.5 15.5 20.5H9.5C8.39543 20.5 7.5 19.6046 7.5 18.5V6.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M13.5 17.5C13.5 18.0523 13.0523 18.5 12.5 18.5C11.9477 18.5 11.5 18.0523 11.5 17.5C11.5 16.9477 11.9477 16.5 12.5 16.5C13.0523 16.5 13.5 16.9477 13.5 17.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var MoonIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "moon",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M19.6065 16.1775C18.9417 16.387 18.234 16.5 17.5 16.5C13.634 16.5 10.5 13.366 10.5 9.5C10.5 7.54163 11.3042 5.77109 12.6004 4.50062C12.567 4.50021 12.5335 4.5 12.5 4.5C8.08172 4.5 4.5 8.08172 4.5 12.5C4.5 16.9183 8.08172 20.5 12.5 20.5C15.5924 20.5 18.275 18.7454 19.6065 16.1775Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var NumberIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "number",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M21.0165 17.6336H3.83636V16.4336H21.0165V17.6336Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M7.09808 13.3967V7.508H5.74066L3.83636 8.78241V10.091L5.65277 8.88495H5.74066V13.3967H3.84125V14.5539H8.89984V13.3967H7.09808Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M9.81781 9.63202V9.66132H11.1069V9.62714C11.1069 8.95331 11.5756 8.49432 12.2739 8.49432C12.9575 8.49432 13.4018 8.89471 13.4018 9.50507C13.4018 9.9787 13.1528 10.3498 12.1909 11.3117L9.89594 13.5822V14.5539H14.8618V13.3869H11.7807V13.299L13.1577 11.9855C14.3491 10.843 14.7543 10.1838 14.7543 9.41229C14.7543 8.19159 13.7729 7.36639 12.3178 7.36639C10.8383 7.36639 9.81781 8.28436 9.81781 9.63202Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M17.6694 11.4631H18.5092C19.3198 11.4631 19.8422 11.8683 19.8422 12.4982C19.8422 13.1183 19.3295 13.5139 18.5239 13.5139C17.767 13.5139 17.2592 13.133 17.2104 12.5324H15.9262C15.9897 13.8508 17.0248 14.6955 18.5629 14.6955C20.1401 14.6955 21.2192 13.841 21.2192 12.591C21.2192 11.6584 20.6528 11.0334 19.7006 10.9211V10.8332C20.4721 10.6769 20.9457 10.0666 20.9457 9.23651C20.9457 8.12323 19.9741 7.36639 18.5434 7.36639C17.0541 7.36639 16.1118 8.17694 16.0629 9.50018H17.2983C17.3422 8.88007 17.8061 8.48456 18.4995 8.48456C19.2075 8.48456 19.6567 8.85565 19.6567 9.44159C19.6567 10.0324 19.1977 10.4182 18.4946 10.4182H17.6694V11.4631Z",
            fill: "currentColor"
          }
        )
      ]
    }
  );
});
var OkHandIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "ok-hand",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M15.9957 11.5C14.8197 10.912 11.9957 9 10.4957 9C8.9957 9 5.17825 11.7674 6 13C7 14.5 9.15134 11.7256 10.4957 12C11.8401 12.2744 13 13.5 13 14.5C13 15.5 11.8401 16.939 10.4957 16.5C9.15134 16.061 8.58665 14.3415 7.4957 14C6.21272 13.5984 5.05843 14.6168 5.5 15.5C5.94157 16.3832 7.10688 17.6006 8.4957 19C9.74229 20.2561 11.9957 21.5 14.9957 20C17.9957 18.5 18.5 16.2498 18.5 13C18.5 11.5 13.7332 5.36875 11.9957 4.5C10.9957 4 10 5 10.9957 6.5C11.614 7.43149 13.5 9.27705 14 10.3751M15.5 8C15.5 8 15.3707 7.5 14.9957 6C14.4957 4 15.9957 3.5 16.4957 4.5C17.1281 5.76491 18.2872 10.9147 18.4957 13",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var OlistIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "olist",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M10 7.5H19M10 12.5H19M10 17.5H19M5 18.5H7.5L7 17.5L7.5 16.5H5M5 6.5H6.5V8.5M5 8.5H6.5M6.5 8.5H8M8 13.5H6L7 11.5H5",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var OverageIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "overage",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("path", { d: "M18.5 11V6.5H14", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" }),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M6.5 18.5L9 16L12 13L18.5 6.5M3 13.5H22",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var PackageIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "package",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M12.5 13V22M12.5 13L4.5 8M12.5 13L20.5 8M8.5 5.5L16.5 10.5M4.5 8L12.5 3L20.5 8V17L12.5 22L4.5 17V8Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var PanelLeftIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "panel-left",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M10.5 6.5H19.5V18.5H10.5M10.5 6.5H5.5V18.5H10.5M10.5 6.5V18.5",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var PanelRightIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "panel-right",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M14.5 6.5H19.5V18.5H14.5M14.5 6.5H5.5V18.5H14.5M14.5 6.5V18.5",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var PauseIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "pause",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)("path", { d: "M10.5 7.5H8.5V17.5H10.5V7.5Z", fill: "currentColor" }),
        (0, import_jsx_runtime.jsx)("path", { d: "M16.5 7.5H14.5V17.5H16.5V7.5Z", fill: "currentColor" }),
        (0, import_jsx_runtime.jsx)("path", { d: "M10.5 7.5H8.5V17.5H10.5V7.5Z", stroke: "currentColor", strokeWidth: 1.2 }),
        (0, import_jsx_runtime.jsx)("path", { d: "M16.5 7.5H14.5V17.5H16.5V7.5Z", stroke: "currentColor", strokeWidth: 1.2 })
      ]
    }
  );
});
var PinIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "pin",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M6.5 10.5C6.5 7 9 4.5 12.5 4.5C16 4.5 18.5 7 18.5 10.5C18.5 14 15.5 17.5 12.5 20.5C9.5 17.5 6.5 14 6.5 10.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M14 10.5C14 11.3284 13.3284 12 12.5 12C11.6716 12 11 11.3284 11 10.5C11 9.67157 11.6716 9 12.5 9C13.3284 9 14 9.67157 14 10.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var PinRemovedIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "pin-removed",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M7.39787 14C8.51075 16.2897 10.5054 18.5054 12.5 20.5C14.4946 18.5054 16.4892 16.2897 17.6021 14M6.52009 11C6.50681 10.8334 6.5 10.6667 6.5 10.5C6.5 7 9 4.5 12.5 4.5C16 4.5 18.5 7 18.5 10.5C18.5 10.6667 18.4932 10.8334 18.4799 11M3 12.5H22",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var PlayIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "play",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M7.5 18.5V6.5L17.5 12.5L7.5 18.5Z",
          fill: "currentColor",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var PlugIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "plug",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M13.25 8.5L16.75 5M16.25 11.5L19.75 8M9.25 15.5L5.25 19.5M7.75 14L9.75 12C8.25 10 8.75 9 9.75 8C10.15 7.6 11.25 6.5 11.25 6.5L18.25 13.5C18.25 13.5 17.3825 14.3675 16.75 15C15.75 16 14.75 16.5 12.75 15L10.75 17L7.75 14Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var PresentationIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "presentation",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M10.5 18H5.5V8.5H19.5V18H14.5M10.5 18L9 22M10.5 18H14.5M14.5 18L16 22M4.5 8.5H20.5V6.5H4.5V8.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var ProjectsIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "projects",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M21 17.5H14M17.5 14V21M4.5 14.5H10.5V20.5H4.5V14.5ZM14.5 4.5H20.5V10.5H14.5V4.5ZM4.5 4.5H10.5V10.5H4.5V4.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var PublishIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "publish",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M4.99997 5.50006H20M12.5 9.00005V20",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M7.5 14L12.5 9.00006L17.5 14",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var ReadOnlyIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "read-only",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M15 7L18 10M10 12L7 15L6 19L10 18L13 15M12 10L17 5L20 8L15 13M19 19L5 5",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var RedoIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "redo",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M19 9.5L10 9.5C7.51472 9.5 5.5 11.5147 5.5 14C5.5 16.4853 7.51472 18.5 10 18.5H19",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M15 13.5L19 9.5L15 5.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var RefreshIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "refresh",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M19.5 13.5C19.5 17.366 16.366 20.5 12.5 20.5C8.63401 20.5 5.5 17.366 5.5 13.5C5.5 9.63401 8.63401 6.5 12.5 6.5H15.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M11.5 10.5L15.5 6.5L11.5 2.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var RemoveCircleIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "remove-circle",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M8 12.4H17M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var RemoveIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "remove",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)("path", { d: "M5 12.5H20", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" })
    }
  );
});
var ResetIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "reset",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M4.56189 13.5L4.14285 13.9294C4.25676 14.0406 4.41017 14.1019 4.56932 14.1C4.72847 14.098 4.88032 14.0329 4.99144 13.9189L4.56189 13.5ZM9.92427 15.9243L15.9243 9.92427L15.0757 9.07574L9.07574 15.0757L9.92427 15.9243ZM9.07574 9.92426L15.0757 15.9243L15.9243 15.0757L9.92426 9.07574L9.07574 9.92426ZM19.9 12.5C19.9 16.5869 16.5869 19.9 12.5 19.9V21.1C17.2496 21.1 21.1 17.2496 21.1 12.5H19.9ZM5.1 12.5C5.1 8.41309 8.41309 5.1 12.5 5.1V3.9C7.75035 3.9 3.9 7.75035 3.9 12.5H5.1ZM12.5 5.1C16.5869 5.1 19.9 8.41309 19.9 12.5H21.1C21.1 7.75035 17.2496 3.9 12.5 3.9V5.1ZM5.15728 13.4258C5.1195 13.1227 5.1 12.8138 5.1 12.5H3.9C3.9 12.8635 3.92259 13.2221 3.9665 13.5742L5.15728 13.4258ZM12.5 19.9C9.9571 19.9 7.71347 18.6179 6.38048 16.6621L5.38888 17.3379C6.93584 19.6076 9.54355 21.1 12.5 21.1V19.9ZM4.99144 13.9189L7.42955 11.4189L6.57045 10.5811L4.13235 13.0811L4.99144 13.9189ZM4.98094 13.0706L2.41905 10.5706L1.58095 11.4294L4.14285 13.9294L4.98094 13.0706Z",
          fill: "currentColor"
        }
      )
    }
  );
});
var RestoreIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "restore",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M5.88468 17C7.32466 19.1128 9.75033 20.5 12.5 20.5C16.9183 20.5 20.5 16.9183 20.5 12.5C20.5 8.08172 16.9183 4.5 12.5 4.5C8.08172 4.5 4.5 8.08172 4.5 12.5V13.5M12.5 8V12.5L15.5 15.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M7 11L4.5 13.5L2 11",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var RetrieveIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "retrieve",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M16 14L12.5 10.5L9 14M5.5 7.5H19.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M12.5 10.5L12.5 17.5M19.5 7.5V19.5H5.5V7.5L7.5 5.5H17.5L19.5 7.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var RetryIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "retry",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M19 9.5L10 9.5C7.51472 9.5 5.5 11.5147 5.5 14C5.5 16.4853 7.51472 18.5 10 18.5H19",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M15 13.5L19 9.5L15 5.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var RevertIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "revert",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M6 9.5L15 9.5C17.4853 9.5 19.5 11.5147 19.5 14C19.5 16.4853 17.4853 18.5 15 18.5H6",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M10 13.5L6 9.5L10 5.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var RobotIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "robot",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M12.5 15.5V17.5M12.5 8.5V6.5M12.5 6.5C13.3284 6.5 14 5.82843 14 5C14 4.17157 13.3284 3.5 12.5 3.5C11.6716 3.5 11 4.17157 11 5C11 5.82843 11.6716 6.5 12.5 6.5ZM20.5 20.5V19.5C20.5 18.3954 19.6046 17.5 18.5 17.5H6.5C5.39543 17.5 4.5 18.3954 4.5 19.5V20.5H20.5ZM11.5 12C11.5 12.5523 11.0523 13 10.5 13C9.94772 13 9.5 12.5523 9.5 12C9.5 11.4477 9.94772 11 10.5 11C11.0523 11 11.5 11.4477 11.5 12ZM15.5 12C15.5 12.5523 15.0523 13 14.5 13C13.9477 13 13.5 12.5523 13.5 12C13.5 11.4477 13.9477 11 14.5 11C15.0523 11 15.5 11.4477 15.5 12ZM8.5 15.5H16.5C17.6046 15.5 18.5 14.6046 18.5 13.5V10.5C18.5 9.39543 17.6046 8.5 16.5 8.5H8.5C7.39543 8.5 6.5 9.39543 6.5 10.5V13.5C6.5 14.6046 7.39543 15.5 8.5 15.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var RocketIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "rocket",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M12.5 20.5L15.5 14M11 9.49999L4.5 12.5M9 14C9 14 7.54688 14.9531 6.5 16C5.5 17 4.5 20.5 4.5 20.5C4.5 20.5 8 19.5 9 18.5C10 17.5 11 16 11 16M9 14C9 14 10.1 9.9 12.5 7.5C15.5 4.5 20.5 4.5 20.5 4.5C20.5 4.5 20.5 9.5 17.5 12.5C15.7492 14.2508 11 16 11 16L9 14ZM16.5 9.99999C16.5 10.8284 15.8284 11.5 15 11.5C14.1716 11.5 13.5 10.8284 13.5 9.99999C13.5 9.17157 14.1716 8.49999 15 8.49999C15.8284 8.49999 16.5 9.17157 16.5 9.99999Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var SchemaIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "schema",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M12.5 9.5V12.5M12.5 12.5H8.5V15.5M12.5 12.5H16.5V15.5M10.5 5.5H14.5V9.5H10.5V5.5ZM6.5 15.5H10.5V19.5H6.5V15.5ZM14.5 15.5H18.5V19.5H14.5V15.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var SearchIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "search",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M15.0355 15.0355L20 20M16.5 11.5C16.5 14.2614 14.2614 16.5 11.5 16.5C8.73858 16.5 6.5 14.2614 6.5 11.5C6.5 8.73858 8.73858 6.5 11.5 6.5C14.2614 6.5 16.5 8.73858 16.5 11.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var SelectIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "select",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M16.5 15.5L12.5 19.5L8.5 15.5M8.5 9.5L12.5 5.5L16.5 9.5",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var ShareIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "share",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M15 10.5H18.5V19.5H6.5L6.5 10.5H10M12.5 16V3.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)("path", { d: "M9 7L12.5 3.5L16 7", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" })
      ]
    }
  );
});
var SortIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "sort",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M8.5 18.5V6M16.5 19V6.5M12 15L8.5 18.5L5 15M13 10L16.5 6.5L20 10",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var SparkleIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "sparkle",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M10.5 10.5C8.5 12.5 5 12.5 5 12.5C5 12.5 8.5 12.5 10.5 14.5C12.5 16.5 12.5 20 12.5 20C12.5 20 12.5 16.5 14.5 14.5C16.5 12.5 20 12.5 20 12.5C20 12.5 16.5 12.5 14.5 10.5C12.5 8.5 12.5 5 12.5 5C12.5 5 12.5 8.5 10.5 10.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var SparklesIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "sparkles",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M11 3.5V5M11 5V6.5M11 5H12.5M11 5H9.5M9.5 15C9.5 15 12.2308 14.7692 13.5 13.5C14.7692 12.2308 15 9.5 15 9.5C15 9.5 15.2308 12.2308 16.5 13.5C17.7692 14.7692 20.5 15 20.5 15C20.5 15 17.7692 15.2308 16.5 16.5C15.2308 17.7692 15 20.5 15 20.5C15 20.5 14.7692 17.7692 13.5 16.5C12.2308 15.2308 9.5 15 9.5 15ZM4.5 10C4.5 10 5.72308 9.87692 6.3 9.3C6.87692 8.72308 7 7.5 7 7.5C7 7.5 7.12308 8.72308 7.7 9.3C8.27692 9.87692 9.5 10 9.5 10C9.5 10 8.27692 10.1231 7.7 10.7C7.12308 11.2769 7 12.5 7 12.5C7 12.5 6.87692 11.2769 6.3 10.7C5.72308 10.1231 4.5 10 4.5 10Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var SpinnerIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "spinner",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M4.5 12.5C4.5 16.9183 8.08172 20.5 12.5 20.5C16.9183 20.5 20.5 16.9183 20.5 12.5C20.5 8.08172 16.9183 4.5 12.5 4.5",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var SplitHorizontalIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "split-horizontal",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M19.5 10.5V20.5H5.5V10.5M19.5 10.5H5.5M19.5 10.5V4.5H5.5V10.5M12.5 13V15.5M12.5 18V15.5M12.5 15.5H15M12.5 15.5H10",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var SplitVerticalIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "split-vertical",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M10.5 5.5V19.5M13 12.5H15.5M18 12.5H15.5M15.5 12.5V15M15.5 12.5V10M4.5 5.5H20.5V19.5H4.5V5.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var SquareIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "square",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "rect",
        {
          x: 5.5,
          y: 5.5,
          width: 14,
          height: 14,
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var StackCompactIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "stack-compact",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M5.5 15.5V18.5H19.5V15.5M5.5 15.5H19.5M5.5 15.5V9.5M19.5 15.5V9.5M5.5 9.5V6.5H19.5V9.5M5.5 9.5H19.5M5.5 12.5H19.5",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var StackIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "stack",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M5.5 12.5H19.5M5.5 18.5H19.5V6.5H5.5V18.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var StarIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "star",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M13 4L15.2747 9.8691L21.5595 10.2188L16.6806 14.1959L18.2901 20.2812L13 16.87L7.70993 20.2812L9.31941 14.1959L4.44049 10.2188L10.7253 9.8691L13 4Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var StopIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "stop",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "rect",
        {
          x: 7.5,
          y: 7.5,
          width: 10,
          height: 10,
          fill: "currentColor",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var StrikethroughIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "strikethrough",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M12.5656 7.73438C11.0656 7.73438 10.0734 8.48438 10.0734 9.625C10.0734 10.2317 10.3649 10.6613 11.0519 11H8.90358C8.71703 10.6199 8.62813 10.1801 8.62813 9.67188C8.62813 7.75781 10.2297 6.46094 12.6125 6.46094C14.7922 6.46094 16.4172 7.75781 16.5344 9.57812H15.1203C14.925 8.42188 13.9719 7.73438 12.5656 7.73438Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M12.4875 18.2656C10.0969 18.2656 8.44844 17 8.3 15.0547H9.72188C9.89375 16.2344 11.0188 16.9844 12.6203 16.9844C14.1359 16.9844 15.2531 16.1641 15.2531 15.0469C15.2531 14.6375 15.1255 14.292 14.8589 14H16.5912C16.6638 14.266 16.6984 14.5566 16.6984 14.875C16.6984 16.9453 15.0656 18.2656 12.4875 18.2656Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)("path", { d: "M7 13.1H18V11.9H7V13.1Z", fill: "currentColor" })
      ]
    }
  );
});
var StringIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "string",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M11.6748 15.5227H13.1855L9.87842 6.36304H8.34863L5.0415 15.5227H6.50146L7.3457 13.0916H10.8369L11.6748 15.5227ZM9.04053 8.02612H9.14844L10.4751 11.8982H7.70752L9.04053 8.02612Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M16.8101 14.488C16.0674 14.488 15.5278 14.1262 15.5278 13.5042C15.5278 12.8948 15.9595 12.571 16.9116 12.5076L18.6001 12.3997V12.9773C18.6001 13.8342 17.8384 14.488 16.8101 14.488ZM16.4609 15.637C17.3687 15.637 18.124 15.2434 18.5366 14.5515H18.6445V15.5227H19.9585V10.8C19.9585 9.34009 18.981 8.47681 17.248 8.47681C15.6802 8.47681 14.563 9.23853 14.4233 10.4255H15.7437C15.896 9.93677 16.4229 9.65747 17.1846 9.65747C18.1177 9.65747 18.6001 10.0701 18.6001 10.8V11.3967L16.7275 11.5046C15.0835 11.6062 14.1567 12.3235 14.1567 13.5676C14.1567 14.8308 15.1279 15.637 16.4609 15.637Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M19.9585 18.637L5.0415 18.637V17.437L19.9585 17.437V18.637Z",
            fill: "currentColor"
          }
        )
      ]
    }
  );
});
var SunIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "sun",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M19 12.5H22M3 12.5H6M12.5 6V3M12.5 22V19M17.3891 7.61091L19.5104 5.48959M5.48959 19.5104L7.61091 17.3891M7.61091 7.61091L5.48959 5.48959M19.5104 19.5104L17.3891 17.3891M16 12.5C16 14.433 14.433 16 12.5 16C10.567 16 9 14.433 9 12.5C9 10.567 10.567 9 12.5 9C14.433 9 16 10.567 16 12.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var SyncIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "sync",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M13.5 4.5H12.5C8.08172 4.5 4.5 8.08172 4.5 12.5C4.5 15.6631 6.33576 18.3975 9 19.6958M11.5 20.5H12.5C16.9183 20.5 20.5 16.9183 20.5 12.5C20.5 9.33688 18.6642 6.60253 16 5.30423",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M14 17.5619L11.5 20.5L14.5 23.0619M11 7.43811L13.5 4.50001L10.5 1.93811",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var TabletDeviceIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "tablet-device",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M5.5 5.5C5.5 4.94772 5.94772 4.5 6.5 4.5H18.5C19.0523 4.5 19.5 4.94772 19.5 5.5V19.5C19.5 20.0523 19.0523 20.5 18.5 20.5H6.5C5.94772 20.5 5.5 20.0523 5.5 19.5V5.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M13 18C13 18.2761 12.7761 18.5 12.5 18.5C12.2239 18.5 12 18.2761 12 18C12 17.7239 12.2239 17.5 12.5 17.5C12.7761 17.5 13 17.7239 13 18Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var TagIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "tag",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M12.5 20L5 20L5 12.5L12.5 5L20 12.5L12.5 20Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M11 15.5C11 16.3284 10.3284 17 9.5 17C8.67157 17 8 16.3284 8 15.5C8 14.6716 8.67157 14 9.5 14C10.3284 14 11 14.6716 11 15.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var TagsIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "tags",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M12.1562 7.93179L13.9717 6.11633L20.3553 12.5L13.9717 18.8836L10.6855 18.8836M11.0283 18.8836L17.4119 12.5L11.0283 6.11633L4.64462 12.5L4.64462 18.8836L11.0283 18.8836ZM9.75153 15.0534C9.75153 15.7585 9.17992 16.3302 8.47481 16.3302C7.76969 16.3302 7.19808 15.7585 7.19808 15.0534C7.19808 14.3483 7.76969 13.7767 8.47481 13.7767C9.17992 13.7767 9.75153 14.3483 9.75153 15.0534Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var TaskIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "task",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M4.88281 10.75V19.75H20.8828V10.75M4.88281 10.75V5.75H20.8828V10.75M4.88281 10.75H12.8828H20.8828M17.8828 8.25V3.25M7.88281 8.25V3.25",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M10.083 14.7358L12.083 16.7358L15.683 13.1758",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var TerminalIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "terminal",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M8.5 9.5L11.5 12.5L8.5 15.5M13 15.5H17M5.5 6.5H19.5V18.5H5.5V6.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var TextIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "text",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M7.5 9V6.5H17.5V9M12.5 18.5V6.5M10 18.5H15",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var ThLargeIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "th-large",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M12.5 6.5V12.5M12.5 12.5V18.5M12.5 12.5H20.5M12.5 12.5H4.5M4.5 6.5H20.5V18.5H4.5V6.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var ThListIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "th-list",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M9.5 6.5V10.5M9.5 10.5V14.5M9.5 10.5H20.5M9.5 10.5H4.5M9.5 14.5V18.5M9.5 14.5H20.5M9.5 14.5H4.5M4.5 6.5H20.5V18.5H4.5V6.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var TiersIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "tiers",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M16.5 14.5L20.5 16.5L12.5 20.5L4.5 16.5L8.5 14.5M16.5 10.5L20.5 12.5L12.5 16.5L4.5 12.5L8.5 10.5M12.5 12.5L20.5 8.5L12.5 4.5L4.5 8.5L12.5 12.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var ToggleArrowRightIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "toggle-arrow-right",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M10 16.5V8.5L16 12.5L10 16.5Z",
          fill: "currentColor",
          stroke: "currentColor",
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var TokenIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "token",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M17.5711 12.5C17.5711 15.2614 15.3325 17.5 12.5711 17.5M7.57107 12.5C7.57107 9.73858 9.80964 7.5 12.5711 7.5M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var TransferIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "transfer",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M19.5 16.5H6M5.5 8.5L19 8.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M16 13L19.5 16.5L16 20M9 12L5.5 8.5L9 5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var TranslateIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "translate",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          fillRule: "evenodd",
          clipRule: "evenodd",
          d: "M9.4 5.4H4V6.6H13.2189C13.1612 6.78478 13.0895 6.99578 13.0025 7.22211C12.7032 8.00031 12.2402 8.91125 11.5757 9.57574L10 11.1515L9.42426 10.5757C8.72102 9.8725 8.25297 9.16987 7.96199 8.64611C7.81668 8.38455 7.71617 8.16874 7.65305 8.02146C7.62151 7.94787 7.59937 7.89154 7.5857 7.85534C7.57886 7.83725 7.57415 7.8242 7.57144 7.81657L7.56886 7.80922C7.56886 7.80922 7.56921 7.81026 7 8C6.43079 8.18974 6.43091 8.19009 6.43091 8.19009L6.43133 8.19135L6.43206 8.19351L6.4341 8.19948L6.44052 8.21786C6.44587 8.23292 6.45336 8.25357 6.46313 8.27942C6.48266 8.33112 6.5113 8.40369 6.55008 8.49416C6.62758 8.67501 6.74582 8.92795 6.91301 9.22889C7.24703 9.83013 7.77898 10.6275 8.57574 11.4243L9.15147 12L4.57964 16.5718L4.57655 16.5749L4.57577 16.5757L5.4243 17.4242L5.42688 17.4216L10.0368 12.8117L12.6159 14.9609L13.3841 14.0391L10.8888 11.9597L12.4243 10.4243C13.2598 9.58875 13.7968 8.49969 14.1225 7.65289C14.2818 7.23863 14.395 6.87072 14.4696 6.6H16V5.4H10.6V4H9.4V5.4ZM17.4405 10L21.553 19.7672H20.2509L19.1279 17.1H14.8721L13.7491 19.7672H12.447L16.5595 10H17.4405ZM15.3773 15.9H18.6227L17 12.0462L15.3773 15.9Z",
          fill: "currentColor"
        }
      )
    }
  );
});
var TrashIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "trash",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M5 6.5H20M10 6.5V4.5C10 3.94772 10.4477 3.5 11 3.5H14C14.5523 3.5 15 3.94772 15 4.5V6.5M12.5 9V17M15.5 9L15 17M9.5 9L10 17M18.5 6.5L17.571 18.5767C17.5309 19.0977 17.0965 19.5 16.574 19.5H8.42603C7.90349 19.5 7.46905 19.0977 7.42898 18.5767L6.5 6.5H18.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var TrendUpwardIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "trend-upward",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M4.5 18.5L11.5 10.5L13.5 14.5L20.5 6.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)("path", { d: "M20.5 11V6.5H16", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" })
      ]
    }
  );
});
var TriangleOutlineIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "triangle-outline",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M20.5 18.5H4.5L12.5 5.5L20.5 18.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var TrolleyIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "trolley",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M8 17.5L5.81763 6.26772C5.71013 5.81757 5.30779 5.5 4.84498 5.5H3M8 17.5H17M8 17.5C8.82843 17.5 9.5 18.1716 9.5 19C9.5 19.8284 8.82843 20.5 8 20.5C7.17157 20.5 6.5 19.8284 6.5 19C6.5 18.1716 7.17157 17.5 8 17.5ZM17 17.5C17.8284 17.5 18.5 18.1716 18.5 19C18.5 19.8284 17.8284 20.5 17 20.5C16.1716 20.5 15.5 19.8284 15.5 19C15.5 18.1716 16.1716 17.5 17 17.5ZM7.78357 14.5H17.5L19 7.5H6",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var TruncateIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "truncate",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M5 12.5H20M8.5 19.5L12.5 15.5L16.5 19.5M16.5 5.5L12.5 9.5L8.5 5.5",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var TwitterIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "twitter",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M18.8738 6.65751C18.1994 5.9447 17.2445 5.5 16.1857 5.5C14.1423 5.5 12.4857 7.15655 12.4857 9.2C12.4857 9.55263 12.535 9.89374 12.6272 10.2168C7.0826 9.56422 4.55703 6.02857 4.55703 6.02857C4.55703 6.02857 4.02846 9.2 6.14274 11.3143C5.08571 11.3143 4.55703 10.7857 4.55703 10.7857C4.55703 10.7857 4.55703 13.4286 7.19989 14.4857C6.67143 15.0143 5.61417 14.4857 5.61417 14.4857C5.97533 15.9303 7.45606 16.8562 8.82133 17.1358C6.67298 19.1676 3.5 18.7143 3.5 18.7143C5.14562 19.771 7.21334 20.3 9.31429 20.3C16.1214 20.3 19.8162 15.6315 19.8848 9.37762C20.8722 8.58943 22 7.08571 22 7.08571C22 7.08571 21.277 7.45458 19.6913 7.98315C21.277 6.92601 21.4714 5.5 21.4714 5.5C21.4714 5.5 20.4135 6.55789 18.8738 6.65751Z",
          fill: "currentColor"
        }
      )
    }
  );
});
var UlistIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "ulist",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M7.10153 17.5001C7.10153 17.8323 6.83221 18.1016 6.5 18.1016C6.16778 18.1016 5.89847 17.8323 5.89847 17.5001C5.89847 17.1678 6.16778 16.8985 6.5 16.8985C6.83221 16.8985 7.10153 17.1678 7.10153 17.5001Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M7.10153 7.5C7.10153 7.83221 6.83221 8.10153 6.5 8.10153C6.16778 8.10153 5.89847 7.83221 5.89847 7.5C5.89847 7.16778 6.16778 6.89847 6.5 6.89847C6.83221 6.89847 7.10153 7.16778 7.10153 7.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M7.10153 12.5C7.10153 12.8322 6.83221 13.1015 6.5 13.1015C6.16778 13.1015 5.89847 12.8322 5.89847 12.5C5.89847 12.1678 6.16778 11.8985 6.5 11.8985C6.83221 11.8985 7.10153 12.1678 7.10153 12.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M10 7.5H19M10 17.5H19M10 12.5H19",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var UnderlineIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "underline",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M9.52791 7.11407H8.17V14.2582C8.17 16.5817 9.79195 18.2565 12.4927 18.2565C15.1934 18.2565 16.8154 16.5817 16.8154 14.2582V7.11407H15.4574V14.1677C15.4574 15.8122 14.3787 17.0042 12.4927 17.0042C10.6067 17.0042 9.52791 15.8122 9.52791 14.1677V7.11407Z",
            fill: "currentColor"
          }
        ),
        (0, import_jsx_runtime.jsx)("path", { d: "M7 20.5H18", stroke: "currentColor", strokeWidth: 1.2, strokeLinejoin: "round" })
      ]
    }
  );
});
var UndoIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "undo",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M6 9.5L15 9.5C17.4853 9.5 19.5 11.5147 19.5 14C19.5 16.4853 17.4853 18.5 15 18.5H6",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M10 13.5L6 9.5L10 5.5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var UnknownIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "unknown",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M12.5 13C12.5 11 14 11.5 14 10C14 9.34375 13.5 8.5 12.5 8.5C11.5 8.5 11 9 10.5 9.5M12.5 16V14.5M5.5 5.5H19.5V19.5H5.5V5.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var UnlockIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "unlock",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M9.5 11.5V8.5C9.5 6.5 8 5.5 6.5 5.5C5 5.5 3.5 6.5 3.5 8.5V11.5M7.5 11.5H17.5V19.5H7.5V11.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var UnpublishIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "unpublish",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M5 19.5H20M12.5 16V5",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M17.5 11L12.5 16L7.5 11",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var UploadIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      "data-sanity-icon": "upload",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: [
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M12.5 6.00003V15.5M5.5 15.5H19.5V19.5H5.5V15.5Z",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        ),
        (0, import_jsx_runtime.jsx)(
          "path",
          {
            d: "M7.5 11L12.5 6.00003L17.5 11",
            stroke: "currentColor",
            strokeWidth: 1.2,
            strokeLinejoin: "round"
          }
        )
      ]
    }
  );
});
var UserIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "user",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M8 14.5C7 15 5.5 16 5.5 19.5H19.5C19.5 16 18.3416 15.1708 17 14.5C16 14 14 14 14 12.5C14 11 15 10.25 15 8.25C15 6.25 14 5.25 12.5 5.25C11 5.25 10 6.25 10 8.25C10 10.25 11 11 11 12.5C11 14 9 14 8 14.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var UsersIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "users",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M17.5 18.5H21.5C21.5 15 20.8416 14.1708 19.5 13.5C18.5 13 16.5 12.5 16.5 11C16.5 9.5 17.5 9 17.5 7C17.5 5 16.5 4 15 4C13.6628 4 12.723 4.79472 12.5347 6.38415M4.5 20.5C4.5 17 5.5 16 6.5 15.5C7.5 15 9.5 14.5 9.5 13C9.5 11.5 8.5 11 8.5 9C8.5 7 9.5 6 11 6C12.5 6 13.5 7 13.5 9C13.5 11 12.5 11.5 12.5 13C12.5 14.5 14.5 15 15.5 15.5C16.8416 16.1708 17.5 17 17.5 20.5H4.5Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var WarningFilledIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "warning-filled",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          fillRule: "evenodd",
          clipRule: "evenodd",
          d: "M14.741 5.12637C13.7357 3.41737 11.2643 3.41737 10.259 5.12637L3.7558 16.1818C2.73624 17.915 3.98595 20.1 5.99683 20.1H19.0032C21.014 20.1 22.2637 17.915 21.2442 16.1818L14.741 5.12637ZM11.9 9V13H13.1V9H11.9ZM13.1 16V14.5H11.9V16H13.1Z",
          fill: "currentColor"
        }
      )
    }
  );
});
var WarningOutlineIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "warning-outline",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M12.5 9V13M12.5 16V14.5M14.2239 5.43058L20.727 16.486C21.5113 17.8192 20.55 19.5 19.0032 19.5H5.99683C4.45 19.5 3.48869 17.8192 4.27297 16.486L10.7761 5.43058C11.5494 4.11596 13.4506 4.11596 14.2239 5.43058Z",
          stroke: "currentColor",
          strokeWidth: 1.2,
          strokeLinejoin: "round"
        }
      )
    }
  );
});
var WrenchIcon = (0, import_react.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime.jsx)(
    "svg",
    {
      "data-sanity-icon": "wrench",
      width: "1em",
      height: "1em",
      viewBox: "0 0 25 25",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref,
      ...props,
      children: (0, import_jsx_runtime.jsx)(
        "path",
        {
          d: "M17.0407 5.14624L17.4649 5.57051C17.6166 5.41887 17.6757 5.19783 17.6202 4.99071C17.5646 4.78359 17.4027 4.62189 17.1955 4.56656L17.0407 5.14624ZM14.4013 7.7856L13.977 7.36134C13.8288 7.50959 13.7687 7.72447 13.8185 7.92813L14.4013 7.7856ZM12.8778 6.26211L12.4535 5.83784V5.83784L12.8778 6.26211ZM11.8309 10.6568L12.2552 11.0811C12.4152 10.9211 12.4716 10.6847 12.401 10.4697L11.8309 10.6568ZM5.63925 16.8485L5.21498 16.4242H5.21498L5.63925 16.8485ZM5.63925 19.935L6.06351 19.5108H6.06351L5.63925 19.935ZM8.72581 19.935L9.15007 20.3593L8.72581 19.935ZM15.1184 13.5425L15.2301 12.953C15.0351 12.916 14.8344 12.9779 14.6941 13.1182L15.1184 13.5425ZM18.9718 12.3561L19.3961 12.7804L18.9718 12.3561ZM20.0877 8.19324L20.6674 8.03843C20.612 7.83125 20.4503 7.66934 20.2432 7.61375C20.0361 7.55816 19.815 7.61734 19.6634 7.76898L20.0877 8.19324ZM17.4483 10.8326L17.3058 11.4154C17.5094 11.4652 17.7243 11.4051 17.8726 11.2569L17.4483 10.8326ZM15 10.2339L14.4172 10.3764C14.4704 10.5938 14.6401 10.7635 14.8575 10.8167L15 10.2339ZM16.6164 4.72198L13.977 7.36134L14.8256 8.20986L17.4649 5.57051L16.6164 4.72198ZM13.3021 6.68637C14.2723 5.71612 15.6467 5.39501 16.8859 5.72593L17.1955 4.56656C15.5595 4.12966 13.7389 4.55245 12.4535 5.83784L13.3021 6.68637ZM12.401 10.4697C11.9779 9.18109 12.2794 7.70907 13.3021 6.68637L12.4535 5.83784C11.0985 7.19284 10.7021 9.14218 11.2608 10.844L12.401 10.4697ZM11.4066 10.2326L5.21498 16.4242L6.06351 17.2727L12.2552 11.0811L11.4066 10.2326ZM5.21498 16.4242C4.12834 17.5109 4.12834 19.2727 5.21498 20.3593L6.06351 19.5108C5.4455 18.8928 5.4455 17.8908 6.06351 17.2727L5.21498 16.4242ZM5.21498 20.3593C6.30163 21.446 8.06343 21.446 9.15007 20.3593L8.30155 19.5108C7.68353 20.1288 6.68153 20.1288 6.06351 19.5108L5.21498 20.3593ZM9.15007 20.3593L15.5426 13.9668L14.6941 13.1182L8.30155 19.5108L9.15007 20.3593ZM18.5475 11.9318C17.6463 12.8331 16.3968 13.1742 15.2301 12.953L15.0066 14.132C16.5466 14.4239 18.2023 13.9741 19.3961 12.7804L18.5475 11.9318ZM19.508 8.34804C19.8389 9.58721 19.5178 10.9616 18.5475 11.9318L19.3961 12.7804C20.6815 11.495 21.1043 9.67445 20.6674 8.03843L19.508 8.34804ZM17.8726 11.2569L20.5119 8.6175L19.6634 7.76898L17.024 10.4083L17.8726 11.2569ZM14.8575 10.8167L17.3058 11.4154L17.5908 10.2498L15.1426 9.65106L14.8575 10.8167ZM13.8185 7.92813L14.4172 10.3764L15.5829 10.0914L14.9841 7.64307L13.8185 7.92813Z",
          fill: "currentColor"
        }
      )
    }
  );
});
var icons = {
  "access-denied": AccessDeniedIcon,
  activity: ActivityIcon,
  "add-circle": AddCircleIcon,
  "add-comment": AddCommentIcon,
  add: AddIcon,
  api: ApiIcon,
  archive: ArchiveIcon,
  "arrow-down": ArrowDownIcon,
  "arrow-left": ArrowLeftIcon,
  "arrow-right": ArrowRightIcon,
  "arrow-top-right": ArrowTopRightIcon,
  "arrow-up": ArrowUpIcon,
  asterisk: AsteriskIcon,
  "bar-chart": BarChartIcon,
  basket: BasketIcon,
  bell: BellIcon,
  bill: BillIcon,
  "binary-document": BinaryDocumentIcon,
  "block-content": BlockContentIcon,
  "block-element": BlockElementIcon,
  blockquote: BlockquoteIcon,
  bold: BoldIcon,
  bolt: BoltIcon,
  book: BookIcon,
  bottle: BottleIcon,
  "bulb-filled": BulbFilledIcon,
  "bulb-outline": BulbOutlineIcon,
  calendar: CalendarIcon,
  case: CaseIcon,
  "chart-upward": ChartUpwardIcon,
  "checkmark-circle": CheckmarkCircleIcon,
  checkmark: CheckmarkIcon,
  "chevron-down": ChevronDownIcon,
  "chevron-left": ChevronLeftIcon,
  "chevron-right": ChevronRightIcon,
  "chevron-up": ChevronUpIcon,
  circle: CircleIcon,
  clipboard: ClipboardIcon,
  "clipboard-image": ClipboardImageIcon,
  clock: ClockIcon,
  "close-circle": CloseCircleIcon,
  close: CloseIcon,
  "code-block": CodeBlockIcon,
  code: CodeIcon,
  cog: CogIcon,
  collapse: CollapseIcon,
  "color-wheel": ColorWheelIcon,
  comment: CommentIcon,
  component: ComponentIcon,
  compose: ComposeIcon,
  confetti: ConfettiIcon,
  controls: ControlsIcon,
  copy: CopyIcon,
  "credit-card": CreditCardIcon,
  crop: CropIcon,
  cube: CubeIcon,
  dashboard: DashboardIcon,
  database: DatabaseIcon,
  desktop: DesktopIcon,
  diamond: DiamondIcon,
  document: DocumentIcon,
  "document-pdf": DocumentPdfIcon,
  "document-remove": DocumentRemoveIcon,
  "document-sheet": DocumentSheetIcon,
  "document-text": DocumentTextIcon,
  "document-video": DocumentVideoIcon,
  "document-word": DocumentWordIcon,
  "document-zip": DocumentZipIcon,
  documents: DocumentsIcon,
  dot: DotIcon,
  "double-chevron-down": DoubleChevronDownIcon,
  "double-chevron-left": DoubleChevronLeftIcon,
  "double-chevron-right": DoubleChevronRightIcon,
  "double-chevron-up": DoubleChevronUpIcon,
  download: DownloadIcon,
  "drag-handle": DragHandleIcon,
  drop: DropIcon,
  "earth-americas": EarthAmericasIcon,
  "earth-globe": EarthGlobeIcon,
  edit: EditIcon,
  "ellipsis-horizontal": EllipsisHorizontalIcon,
  "ellipsis-vertical": EllipsisVerticalIcon,
  enter: EnterIcon,
  "enter-right": EnterRightIcon,
  envelope: EnvelopeIcon,
  equal: EqualIcon,
  "error-filled": ErrorFilledIcon,
  "error-outline": ErrorOutlineIcon,
  expand: ExpandIcon,
  "eye-closed": EyeClosedIcon,
  "eye-open": EyeOpenIcon,
  filter: FilterIcon,
  folder: FolderIcon,
  generate: GenerateIcon,
  groq: GroqIcon,
  hash: HashIcon,
  "heart-filled": HeartFilledIcon,
  heart: HeartIcon,
  "help-circle": HelpCircleIcon,
  highlight: HighlightIcon,
  home: HomeIcon,
  "ice-cream": IceCreamIcon,
  image: ImageIcon,
  "image-remove": ImageRemoveIcon,
  images: ImagesIcon,
  "info-filled": InfoFilledIcon,
  "info-outline": InfoOutlineIcon,
  "inline-element": InlineElementIcon,
  inline: InlineIcon,
  "insert-above": InsertAboveIcon,
  "insert-below": InsertBelowIcon,
  italic: ItalicIcon,
  joystick: JoystickIcon,
  json: JsonIcon,
  launch: LaunchIcon,
  leave: LeaveIcon,
  lemon: LemonIcon,
  link: LinkIcon,
  "link-removed": LinkRemovedIcon,
  lock: LockIcon,
  "logo-js": LogoJsIcon,
  "logo-ts": LogoTsIcon,
  "master-detail": MasterDetailIcon,
  menu: MenuIcon,
  "mobile-device": MobileDeviceIcon,
  moon: MoonIcon,
  number: NumberIcon,
  "ok-hand": OkHandIcon,
  olist: OlistIcon,
  overage: OverageIcon,
  package: PackageIcon,
  "panel-left": PanelLeftIcon,
  "panel-right": PanelRightIcon,
  pause: PauseIcon,
  pin: PinIcon,
  "pin-removed": PinRemovedIcon,
  play: PlayIcon,
  plug: PlugIcon,
  presentation: PresentationIcon,
  projects: ProjectsIcon,
  publish: PublishIcon,
  "read-only": ReadOnlyIcon,
  redo: RedoIcon,
  refresh: RefreshIcon,
  "remove-circle": RemoveCircleIcon,
  remove: RemoveIcon,
  reset: ResetIcon,
  restore: RestoreIcon,
  retrieve: RetrieveIcon,
  retry: RetryIcon,
  revert: RevertIcon,
  robot: RobotIcon,
  rocket: RocketIcon,
  schema: SchemaIcon,
  search: SearchIcon,
  select: SelectIcon,
  share: ShareIcon,
  sort: SortIcon,
  sparkle: SparkleIcon,
  sparkles: SparklesIcon,
  spinner: SpinnerIcon,
  "split-horizontal": SplitHorizontalIcon,
  "split-vertical": SplitVerticalIcon,
  square: SquareIcon,
  "stack-compact": StackCompactIcon,
  stack: StackIcon,
  star: StarIcon,
  stop: StopIcon,
  strikethrough: StrikethroughIcon,
  string: StringIcon,
  sun: SunIcon,
  sync: SyncIcon,
  "tablet-device": TabletDeviceIcon,
  tag: TagIcon,
  tags: TagsIcon,
  task: TaskIcon,
  terminal: TerminalIcon,
  text: TextIcon,
  "th-large": ThLargeIcon,
  "th-list": ThListIcon,
  tiers: TiersIcon,
  "toggle-arrow-right": ToggleArrowRightIcon,
  token: TokenIcon,
  transfer: TransferIcon,
  translate: TranslateIcon,
  trash: TrashIcon,
  "trend-upward": TrendUpwardIcon,
  "triangle-outline": TriangleOutlineIcon,
  trolley: TrolleyIcon,
  truncate: TruncateIcon,
  twitter: TwitterIcon,
  ulist: UlistIcon,
  underline: UnderlineIcon,
  undo: UndoIcon,
  unknown: UnknownIcon,
  unlock: UnlockIcon,
  unpublish: UnpublishIcon,
  upload: UploadIcon,
  user: UserIcon,
  users: UsersIcon,
  "warning-filled": WarningFilledIcon,
  "warning-outline": WarningOutlineIcon,
  wrench: WrenchIcon
};
var Icon = (0, import_react.forwardRef)(function(props, ref) {
  const { symbol, ...restProps } = props, iconComponent = icons[symbol];
  return iconComponent ? (0, import_react.createElement)(iconComponent, { ...restProps, ref }) : null;
});

// node_modules/sanity-translations-tab/node_modules/@sanity/ui/dist/index.esm.js
var import_react_refractor = __toESM(require_Refractor());

// node_modules/sanity-translations-tab/node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.esm.js
var React = __toESM(require_react());
var import_react2 = __toESM(require_react());
var ReactDOM = __toESM(require_react_dom());
var arrow2 = (options) => {
  const {
    element,
    padding
  } = options;
  function isRef(value) {
    return {}.hasOwnProperty.call(value, "current");
  }
  return {
    name: "arrow",
    options,
    fn(args) {
      if (element && isRef(element)) {
        if (element.current != null) {
          return arrow({
            element: element.current,
            padding
          }).fn(args);
        }
        return {};
      } else if (element) {
        return arrow({
          element,
          padding
        }).fn(args);
      }
      return {};
    }
  };
};
var index = typeof document !== "undefined" ? import_react2.useLayoutEffect : import_react2.useEffect;
function deepEqual(a, b) {
  if (a === b) {
    return true;
  }
  if (typeof a !== typeof b) {
    return false;
  }
  if (typeof a === "function" && a.toString() === b.toString()) {
    return true;
  }
  let length, i, keys;
  if (a && b && typeof a == "object") {
    if (Array.isArray(a)) {
      length = a.length;
      if (length != b.length)
        return false;
      for (i = length; i-- !== 0; ) {
        if (!deepEqual(a[i], b[i])) {
          return false;
        }
      }
      return true;
    }
    keys = Object.keys(a);
    length = keys.length;
    if (length !== Object.keys(b).length) {
      return false;
    }
    for (i = length; i-- !== 0; ) {
      if (!{}.hasOwnProperty.call(b, keys[i])) {
        return false;
      }
    }
    for (i = length; i-- !== 0; ) {
      const key2 = keys[i];
      if (key2 === "_owner" && a.$$typeof) {
        continue;
      }
      if (!deepEqual(a[key2], b[key2])) {
        return false;
      }
    }
    return true;
  }
  return a !== a && b !== b;
}
function getDPR(element) {
  if (typeof window === "undefined") {
    return 1;
  }
  const win = element.ownerDocument.defaultView || window;
  return win.devicePixelRatio || 1;
}
function roundByDPR(element, value) {
  const dpr = getDPR(element);
  return Math.round(value * dpr) / dpr;
}
function useLatestRef(value) {
  const ref = React.useRef(value);
  index(() => {
    ref.current = value;
  });
  return ref;
}
function useFloating(options) {
  if (options === void 0) {
    options = {};
  }
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2,
    elements: {
      reference: externalReference,
      floating: externalFloating
    } = {},
    transform: transform2 = true,
    whileElementsMounted,
    open
  } = options;
  const [data, setData] = React.useState({
    x: 0,
    y: 0,
    strategy,
    placement,
    middlewareData: {},
    isPositioned: false
  });
  const [latestMiddleware, setLatestMiddleware] = React.useState(middleware);
  if (!deepEqual(latestMiddleware, middleware)) {
    setLatestMiddleware(middleware);
  }
  const [_reference, _setReference] = React.useState(null);
  const [_floating, _setFloating] = React.useState(null);
  const setReference = React.useCallback((node) => {
    if (node != referenceRef.current) {
      referenceRef.current = node;
      _setReference(node);
    }
  }, [_setReference]);
  const setFloating = React.useCallback((node) => {
    if (node !== floatingRef.current) {
      floatingRef.current = node;
      _setFloating(node);
    }
  }, [_setFloating]);
  const referenceEl = externalReference || _reference;
  const floatingEl = externalFloating || _floating;
  const referenceRef = React.useRef(null);
  const floatingRef = React.useRef(null);
  const dataRef = React.useRef(data);
  const whileElementsMountedRef = useLatestRef(whileElementsMounted);
  const platformRef = useLatestRef(platform2);
  const update = React.useCallback(() => {
    if (!referenceRef.current || !floatingRef.current) {
      return;
    }
    const config = {
      placement,
      strategy,
      middleware: latestMiddleware
    };
    if (platformRef.current) {
      config.platform = platformRef.current;
    }
    computePosition(referenceRef.current, floatingRef.current, config).then((data2) => {
      const fullData = {
        ...data2,
        isPositioned: true
      };
      if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {
        dataRef.current = fullData;
        ReactDOM.flushSync(() => {
          setData(fullData);
        });
      }
    });
  }, [latestMiddleware, placement, strategy, platformRef]);
  index(() => {
    if (open === false && dataRef.current.isPositioned) {
      dataRef.current.isPositioned = false;
      setData((data2) => ({
        ...data2,
        isPositioned: false
      }));
    }
  }, [open]);
  const isMountedRef = React.useRef(false);
  index(() => {
    isMountedRef.current = true;
    return () => {
      isMountedRef.current = false;
    };
  }, []);
  index(() => {
    if (referenceEl)
      referenceRef.current = referenceEl;
    if (floatingEl)
      floatingRef.current = floatingEl;
    if (referenceEl && floatingEl) {
      if (whileElementsMountedRef.current) {
        return whileElementsMountedRef.current(referenceEl, floatingEl, update);
      } else {
        update();
      }
    }
  }, [referenceEl, floatingEl, update, whileElementsMountedRef]);
  const refs = React.useMemo(() => ({
    reference: referenceRef,
    floating: floatingRef,
    setReference,
    setFloating
  }), [setReference, setFloating]);
  const elements = React.useMemo(() => ({
    reference: referenceEl,
    floating: floatingEl
  }), [referenceEl, floatingEl]);
  const floatingStyles = React.useMemo(() => {
    const initialStyles = {
      position: strategy,
      left: 0,
      top: 0
    };
    if (!elements.floating) {
      return initialStyles;
    }
    const x = roundByDPR(elements.floating, data.x);
    const y = roundByDPR(elements.floating, data.y);
    if (transform2) {
      return {
        ...initialStyles,
        transform: "translate(" + x + "px, " + y + "px)",
        ...getDPR(elements.floating) >= 1.5 && {
          willChange: "transform"
        }
      };
    }
    return {
      position: strategy,
      left: x,
      top: y
    };
  }, [strategy, transform2, elements.floating, data.x, data.y]);
  return React.useMemo(() => ({
    ...data,
    update,
    refs,
    elements,
    floatingStyles
  }), [data, update, refs, elements, floatingStyles]);
}

// node_modules/sanity-translations-tab/node_modules/@sanity/ui/dist/index.esm.js
var import_react_dom2 = __toESM(require_react_dom());

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/motion/index.mjs
var React2 = __toESM(require_react(), 1);
var import_react13 = __toESM(require_react(), 1);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs
var import_react3 = __toESM(require_react(), 1);
var MotionConfigContext = (0, import_react3.createContext)({
  transformPagePoint: (p) => p,
  isStatic: false,
  reducedMotion: "never"
});

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/context/MotionContext/index.mjs
var import_react4 = __toESM(require_react(), 1);
var MotionContext = (0, import_react4.createContext)({});

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs
var import_react8 = __toESM(require_react(), 1);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/context/PresenceContext.mjs
var import_react5 = __toESM(require_react(), 1);
var PresenceContext = (0, import_react5.createContext)(null);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs
var import_react6 = __toESM(require_react(), 1);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/is-browser.mjs
var isBrowser = typeof document !== "undefined";

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs
var useIsomorphicLayoutEffect = isBrowser ? import_react6.useLayoutEffect : import_react6.useEffect;

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/context/LazyContext.mjs
var import_react7 = __toESM(require_react(), 1);
var LazyContext = (0, import_react7.createContext)({ strict: false });

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs
var camelToDash = (str) => str.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/animation/optimized-appear/data-id.mjs
var optimizedAppearDataId = "framerAppearId";
var optimizedAppearDataAttribute = "data-" + camelToDash(optimizedAppearDataId);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs
function useVisualElement(Component3, visualState, props, createVisualElement2) {
  const { visualElement: parent } = (0, import_react8.useContext)(MotionContext);
  const lazyContext = (0, import_react8.useContext)(LazyContext);
  const presenceContext = (0, import_react8.useContext)(PresenceContext);
  const reducedMotionConfig = (0, import_react8.useContext)(MotionConfigContext).reducedMotion;
  const visualElementRef = (0, import_react8.useRef)();
  createVisualElement2 = createVisualElement2 || lazyContext.renderer;
  if (!visualElementRef.current && createVisualElement2) {
    visualElementRef.current = createVisualElement2(Component3, {
      visualState,
      parent,
      props,
      presenceContext,
      blockInitialAnimation: presenceContext ? presenceContext.initial === false : false,
      reducedMotionConfig
    });
  }
  const visualElement = visualElementRef.current;
  (0, import_react8.useInsertionEffect)(() => {
    visualElement && visualElement.update(props, presenceContext);
  });
  const wantsHandoff = (0, import_react8.useRef)(Boolean(props[optimizedAppearDataAttribute] && !window.HandoffComplete));
  useIsomorphicLayoutEffect(() => {
    if (!visualElement)
      return;
    visualElement.render();
    if (wantsHandoff.current && visualElement.animationState) {
      visualElement.animationState.animateChanges();
    }
  });
  (0, import_react8.useEffect)(() => {
    if (!visualElement)
      return;
    visualElement.updateFeatures();
    if (!wantsHandoff.current && visualElement.animationState) {
      visualElement.animationState.animateChanges();
    }
    if (wantsHandoff.current) {
      wantsHandoff.current = false;
      window.HandoffComplete = true;
    }
  });
  return visualElement;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs
var import_react9 = __toESM(require_react(), 1);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/is-ref-object.mjs
function isRefObject(ref) {
  return ref && typeof ref === "object" && Object.prototype.hasOwnProperty.call(ref, "current");
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs
function useMotionRef(visualState, visualElement, externalRef) {
  return (0, import_react9.useCallback)(
    (instance) => {
      instance && visualState.mount && visualState.mount(instance);
      if (visualElement) {
        instance ? visualElement.mount(instance) : visualElement.unmount();
      }
      if (externalRef) {
        if (typeof externalRef === "function") {
          externalRef(instance);
        } else if (isRefObject(externalRef)) {
          externalRef.current = instance;
        }
      }
    },
    /**
     * Only pass a new ref callback to React if we've received a visual element
     * factory. Otherwise we'll be mounting/remounting every time externalRef
     * or other dependencies change.
     */
    [visualElement]
  );
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/context/MotionContext/create.mjs
var import_react10 = __toESM(require_react(), 1);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/utils/is-variant-label.mjs
function isVariantLabel(v) {
  return typeof v === "string" || Array.isArray(v);
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs
function isAnimationControls(v) {
  return v !== null && typeof v === "object" && typeof v.start === "function";
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/utils/variant-props.mjs
var variantPriorityOrder = [
  "animate",
  "whileInView",
  "whileFocus",
  "whileHover",
  "whileTap",
  "whileDrag",
  "exit"
];
var variantProps = ["initial", ...variantPriorityOrder];

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/utils/is-controlling-variants.mjs
function isControllingVariants(props) {
  return isAnimationControls(props.animate) || variantProps.some((name) => isVariantLabel(props[name]));
}
function isVariantNode(props) {
  return Boolean(isControllingVariants(props) || props.variants);
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs
function getCurrentTreeVariants(props, context) {
  if (isControllingVariants(props)) {
    const { initial, animate: animate2 } = props;
    return {
      initial: initial === false || isVariantLabel(initial) ? initial : void 0,
      animate: isVariantLabel(animate2) ? animate2 : void 0
    };
  }
  return props.inherit !== false ? context : {};
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/context/MotionContext/create.mjs
function useCreateMotionContext(props) {
  const { initial, animate: animate2 } = getCurrentTreeVariants(props, (0, import_react10.useContext)(MotionContext));
  return (0, import_react10.useMemo)(() => ({ initial, animate: animate2 }), [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate2)]);
}
function variantLabelsAsDependency(prop) {
  return Array.isArray(prop) ? prop.join(" ") : prop;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/motion/features/definitions.mjs
var featureProps = {
  animation: [
    "animate",
    "variants",
    "whileHover",
    "whileTap",
    "exit",
    "whileInView",
    "whileFocus",
    "whileDrag"
  ],
  exit: ["exit"],
  drag: ["drag", "dragControls"],
  focus: ["whileFocus"],
  hover: ["whileHover", "onHoverStart", "onHoverEnd"],
  tap: ["whileTap", "onTap", "onTapStart", "onTapCancel"],
  pan: ["onPan", "onPanStart", "onPanSessionStart", "onPanEnd"],
  inView: ["whileInView", "onViewportEnter", "onViewportLeave"],
  layout: ["layout", "layoutId"]
};
var featureDefinitions = {};
for (const key2 in featureProps) {
  featureDefinitions[key2] = {
    isEnabled: (props) => featureProps[key2].some((name) => !!props[name])
  };
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/motion/features/load-features.mjs
function loadFeatures(features) {
  for (const key2 in features) {
    featureDefinitions[key2] = {
      ...featureDefinitions[key2],
      ...features[key2]
    };
  }
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs
var import_react11 = __toESM(require_react(), 1);
var LayoutGroupContext = (0, import_react11.createContext)({});

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs
var import_react12 = __toESM(require_react(), 1);
var SwitchLayoutGroupContext = (0, import_react12.createContext)({});

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/motion/utils/symbol.mjs
var motionComponentSymbol = Symbol.for("motionComponentSymbol");

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/motion/index.mjs
function createMotionComponent({ preloadedFeatures: preloadedFeatures2, createVisualElement: createVisualElement2, useRender, useVisualState: useVisualState2, Component: Component3 }) {
  preloadedFeatures2 && loadFeatures(preloadedFeatures2);
  function MotionComponent(props, externalRef) {
    let MeasureLayout2;
    const configAndProps = {
      ...(0, import_react13.useContext)(MotionConfigContext),
      ...props,
      layoutId: useLayoutId(props)
    };
    const { isStatic } = configAndProps;
    const context = useCreateMotionContext(props);
    const visualState = useVisualState2(props, isStatic);
    if (!isStatic && isBrowser) {
      context.visualElement = useVisualElement(Component3, visualState, configAndProps, createVisualElement2);
      const initialLayoutGroupConfig = (0, import_react13.useContext)(SwitchLayoutGroupContext);
      const isStrict = (0, import_react13.useContext)(LazyContext).strict;
      if (context.visualElement) {
        MeasureLayout2 = context.visualElement.loadFeatures(
          // Note: Pass the full new combined props to correctly re-render dynamic feature components.
          configAndProps,
          isStrict,
          preloadedFeatures2,
          initialLayoutGroupConfig
        );
      }
    }
    return React2.createElement(
      MotionContext.Provider,
      { value: context },
      MeasureLayout2 && context.visualElement ? React2.createElement(MeasureLayout2, { visualElement: context.visualElement, ...configAndProps }) : null,
      useRender(Component3, props, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement)
    );
  }
  const ForwardRefComponent = (0, import_react13.forwardRef)(MotionComponent);
  ForwardRefComponent[motionComponentSymbol] = Component3;
  return ForwardRefComponent;
}
function useLayoutId({ layoutId }) {
  const layoutGroupId = (0, import_react13.useContext)(LayoutGroupContext).id;
  return layoutGroupId && layoutId !== void 0 ? layoutGroupId + "-" + layoutId : layoutId;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/dom/motion-proxy.mjs
function createMotionProxy(createConfig) {
  function custom(Component3, customMotionComponentConfig = {}) {
    return createMotionComponent(createConfig(Component3, customMotionComponentConfig));
  }
  if (typeof Proxy === "undefined") {
    return custom;
  }
  const componentCache = /* @__PURE__ */ new Map();
  return new Proxy(custom, {
    /**
     * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.
     * The prop name is passed through as `key` and we can use that to generate a `motion`
     * DOM component with that name.
     */
    get: (_target, key2) => {
      if (!componentCache.has(key2)) {
        componentCache.set(key2, custom(key2));
      }
      return componentCache.get(key2);
    }
  });
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs
var lowercaseSVGElements = [
  "animate",
  "circle",
  "defs",
  "desc",
  "ellipse",
  "g",
  "image",
  "line",
  "filter",
  "marker",
  "mask",
  "metadata",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "rect",
  "stop",
  "switch",
  "symbol",
  "svg",
  "text",
  "tspan",
  "use",
  "view"
];

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs
function isSVGComponent(Component3) {
  if (
    /**
     * If it's not a string, it's a custom React component. Currently we only support
     * HTML custom React components.
     */
    typeof Component3 !== "string" || /**
     * If it contains a dash, the element is a custom HTML webcomponent.
     */
    Component3.includes("-")
  ) {
    return false;
  } else if (
    /**
     * If it's in our list of lowercase SVG tags, it's an SVG component
     */
    lowercaseSVGElements.indexOf(Component3) > -1 || /**
     * If it contains a capital letter, it's an SVG component
     */
    /[A-Z]/.test(Component3)
  ) {
    return true;
  }
  return false;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/dom/use-render.mjs
var import_react16 = __toESM(require_react(), 1);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/html/use-props.mjs
var import_react14 = __toESM(require_react(), 1);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs
var scaleCorrectors = {};
function addScaleCorrector(correctors) {
  Object.assign(scaleCorrectors, correctors);
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/html/utils/transform.mjs
var transformPropOrder = [
  "transformPerspective",
  "x",
  "y",
  "z",
  "translateX",
  "translateY",
  "translateZ",
  "scale",
  "scaleX",
  "scaleY",
  "rotate",
  "rotateX",
  "rotateY",
  "rotateZ",
  "skew",
  "skewX",
  "skewY"
];
var transformProps = new Set(transformPropOrder);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs
function isForcedMotionValue(key2, { layout: layout2, layoutId }) {
  return transformProps.has(key2) || key2.startsWith("origin") || (layout2 || layoutId !== void 0) && (!!scaleCorrectors[key2] || key2 === "opacity");
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs
var isMotionValue = (value) => Boolean(value && value.getVelocity);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs
var translateAlias = {
  x: "translateX",
  y: "translateY",
  z: "translateZ",
  transformPerspective: "perspective"
};
var numTransforms = transformPropOrder.length;
function buildTransform(transform2, { enableHardwareAcceleration = true, allowTransformNone = true }, transformIsDefault, transformTemplate) {
  let transformString = "";
  for (let i = 0; i < numTransforms; i++) {
    const key2 = transformPropOrder[i];
    if (transform2[key2] !== void 0) {
      const transformName = translateAlias[key2] || key2;
      transformString += `${transformName}(${transform2[key2]}) `;
    }
  }
  if (enableHardwareAcceleration && !transform2.z) {
    transformString += "translateZ(0)";
  }
  transformString = transformString.trim();
  if (transformTemplate) {
    transformString = transformTemplate(transform2, transformIsDefault ? "" : transformString);
  } else if (allowTransformNone && transformIsDefault) {
    transformString = "none";
  }
  return transformString;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs
var checkStringStartsWith = (token) => (key2) => typeof key2 === "string" && key2.startsWith(token);
var isCSSVariableName = checkStringStartsWith("--");
var isCSSVariableToken = checkStringStartsWith("var(--");
var cssVariableRegex = /var\s*\(\s*--[\w-]+(\s*,\s*(?:(?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)+)?\s*\)/g;

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.mjs
var getValueAsType = (value, type) => {
  return type && typeof value === "number" ? type.transform(value) : value;
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/clamp.mjs
var clamp = (min, max, v) => Math.min(Math.max(v, min), max);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/value/types/numbers/index.mjs
var number = {
  test: (v) => typeof v === "number",
  parse: parseFloat,
  transform: (v) => v
};
var alpha = {
  ...number,
  transform: (v) => clamp(0, 1, v)
};
var scale = {
  ...number,
  default: 1
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/value/types/utils.mjs
var sanitize = (v) => Math.round(v * 1e5) / 1e5;
var floatRegex = /(-)?([\d]*\.?[\d])+/g;
var colorRegex = /(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))/gi;
var singleColorRegex = /^(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))$/i;
function isString(v) {
  return typeof v === "string";
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/value/types/numbers/units.mjs
var createUnitType = (unit) => ({
  test: (v) => isString(v) && v.endsWith(unit) && v.split(" ").length === 1,
  parse: parseFloat,
  transform: (v) => `${v}${unit}`
});
var degrees = createUnitType("deg");
var percent = createUnitType("%");
var px = createUnitType("px");
var vh = createUnitType("vh");
var vw = createUnitType("vw");
var progressPercentage = {
  ...percent,
  parse: (v) => percent.parse(v) / 100,
  transform: (v) => percent.transform(v * 100)
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/dom/value-types/type-int.mjs
var int = {
  ...number,
  transform: Math.round
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs
var numberValueTypes = {
  // Border props
  borderWidth: px,
  borderTopWidth: px,
  borderRightWidth: px,
  borderBottomWidth: px,
  borderLeftWidth: px,
  borderRadius: px,
  radius: px,
  borderTopLeftRadius: px,
  borderTopRightRadius: px,
  borderBottomRightRadius: px,
  borderBottomLeftRadius: px,
  // Positioning props
  width: px,
  maxWidth: px,
  height: px,
  maxHeight: px,
  size: px,
  top: px,
  right: px,
  bottom: px,
  left: px,
  // Spacing props
  padding: px,
  paddingTop: px,
  paddingRight: px,
  paddingBottom: px,
  paddingLeft: px,
  margin: px,
  marginTop: px,
  marginRight: px,
  marginBottom: px,
  marginLeft: px,
  // Transform props
  rotate: degrees,
  rotateX: degrees,
  rotateY: degrees,
  rotateZ: degrees,
  scale,
  scaleX: scale,
  scaleY: scale,
  scaleZ: scale,
  skew: degrees,
  skewX: degrees,
  skewY: degrees,
  distance: px,
  translateX: px,
  translateY: px,
  translateZ: px,
  x: px,
  y: px,
  z: px,
  perspective: px,
  transformPerspective: px,
  opacity: alpha,
  originX: progressPercentage,
  originY: progressPercentage,
  originZ: px,
  // Misc
  zIndex: int,
  // SVG
  fillOpacity: alpha,
  strokeOpacity: alpha,
  numOctaves: int
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs
function buildHTMLStyles(state, latestValues, options, transformTemplate) {
  const { style, vars, transform: transform2, transformOrigin } = state;
  let hasTransform2 = false;
  let hasTransformOrigin = false;
  let transformIsNone = true;
  for (const key2 in latestValues) {
    const value = latestValues[key2];
    if (isCSSVariableName(key2)) {
      vars[key2] = value;
      continue;
    }
    const valueType = numberValueTypes[key2];
    const valueAsType = getValueAsType(value, valueType);
    if (transformProps.has(key2)) {
      hasTransform2 = true;
      transform2[key2] = valueAsType;
      if (!transformIsNone)
        continue;
      if (value !== (valueType.default || 0))
        transformIsNone = false;
    } else if (key2.startsWith("origin")) {
      hasTransformOrigin = true;
      transformOrigin[key2] = valueAsType;
    } else {
      style[key2] = valueAsType;
    }
  }
  if (!latestValues.transform) {
    if (hasTransform2 || transformTemplate) {
      style.transform = buildTransform(state.transform, options, transformIsNone, transformTemplate);
    } else if (style.transform) {
      style.transform = "none";
    }
  }
  if (hasTransformOrigin) {
    const { originX = "50%", originY = "50%", originZ = 0 } = transformOrigin;
    style.transformOrigin = `${originX} ${originY} ${originZ}`;
  }
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs
var createHtmlRenderState = () => ({
  style: {},
  transform: {},
  transformOrigin: {},
  vars: {}
});

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/html/use-props.mjs
function copyRawValuesOnly(target, source, props) {
  for (const key2 in source) {
    if (!isMotionValue(source[key2]) && !isForcedMotionValue(key2, props)) {
      target[key2] = source[key2];
    }
  }
}
function useInitialMotionValues({ transformTemplate }, visualState, isStatic) {
  return (0, import_react14.useMemo)(() => {
    const state = createHtmlRenderState();
    buildHTMLStyles(state, visualState, { enableHardwareAcceleration: !isStatic }, transformTemplate);
    return Object.assign({}, state.vars, state.style);
  }, [visualState]);
}
function useStyle(props, visualState, isStatic) {
  const styleProp = props.style || {};
  const style = {};
  copyRawValuesOnly(style, styleProp, props);
  Object.assign(style, useInitialMotionValues(props, visualState, isStatic));
  return props.transformValues ? props.transformValues(style) : style;
}
function useHTMLProps(props, visualState, isStatic) {
  const htmlProps = {};
  const style = useStyle(props, visualState, isStatic);
  if (props.drag && props.dragListener !== false) {
    htmlProps.draggable = false;
    style.userSelect = style.WebkitUserSelect = style.WebkitTouchCallout = "none";
    style.touchAction = props.drag === true ? "none" : `pan-${props.drag === "x" ? "y" : "x"}`;
  }
  if (props.tabIndex === void 0 && (props.onTap || props.onTapStart || props.whileTap)) {
    htmlProps.tabIndex = 0;
  }
  htmlProps.style = style;
  return htmlProps;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs
var validMotionProps = /* @__PURE__ */ new Set([
  "animate",
  "exit",
  "variants",
  "initial",
  "style",
  "values",
  "variants",
  "transition",
  "transformTemplate",
  "transformValues",
  "custom",
  "inherit",
  "onBeforeLayoutMeasure",
  "onAnimationStart",
  "onAnimationComplete",
  "onUpdate",
  "onDragStart",
  "onDrag",
  "onDragEnd",
  "onMeasureDragConstraints",
  "onDirectionLock",
  "onDragTransitionEnd",
  "_dragX",
  "_dragY",
  "onHoverStart",
  "onHoverEnd",
  "onViewportEnter",
  "onViewportLeave",
  "globalTapTarget",
  "ignoreStrict",
  "viewport"
]);
function isValidMotionProp(key2) {
  return key2.startsWith("while") || key2.startsWith("drag") && key2 !== "draggable" || key2.startsWith("layout") || key2.startsWith("onTap") || key2.startsWith("onPan") || key2.startsWith("onLayout") || validMotionProps.has(key2);
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs
var shouldForward = (key2) => !isValidMotionProp(key2);
function loadExternalIsValidProp(isValidProp) {
  if (!isValidProp)
    return;
  shouldForward = (key2) => key2.startsWith("on") ? !isValidMotionProp(key2) : isValidProp(key2);
}
try {
  loadExternalIsValidProp((init_is_prop_valid_browser_esm(), __toCommonJS(is_prop_valid_browser_esm_exports)).default);
} catch (_a3) {
}
function filterProps(props, isDom, forwardMotionProps) {
  const filteredProps = {};
  for (const key2 in props) {
    if (key2 === "values" && typeof props.values === "object")
      continue;
    if (shouldForward(key2) || forwardMotionProps === true && isValidMotionProp(key2) || !isDom && !isValidMotionProp(key2) || // If trying to use native HTML drag events, forward drag listeners
    props["draggable"] && key2.startsWith("onDrag")) {
      filteredProps[key2] = props[key2];
    }
  }
  return filteredProps;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/svg/use-props.mjs
var import_react15 = __toESM(require_react(), 1);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.mjs
function calcOrigin(origin, offset2, size3) {
  return typeof origin === "string" ? origin : px.transform(offset2 + size3 * origin);
}
function calcSVGTransformOrigin(dimensions, originX, originY) {
  const pxOriginX = calcOrigin(originX, dimensions.x, dimensions.width);
  const pxOriginY = calcOrigin(originY, dimensions.y, dimensions.height);
  return `${pxOriginX} ${pxOriginY}`;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/svg/utils/path.mjs
var dashKeys = {
  offset: "stroke-dashoffset",
  array: "stroke-dasharray"
};
var camelKeys = {
  offset: "strokeDashoffset",
  array: "strokeDasharray"
};
function buildSVGPath(attrs, length, spacing = 1, offset2 = 0, useDashCase = true) {
  attrs.pathLength = 1;
  const keys = useDashCase ? dashKeys : camelKeys;
  attrs[keys.offset] = px.transform(-offset2);
  const pathLength = px.transform(length);
  const pathSpacing = px.transform(spacing);
  attrs[keys.array] = `${pathLength} ${pathSpacing}`;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs
function buildSVGAttrs(state, {
  attrX,
  attrY,
  attrScale,
  originX,
  originY,
  pathLength,
  pathSpacing = 1,
  pathOffset = 0,
  // This is object creation, which we try to avoid per-frame.
  ...latest
}, options, isSVGTag2, transformTemplate) {
  buildHTMLStyles(state, latest, options, transformTemplate);
  if (isSVGTag2) {
    if (state.style.viewBox) {
      state.attrs.viewBox = state.style.viewBox;
    }
    return;
  }
  state.attrs = state.style;
  state.style = {};
  const { attrs, style, dimensions } = state;
  if (attrs.transform) {
    if (dimensions)
      style.transform = attrs.transform;
    delete attrs.transform;
  }
  if (dimensions && (originX !== void 0 || originY !== void 0 || style.transform)) {
    style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== void 0 ? originX : 0.5, originY !== void 0 ? originY : 0.5);
  }
  if (attrX !== void 0)
    attrs.x = attrX;
  if (attrY !== void 0)
    attrs.y = attrY;
  if (attrScale !== void 0)
    attrs.scale = attrScale;
  if (pathLength !== void 0) {
    buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);
  }
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs
var createSvgRenderState = () => ({
  ...createHtmlRenderState(),
  attrs: {}
});

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/svg/utils/is-svg-tag.mjs
var isSVGTag = (tag) => typeof tag === "string" && tag.toLowerCase() === "svg";

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/svg/use-props.mjs
function useSVGProps(props, visualState, _isStatic, Component3) {
  const visualProps = (0, import_react15.useMemo)(() => {
    const state = createSvgRenderState();
    buildSVGAttrs(state, visualState, { enableHardwareAcceleration: false }, isSVGTag(Component3), props.transformTemplate);
    return {
      ...state.attrs,
      style: { ...state.style }
    };
  }, [visualState]);
  if (props.style) {
    const rawStyles = {};
    copyRawValuesOnly(rawStyles, props.style, props);
    visualProps.style = { ...rawStyles, ...visualProps.style };
  }
  return visualProps;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/dom/use-render.mjs
function createUseRender(forwardMotionProps = false) {
  const useRender = (Component3, props, ref, { latestValues }, isStatic) => {
    const useVisualProps = isSVGComponent(Component3) ? useSVGProps : useHTMLProps;
    const visualProps = useVisualProps(props, latestValues, isStatic, Component3);
    const filteredProps = filterProps(props, typeof Component3 === "string", forwardMotionProps);
    const elementProps = {
      ...filteredProps,
      ...visualProps,
      ref
    };
    const { children } = props;
    const renderedChildren = (0, import_react16.useMemo)(() => isMotionValue(children) ? children.get() : children, [children]);
    return (0, import_react16.createElement)(Component3, {
      ...elementProps,
      children: renderedChildren
    });
  };
  return useRender;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/html/utils/render.mjs
function renderHTML(element, { style, vars }, styleProp, projection) {
  Object.assign(element.style, style, projection && projection.getProjectionStyles(styleProp));
  for (const key2 in vars) {
    element.style.setProperty(key2, vars[key2]);
  }
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs
var camelCaseAttributes = /* @__PURE__ */ new Set([
  "baseFrequency",
  "diffuseConstant",
  "kernelMatrix",
  "kernelUnitLength",
  "keySplines",
  "keyTimes",
  "limitingConeAngle",
  "markerHeight",
  "markerWidth",
  "numOctaves",
  "targetX",
  "targetY",
  "surfaceScale",
  "specularConstant",
  "specularExponent",
  "stdDeviation",
  "tableValues",
  "viewBox",
  "gradientTransform",
  "pathLength",
  "startOffset",
  "textLength",
  "lengthAdjust"
]);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/svg/utils/render.mjs
function renderSVG(element, renderState, _styleProp, projection) {
  renderHTML(element, renderState, void 0, projection);
  for (const key2 in renderState.attrs) {
    element.setAttribute(!camelCaseAttributes.has(key2) ? camelToDash(key2) : key2, renderState.attrs[key2]);
  }
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs
function scrapeMotionValuesFromProps(props, prevProps) {
  const { style } = props;
  const newValues = {};
  for (const key2 in style) {
    if (isMotionValue(style[key2]) || prevProps.style && isMotionValue(prevProps.style[key2]) || isForcedMotionValue(key2, props)) {
      newValues[key2] = style[key2];
    }
  }
  return newValues;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs
function scrapeMotionValuesFromProps2(props, prevProps) {
  const newValues = scrapeMotionValuesFromProps(props, prevProps);
  for (const key2 in props) {
    if (isMotionValue(props[key2]) || isMotionValue(prevProps[key2])) {
      const targetKey = transformPropOrder.indexOf(key2) !== -1 ? "attr" + key2.charAt(0).toUpperCase() + key2.substring(1) : key2;
      newValues[targetKey] = props[key2];
    }
  }
  return newValues;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs
var import_react18 = __toESM(require_react(), 1);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/utils/resolve-variants.mjs
function resolveVariantFromProps(props, definition, custom, currentValues = {}, currentVelocity = {}) {
  if (typeof definition === "function") {
    definition = definition(custom !== void 0 ? custom : props.custom, currentValues, currentVelocity);
  }
  if (typeof definition === "string") {
    definition = props.variants && props.variants[definition];
  }
  if (typeof definition === "function") {
    definition = definition(custom !== void 0 ? custom : props.custom, currentValues, currentVelocity);
  }
  return definition;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/use-constant.mjs
var import_react17 = __toESM(require_react(), 1);
function useConstant(init) {
  const ref = (0, import_react17.useRef)(null);
  if (ref.current === null) {
    ref.current = init();
  }
  return ref.current;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs
var isKeyframesTarget = (v) => {
  return Array.isArray(v);
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/resolve-value.mjs
var isCustomValue = (v) => {
  return Boolean(v && typeof v === "object" && v.mix && v.toValue);
};
var resolveFinalValueInKeyframes = (v) => {
  return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs
function resolveMotionValue(value) {
  const unwrappedValue = isMotionValue(value) ? value.get() : value;
  return isCustomValue(unwrappedValue) ? unwrappedValue.toValue() : unwrappedValue;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs
function makeState({ scrapeMotionValuesFromProps: scrapeMotionValuesFromProps3, createRenderState, onMount }, props, context, presenceContext) {
  const state = {
    latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps3),
    renderState: createRenderState()
  };
  if (onMount) {
    state.mount = (instance) => onMount(props, instance, state);
  }
  return state;
}
var makeUseVisualState = (config) => (props, isStatic) => {
  const context = (0, import_react18.useContext)(MotionContext);
  const presenceContext = (0, import_react18.useContext)(PresenceContext);
  const make = () => makeState(config, props, context, presenceContext);
  return isStatic ? make() : useConstant(make);
};
function makeLatestValues(props, context, presenceContext, scrapeMotionValues) {
  const values = {};
  const motionValues = scrapeMotionValues(props, {});
  for (const key2 in motionValues) {
    values[key2] = resolveMotionValue(motionValues[key2]);
  }
  let { initial, animate: animate2 } = props;
  const isControllingVariants$1 = isControllingVariants(props);
  const isVariantNode$1 = isVariantNode(props);
  if (context && isVariantNode$1 && !isControllingVariants$1 && props.inherit !== false) {
    if (initial === void 0)
      initial = context.initial;
    if (animate2 === void 0)
      animate2 = context.animate;
  }
  let isInitialAnimationBlocked = presenceContext ? presenceContext.initial === false : false;
  isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;
  const variantToSet = isInitialAnimationBlocked ? animate2 : initial;
  if (variantToSet && typeof variantToSet !== "boolean" && !isAnimationControls(variantToSet)) {
    const list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];
    list.forEach((definition) => {
      const resolved = resolveVariantFromProps(props, definition);
      if (!resolved)
        return;
      const { transitionEnd, transition, ...target } = resolved;
      for (const key2 in target) {
        let valueTarget = target[key2];
        if (Array.isArray(valueTarget)) {
          const index2 = isInitialAnimationBlocked ? valueTarget.length - 1 : 0;
          valueTarget = valueTarget[index2];
        }
        if (valueTarget !== null) {
          values[key2] = valueTarget;
        }
      }
      for (const key2 in transitionEnd)
        values[key2] = transitionEnd[key2];
    });
  }
  return values;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/noop.mjs
var noop = (any) => any;

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/frameloop/render-step.mjs
var Queue = class {
  constructor() {
    this.order = [];
    this.scheduled = /* @__PURE__ */ new Set();
  }
  add(process3) {
    if (!this.scheduled.has(process3)) {
      this.scheduled.add(process3);
      this.order.push(process3);
      return true;
    }
  }
  remove(process3) {
    const index2 = this.order.indexOf(process3);
    if (index2 !== -1) {
      this.order.splice(index2, 1);
      this.scheduled.delete(process3);
    }
  }
  clear() {
    this.order.length = 0;
    this.scheduled.clear();
  }
};
function createRenderStep(runNextFrame) {
  let thisFrame = new Queue();
  let nextFrame = new Queue();
  let numToRun = 0;
  let isProcessing = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  const step = {
    /**
     * Schedule a process to run on the next frame.
     */
    schedule: (callback, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing;
      const queue = addToCurrentFrame ? thisFrame : nextFrame;
      if (keepAlive)
        toKeepAlive.add(callback);
      if (queue.add(callback) && addToCurrentFrame && isProcessing) {
        numToRun = thisFrame.order.length;
      }
      return callback;
    },
    /**
     * Cancel the provided callback from running on the next frame.
     */
    cancel: (callback) => {
      nextFrame.remove(callback);
      toKeepAlive.delete(callback);
    },
    /**
     * Execute all schedule callbacks.
     */
    process: (frameData2) => {
      if (isProcessing) {
        flushNextFrame = true;
        return;
      }
      isProcessing = true;
      [thisFrame, nextFrame] = [nextFrame, thisFrame];
      nextFrame.clear();
      numToRun = thisFrame.order.length;
      if (numToRun) {
        for (let i = 0; i < numToRun; i++) {
          const callback = thisFrame.order[i];
          callback(frameData2);
          if (toKeepAlive.has(callback)) {
            step.schedule(callback);
            runNextFrame();
          }
        }
      }
      isProcessing = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step.process(frameData2);
      }
    }
  };
  return step;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/frameloop/batcher.mjs
var stepsOrder = [
  "prepare",
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
];
var maxElapsed = 40;
function createRenderBatcher(scheduleNextBatch, allowKeepAlive) {
  let runNextFrame = false;
  let useDefaultElapsed = true;
  const state = {
    delta: 0,
    timestamp: 0,
    isProcessing: false
  };
  const steps2 = stepsOrder.reduce((acc, key2) => {
    acc[key2] = createRenderStep(() => runNextFrame = true);
    return acc;
  }, {});
  const processStep = (stepId) => steps2[stepId].process(state);
  const processBatch = () => {
    const timestamp = performance.now();
    runNextFrame = false;
    state.delta = useDefaultElapsed ? 1e3 / 60 : Math.max(Math.min(timestamp - state.timestamp, maxElapsed), 1);
    state.timestamp = timestamp;
    state.isProcessing = true;
    stepsOrder.forEach(processStep);
    state.isProcessing = false;
    if (runNextFrame && allowKeepAlive) {
      useDefaultElapsed = false;
      scheduleNextBatch(processBatch);
    }
  };
  const wake = () => {
    runNextFrame = true;
    useDefaultElapsed = true;
    if (!state.isProcessing) {
      scheduleNextBatch(processBatch);
    }
  };
  const schedule = stepsOrder.reduce((acc, key2) => {
    const step = steps2[key2];
    acc[key2] = (process3, keepAlive = false, immediate = false) => {
      if (!runNextFrame)
        wake();
      return step.schedule(process3, keepAlive, immediate);
    };
    return acc;
  }, {});
  const cancel = (process3) => stepsOrder.forEach((key2) => steps2[key2].cancel(process3));
  return { schedule, cancel, state, steps: steps2 };
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/frameloop/frame.mjs
var { schedule: frame, cancel: cancelFrame, state: frameData, steps } = createRenderBatcher(typeof requestAnimationFrame !== "undefined" ? requestAnimationFrame : noop, true);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/svg/config-motion.mjs
var svgMotionConfig = {
  useVisualState: makeUseVisualState({
    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps2,
    createRenderState: createSvgRenderState,
    onMount: (props, instance, { renderState, latestValues }) => {
      frame.read(() => {
        try {
          renderState.dimensions = typeof instance.getBBox === "function" ? instance.getBBox() : instance.getBoundingClientRect();
        } catch (e) {
          renderState.dimensions = {
            x: 0,
            y: 0,
            width: 0,
            height: 0
          };
        }
      });
      frame.render(() => {
        buildSVGAttrs(renderState, latestValues, { enableHardwareAcceleration: false }, isSVGTag(instance.tagName), props.transformTemplate);
        renderSVG(instance, renderState);
      });
    }
  })
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/html/config-motion.mjs
var htmlMotionConfig = {
  useVisualState: makeUseVisualState({
    scrapeMotionValuesFromProps,
    createRenderState: createHtmlRenderState
  })
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/dom/utils/create-config.mjs
function createDomMotionConfig(Component3, { forwardMotionProps = false }, preloadedFeatures2, createVisualElement2) {
  const baseConfig = isSVGComponent(Component3) ? svgMotionConfig : htmlMotionConfig;
  return {
    ...baseConfig,
    preloadedFeatures: preloadedFeatures2,
    useRender: createUseRender(forwardMotionProps),
    createVisualElement: createVisualElement2,
    Component: Component3
  };
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/events/add-dom-event.mjs
function addDomEvent(target, eventName, handler, options = { passive: true }) {
  target.addEventListener(eventName, handler, options);
  return () => target.removeEventListener(eventName, handler);
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/events/utils/is-primary-pointer.mjs
var isPrimaryPointer = (event) => {
  if (event.pointerType === "mouse") {
    return typeof event.button !== "number" || event.button <= 0;
  } else {
    return event.isPrimary !== false;
  }
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/events/event-info.mjs
function extractEventInfo(event, pointType = "page") {
  return {
    point: {
      x: event[pointType + "X"],
      y: event[pointType + "Y"]
    }
  };
}
var addPointerInfo = (handler) => {
  return (event) => isPrimaryPointer(event) && handler(event, extractEventInfo(event));
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/events/add-pointer-event.mjs
function addPointerEvent(target, eventName, handler, options) {
  return addDomEvent(target, eventName, addPointerInfo(handler), options);
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/pipe.mjs
var combineFunctions = (a, b) => (v) => b(a(v));
var pipe = (...transformers) => transformers.reduce(combineFunctions);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs
function createLock(name) {
  let lock = null;
  return () => {
    const openLock = () => {
      lock = null;
    };
    if (lock === null) {
      lock = name;
      return openLock;
    }
    return false;
  };
}
var globalHorizontalLock = createLock("dragHorizontal");
var globalVerticalLock = createLock("dragVertical");
function getGlobalLock(drag2) {
  let lock = false;
  if (drag2 === "y") {
    lock = globalVerticalLock();
  } else if (drag2 === "x") {
    lock = globalHorizontalLock();
  } else {
    const openHorizontal = globalHorizontalLock();
    const openVertical = globalVerticalLock();
    if (openHorizontal && openVertical) {
      lock = () => {
        openHorizontal();
        openVertical();
      };
    } else {
      if (openHorizontal)
        openHorizontal();
      if (openVertical)
        openVertical();
    }
  }
  return lock;
}
function isDragActive() {
  const openGestureLock = getGlobalLock(true);
  if (!openGestureLock)
    return true;
  openGestureLock();
  return false;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/motion/features/Feature.mjs
var Feature = class {
  constructor(node) {
    this.isMounted = false;
    this.node = node;
  }
  update() {
  }
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/gestures/hover.mjs
function addHoverEvent(node, isActive) {
  const eventName = "pointer" + (isActive ? "enter" : "leave");
  const callbackName = "onHover" + (isActive ? "Start" : "End");
  const handleEvent = (event, info) => {
    if (event.pointerType === "touch" || isDragActive())
      return;
    const props = node.getProps();
    if (node.animationState && props.whileHover) {
      node.animationState.setActive("whileHover", isActive);
    }
    if (props[callbackName]) {
      frame.update(() => props[callbackName](event, info));
    }
  };
  return addPointerEvent(node.current, eventName, handleEvent, {
    passive: !node.getProps()[callbackName]
  });
}
var HoverGesture = class extends Feature {
  mount() {
    this.unmount = pipe(addHoverEvent(this.node, true), addHoverEvent(this.node, false));
  }
  unmount() {
  }
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/gestures/focus.mjs
var FocusGesture = class extends Feature {
  constructor() {
    super(...arguments);
    this.isActive = false;
  }
  onFocus() {
    let isFocusVisible = false;
    try {
      isFocusVisible = this.node.current.matches(":focus-visible");
    } catch (e) {
      isFocusVisible = true;
    }
    if (!isFocusVisible || !this.node.animationState)
      return;
    this.node.animationState.setActive("whileFocus", true);
    this.isActive = true;
  }
  onBlur() {
    if (!this.isActive || !this.node.animationState)
      return;
    this.node.animationState.setActive("whileFocus", false);
    this.isActive = false;
  }
  mount() {
    this.unmount = pipe(addDomEvent(this.node.current, "focus", () => this.onFocus()), addDomEvent(this.node.current, "blur", () => this.onBlur()));
  }
  unmount() {
  }
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs
var isNodeOrChild = (parent, child) => {
  if (!child) {
    return false;
  } else if (parent === child) {
    return true;
  } else {
    return isNodeOrChild(parent, child.parentElement);
  }
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/gestures/press.mjs
function fireSyntheticPointerEvent(name, handler) {
  if (!handler)
    return;
  const syntheticPointerEvent = new PointerEvent("pointer" + name);
  handler(syntheticPointerEvent, extractEventInfo(syntheticPointerEvent));
}
var PressGesture = class extends Feature {
  constructor() {
    super(...arguments);
    this.removeStartListeners = noop;
    this.removeEndListeners = noop;
    this.removeAccessibleListeners = noop;
    this.startPointerPress = (startEvent, startInfo) => {
      if (this.isPressing)
        return;
      this.removeEndListeners();
      const props = this.node.getProps();
      const endPointerPress = (endEvent, endInfo) => {
        if (!this.checkPressEnd())
          return;
        const { onTap, onTapCancel, globalTapTarget } = this.node.getProps();
        frame.update(() => {
          !globalTapTarget && !isNodeOrChild(this.node.current, endEvent.target) ? onTapCancel && onTapCancel(endEvent, endInfo) : onTap && onTap(endEvent, endInfo);
        });
      };
      const removePointerUpListener = addPointerEvent(window, "pointerup", endPointerPress, { passive: !(props.onTap || props["onPointerUp"]) });
      const removePointerCancelListener = addPointerEvent(window, "pointercancel", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo), { passive: !(props.onTapCancel || props["onPointerCancel"]) });
      this.removeEndListeners = pipe(removePointerUpListener, removePointerCancelListener);
      this.startPress(startEvent, startInfo);
    };
    this.startAccessiblePress = () => {
      const handleKeydown = (keydownEvent) => {
        if (keydownEvent.key !== "Enter" || this.isPressing)
          return;
        const handleKeyup = (keyupEvent) => {
          if (keyupEvent.key !== "Enter" || !this.checkPressEnd())
            return;
          fireSyntheticPointerEvent("up", (event, info) => {
            const { onTap } = this.node.getProps();
            if (onTap) {
              frame.update(() => onTap(event, info));
            }
          });
        };
        this.removeEndListeners();
        this.removeEndListeners = addDomEvent(this.node.current, "keyup", handleKeyup);
        fireSyntheticPointerEvent("down", (event, info) => {
          this.startPress(event, info);
        });
      };
      const removeKeydownListener = addDomEvent(this.node.current, "keydown", handleKeydown);
      const handleBlur = () => {
        if (!this.isPressing)
          return;
        fireSyntheticPointerEvent("cancel", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo));
      };
      const removeBlurListener = addDomEvent(this.node.current, "blur", handleBlur);
      this.removeAccessibleListeners = pipe(removeKeydownListener, removeBlurListener);
    };
  }
  startPress(event, info) {
    this.isPressing = true;
    const { onTapStart, whileTap } = this.node.getProps();
    if (whileTap && this.node.animationState) {
      this.node.animationState.setActive("whileTap", true);
    }
    if (onTapStart) {
      frame.update(() => onTapStart(event, info));
    }
  }
  checkPressEnd() {
    this.removeEndListeners();
    this.isPressing = false;
    const props = this.node.getProps();
    if (props.whileTap && this.node.animationState) {
      this.node.animationState.setActive("whileTap", false);
    }
    return !isDragActive();
  }
  cancelPress(event, info) {
    if (!this.checkPressEnd())
      return;
    const { onTapCancel } = this.node.getProps();
    if (onTapCancel) {
      frame.update(() => onTapCancel(event, info));
    }
  }
  mount() {
    const props = this.node.getProps();
    const removePointerListener = addPointerEvent(props.globalTapTarget ? window : this.node.current, "pointerdown", this.startPointerPress, { passive: !(props.onTapStart || props["onPointerStart"]) });
    const removeFocusListener = addDomEvent(this.node.current, "focus", this.startAccessiblePress);
    this.removeStartListeners = pipe(removePointerListener, removeFocusListener);
  }
  unmount() {
    this.removeStartListeners();
    this.removeEndListeners();
    this.removeAccessibleListeners();
  }
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs
var observerCallbacks = /* @__PURE__ */ new WeakMap();
var observers = /* @__PURE__ */ new WeakMap();
var fireObserverCallback = (entry) => {
  const callback = observerCallbacks.get(entry.target);
  callback && callback(entry);
};
var fireAllObserverCallbacks = (entries) => {
  entries.forEach(fireObserverCallback);
};
function initIntersectionObserver({ root, ...options }) {
  const lookupRoot = root || document;
  if (!observers.has(lookupRoot)) {
    observers.set(lookupRoot, {});
  }
  const rootObservers = observers.get(lookupRoot);
  const key2 = JSON.stringify(options);
  if (!rootObservers[key2]) {
    rootObservers[key2] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options });
  }
  return rootObservers[key2];
}
function observeIntersection(element, options, callback) {
  const rootInteresectionObserver = initIntersectionObserver(options);
  observerCallbacks.set(element, callback);
  rootInteresectionObserver.observe(element);
  return () => {
    observerCallbacks.delete(element);
    rootInteresectionObserver.unobserve(element);
  };
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs
var thresholdNames = {
  some: 0,
  all: 1
};
var InViewFeature = class extends Feature {
  constructor() {
    super(...arguments);
    this.hasEnteredView = false;
    this.isInView = false;
  }
  startObserver() {
    this.unmount();
    const { viewport = {} } = this.node.getProps();
    const { root, margin: rootMargin, amount = "some", once } = viewport;
    const options = {
      root: root ? root.current : void 0,
      rootMargin,
      threshold: typeof amount === "number" ? amount : thresholdNames[amount]
    };
    const onIntersectionUpdate = (entry) => {
      const { isIntersecting } = entry;
      if (this.isInView === isIntersecting)
        return;
      this.isInView = isIntersecting;
      if (once && !isIntersecting && this.hasEnteredView) {
        return;
      } else if (isIntersecting) {
        this.hasEnteredView = true;
      }
      if (this.node.animationState) {
        this.node.animationState.setActive("whileInView", isIntersecting);
      }
      const { onViewportEnter, onViewportLeave } = this.node.getProps();
      const callback = isIntersecting ? onViewportEnter : onViewportLeave;
      callback && callback(entry);
    };
    return observeIntersection(this.node.current, options, onIntersectionUpdate);
  }
  mount() {
    this.startObserver();
  }
  update() {
    if (typeof IntersectionObserver === "undefined")
      return;
    const { props, prevProps } = this.node;
    const hasOptionsChanged = ["amount", "margin", "root"].some(hasViewportOptionChanged(props, prevProps));
    if (hasOptionsChanged) {
      this.startObserver();
    }
  }
  unmount() {
  }
};
function hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {
  return (name) => viewport[name] !== prevViewport[name];
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/motion/features/gestures.mjs
var gestureAnimations = {
  inView: {
    Feature: InViewFeature
  },
  tap: {
    Feature: PressGesture
  },
  focus: {
    Feature: FocusGesture
  },
  hover: {
    Feature: HoverGesture
  }
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/shallow-compare.mjs
function shallowCompare(next, prev) {
  if (!Array.isArray(prev))
    return false;
  const prevLength = prev.length;
  if (prevLength !== next.length)
    return false;
  for (let i = 0; i < prevLength; i++) {
    if (prev[i] !== next[i])
      return false;
  }
  return true;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs
function getCurrent(visualElement) {
  const current = {};
  visualElement.values.forEach((value, key2) => current[key2] = value.get());
  return current;
}
function getVelocity(visualElement) {
  const velocity = {};
  visualElement.values.forEach((value, key2) => velocity[key2] = value.getVelocity());
  return velocity;
}
function resolveVariant(visualElement, definition, custom) {
  const props = visualElement.getProps();
  return resolveVariantFromProps(props, definition, custom !== void 0 ? custom : props.custom, getCurrent(visualElement), getVelocity(visualElement));
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/errors.mjs
var warning = noop;
var invariant = noop;
if (true) {
  warning = (check, message) => {
    if (!check && typeof console !== "undefined") {
      console.warn(message);
    }
  };
  invariant = (check, message) => {
    if (!check) {
      throw new Error(message);
    }
  };
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/time-conversion.mjs
var secondsToMilliseconds = (seconds) => seconds * 1e3;
var millisecondsToSeconds = (milliseconds) => milliseconds / 1e3;

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs
var instantAnimationState = {
  current: false
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/easing/utils/is-bezier-definition.mjs
var isBezierDefinition = (easing) => Array.isArray(easing) && typeof easing[0] === "number";

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/animation/animators/waapi/easing.mjs
function isWaapiSupportedEasing(easing) {
  return Boolean(!easing || typeof easing === "string" && supportedWaapiEasing[easing] || isBezierDefinition(easing) || Array.isArray(easing) && easing.every(isWaapiSupportedEasing));
}
var cubicBezierAsString = ([a, b, c, d]) => `cubic-bezier(${a}, ${b}, ${c}, ${d})`;
var supportedWaapiEasing = {
  linear: "linear",
  ease: "ease",
  easeIn: "ease-in",
  easeOut: "ease-out",
  easeInOut: "ease-in-out",
  circIn: cubicBezierAsString([0, 0.65, 0.55, 1]),
  circOut: cubicBezierAsString([0.55, 0, 1, 0.45]),
  backIn: cubicBezierAsString([0.31, 0.01, 0.66, -0.59]),
  backOut: cubicBezierAsString([0.33, 1.53, 0.69, 0.99])
};
function mapEasingToNativeEasing(easing) {
  if (!easing)
    return void 0;
  return isBezierDefinition(easing) ? cubicBezierAsString(easing) : Array.isArray(easing) ? easing.map(mapEasingToNativeEasing) : supportedWaapiEasing[easing];
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/animation/animators/waapi/index.mjs
function animateStyle(element, valueName, keyframes2, { delay: delay2 = 0, duration, repeat = 0, repeatType = "loop", ease: ease2, times } = {}) {
  const keyframeOptions = { [valueName]: keyframes2 };
  if (times)
    keyframeOptions.offset = times;
  const easing = mapEasingToNativeEasing(ease2);
  if (Array.isArray(easing))
    keyframeOptions.easing = easing;
  return element.animate(keyframeOptions, {
    delay: delay2,
    duration,
    easing: !Array.isArray(easing) ? easing : "linear",
    fill: "both",
    iterations: repeat + 1,
    direction: repeatType === "reverse" ? "alternate" : "normal"
  });
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/animation/animators/waapi/utils/get-final-keyframe.mjs
function getFinalKeyframe(keyframes2, { repeat, repeatType = "loop" }) {
  const index2 = repeat && repeatType !== "loop" && repeat % 2 === 1 ? 0 : keyframes2.length - 1;
  return keyframes2[index2];
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/easing/cubic-bezier.mjs
var calcBezier = (t, a1, a2) => (((1 - 3 * a2 + 3 * a1) * t + (3 * a2 - 6 * a1)) * t + 3 * a1) * t;
var subdivisionPrecision = 1e-7;
var subdivisionMaxIterations = 12;
function binarySubdivide(x, lowerBound, upperBound, mX1, mX2) {
  let currentX;
  let currentT;
  let i = 0;
  do {
    currentT = lowerBound + (upperBound - lowerBound) / 2;
    currentX = calcBezier(currentT, mX1, mX2) - x;
    if (currentX > 0) {
      upperBound = currentT;
    } else {
      lowerBound = currentT;
    }
  } while (Math.abs(currentX) > subdivisionPrecision && ++i < subdivisionMaxIterations);
  return currentT;
}
function cubicBezier(mX1, mY1, mX2, mY2) {
  if (mX1 === mY1 && mX2 === mY2)
    return noop;
  const getTForX = (aX) => binarySubdivide(aX, 0, 1, mX1, mX2);
  return (t) => t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/easing/ease.mjs
var easeIn = cubicBezier(0.42, 0, 1, 1);
var easeOut = cubicBezier(0, 0, 0.58, 1);
var easeInOut = cubicBezier(0.42, 0, 0.58, 1);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/easing/utils/is-easing-array.mjs
var isEasingArray = (ease2) => {
  return Array.isArray(ease2) && typeof ease2[0] !== "number";
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/easing/modifiers/mirror.mjs
var mirrorEasing = (easing) => (p) => p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/easing/modifiers/reverse.mjs
var reverseEasing = (easing) => (p) => 1 - easing(1 - p);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/easing/circ.mjs
var circIn = (p) => 1 - Math.sin(Math.acos(p));
var circOut = reverseEasing(circIn);
var circInOut = mirrorEasing(circIn);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/easing/back.mjs
var backOut = cubicBezier(0.33, 1.53, 0.69, 0.99);
var backIn = reverseEasing(backOut);
var backInOut = mirrorEasing(backIn);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/easing/anticipate.mjs
var anticipate = (p) => (p *= 2) < 1 ? 0.5 * backIn(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/easing/utils/map.mjs
var easingLookup = {
  linear: noop,
  easeIn,
  easeInOut,
  easeOut,
  circIn,
  circInOut,
  circOut,
  backIn,
  backInOut,
  backOut,
  anticipate
};
var easingDefinitionToFunction = (definition) => {
  if (Array.isArray(definition)) {
    invariant(definition.length === 4, `Cubic bezier arrays must contain four numerical values.`);
    const [x1, y1, x2, y2] = definition;
    return cubicBezier(x1, y1, x2, y2);
  } else if (typeof definition === "string") {
    invariant(easingLookup[definition] !== void 0, `Invalid easing type '${definition}'`);
    return easingLookup[definition];
  }
  return definition;
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/value/types/color/utils.mjs
var isColorString = (type, testProp) => (v) => {
  return Boolean(isString(v) && singleColorRegex.test(v) && v.startsWith(type) || testProp && Object.prototype.hasOwnProperty.call(v, testProp));
};
var splitColor = (aName, bName, cName) => (v) => {
  if (!isString(v))
    return v;
  const [a, b, c, alpha2] = v.match(floatRegex);
  return {
    [aName]: parseFloat(a),
    [bName]: parseFloat(b),
    [cName]: parseFloat(c),
    alpha: alpha2 !== void 0 ? parseFloat(alpha2) : 1
  };
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/value/types/color/rgba.mjs
var clampRgbUnit = (v) => clamp(0, 255, v);
var rgbUnit = {
  ...number,
  transform: (v) => Math.round(clampRgbUnit(v))
};
var rgba = {
  test: isColorString("rgb", "red"),
  parse: splitColor("red", "green", "blue"),
  transform: ({ red: red2, green: green2, blue: blue2, alpha: alpha$1 = 1 }) => "rgba(" + rgbUnit.transform(red2) + ", " + rgbUnit.transform(green2) + ", " + rgbUnit.transform(blue2) + ", " + sanitize(alpha.transform(alpha$1)) + ")"
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/value/types/color/hex.mjs
function parseHex(v) {
  let r = "";
  let g = "";
  let b = "";
  let a = "";
  if (v.length > 5) {
    r = v.substring(1, 3);
    g = v.substring(3, 5);
    b = v.substring(5, 7);
    a = v.substring(7, 9);
  } else {
    r = v.substring(1, 2);
    g = v.substring(2, 3);
    b = v.substring(3, 4);
    a = v.substring(4, 5);
    r += r;
    g += g;
    b += b;
    a += a;
  }
  return {
    red: parseInt(r, 16),
    green: parseInt(g, 16),
    blue: parseInt(b, 16),
    alpha: a ? parseInt(a, 16) / 255 : 1
  };
}
var hex = {
  test: isColorString("#"),
  parse: parseHex,
  transform: rgba.transform
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/value/types/color/hsla.mjs
var hsla = {
  test: isColorString("hsl", "hue"),
  parse: splitColor("hue", "saturation", "lightness"),
  transform: ({ hue, saturation, lightness, alpha: alpha$1 = 1 }) => {
    return "hsla(" + Math.round(hue) + ", " + percent.transform(sanitize(saturation)) + ", " + percent.transform(sanitize(lightness)) + ", " + sanitize(alpha.transform(alpha$1)) + ")";
  }
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/value/types/color/index.mjs
var color = {
  test: (v) => rgba.test(v) || hex.test(v) || hsla.test(v),
  parse: (v) => {
    if (rgba.test(v)) {
      return rgba.parse(v);
    } else if (hsla.test(v)) {
      return hsla.parse(v);
    } else {
      return hex.parse(v);
    }
  },
  transform: (v) => {
    return isString(v) ? v : v.hasOwnProperty("red") ? rgba.transform(v) : hsla.transform(v);
  }
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/mix.mjs
var mix = (from, to, progress2) => -progress2 * from + progress2 * to + from;

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/hsla-to-rgba.mjs
function hueToRgb(p, q, t) {
  if (t < 0)
    t += 1;
  if (t > 1)
    t -= 1;
  if (t < 1 / 6)
    return p + (q - p) * 6 * t;
  if (t < 1 / 2)
    return q;
  if (t < 2 / 3)
    return p + (q - p) * (2 / 3 - t) * 6;
  return p;
}
function hslaToRgba({ hue, saturation, lightness, alpha: alpha2 }) {
  hue /= 360;
  saturation /= 100;
  lightness /= 100;
  let red2 = 0;
  let green2 = 0;
  let blue2 = 0;
  if (!saturation) {
    red2 = green2 = blue2 = lightness;
  } else {
    const q = lightness < 0.5 ? lightness * (1 + saturation) : lightness + saturation - lightness * saturation;
    const p = 2 * lightness - q;
    red2 = hueToRgb(p, q, hue + 1 / 3);
    green2 = hueToRgb(p, q, hue);
    blue2 = hueToRgb(p, q, hue - 1 / 3);
  }
  return {
    red: Math.round(red2 * 255),
    green: Math.round(green2 * 255),
    blue: Math.round(blue2 * 255),
    alpha: alpha2
  };
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/mix-color.mjs
var mixLinearColor = (from, to, v) => {
  const fromExpo = from * from;
  return Math.sqrt(Math.max(0, v * (to * to - fromExpo) + fromExpo));
};
var colorTypes = [hex, rgba, hsla];
var getColorType = (v) => colorTypes.find((type) => type.test(v));
function asRGBA(color3) {
  const type = getColorType(color3);
  invariant(Boolean(type), `'${color3}' is not an animatable color. Use the equivalent color code instead.`);
  let model = type.parse(color3);
  if (type === hsla) {
    model = hslaToRgba(model);
  }
  return model;
}
var mixColor = (from, to) => {
  const fromRGBA = asRGBA(from);
  const toRGBA = asRGBA(to);
  const blended = { ...fromRGBA };
  return (v) => {
    blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);
    blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);
    blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);
    blended.alpha = mix(fromRGBA.alpha, toRGBA.alpha, v);
    return rgba.transform(blended);
  };
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/value/types/complex/index.mjs
function test(v) {
  var _a3, _b2;
  return isNaN(v) && isString(v) && (((_a3 = v.match(floatRegex)) === null || _a3 === void 0 ? void 0 : _a3.length) || 0) + (((_b2 = v.match(colorRegex)) === null || _b2 === void 0 ? void 0 : _b2.length) || 0) > 0;
}
var cssVarTokeniser = {
  regex: cssVariableRegex,
  countKey: "Vars",
  token: "${v}",
  parse: noop
};
var colorTokeniser = {
  regex: colorRegex,
  countKey: "Colors",
  token: "${c}",
  parse: color.parse
};
var numberTokeniser = {
  regex: floatRegex,
  countKey: "Numbers",
  token: "${n}",
  parse: number.parse
};
function tokenise(info, { regex, countKey, token, parse }) {
  const matches = info.tokenised.match(regex);
  if (!matches)
    return;
  info["num" + countKey] = matches.length;
  info.tokenised = info.tokenised.replace(regex, token);
  info.values.push(...matches.map(parse));
}
function analyseComplexValue(value) {
  const originalValue = value.toString();
  const info = {
    value: originalValue,
    tokenised: originalValue,
    values: [],
    numVars: 0,
    numColors: 0,
    numNumbers: 0
  };
  if (info.value.includes("var(--"))
    tokenise(info, cssVarTokeniser);
  tokenise(info, colorTokeniser);
  tokenise(info, numberTokeniser);
  return info;
}
function parseComplexValue(v) {
  return analyseComplexValue(v).values;
}
function createTransformer(source) {
  const { values, numColors, numVars, tokenised } = analyseComplexValue(source);
  const numValues = values.length;
  return (v) => {
    let output = tokenised;
    for (let i = 0; i < numValues; i++) {
      if (i < numVars) {
        output = output.replace(cssVarTokeniser.token, v[i]);
      } else if (i < numVars + numColors) {
        output = output.replace(colorTokeniser.token, color.transform(v[i]));
      } else {
        output = output.replace(numberTokeniser.token, sanitize(v[i]));
      }
    }
    return output;
  };
}
var convertNumbersToZero = (v) => typeof v === "number" ? 0 : v;
function getAnimatableNone(v) {
  const parsed = parseComplexValue(v);
  const transformer = createTransformer(v);
  return transformer(parsed.map(convertNumbersToZero));
}
var complex = {
  test,
  parse: parseComplexValue,
  createTransformer,
  getAnimatableNone
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/mix-complex.mjs
var mixImmediate = (origin, target) => (p) => `${p > 0 ? target : origin}`;
function getMixer(origin, target) {
  if (typeof origin === "number") {
    return (v) => mix(origin, target, v);
  } else if (color.test(origin)) {
    return mixColor(origin, target);
  } else {
    return origin.startsWith("var(") ? mixImmediate(origin, target) : mixComplex(origin, target);
  }
}
var mixArray = (from, to) => {
  const output = [...from];
  const numValues = output.length;
  const blendValue = from.map((fromThis, i) => getMixer(fromThis, to[i]));
  return (v) => {
    for (let i = 0; i < numValues; i++) {
      output[i] = blendValue[i](v);
    }
    return output;
  };
};
var mixObject = (origin, target) => {
  const output = { ...origin, ...target };
  const blendValue = {};
  for (const key2 in output) {
    if (origin[key2] !== void 0 && target[key2] !== void 0) {
      blendValue[key2] = getMixer(origin[key2], target[key2]);
    }
  }
  return (v) => {
    for (const key2 in blendValue) {
      output[key2] = blendValue[key2](v);
    }
    return output;
  };
};
var mixComplex = (origin, target) => {
  const template = complex.createTransformer(target);
  const originStats = analyseComplexValue(origin);
  const targetStats = analyseComplexValue(target);
  const canInterpolate = originStats.numVars === targetStats.numVars && originStats.numColors === targetStats.numColors && originStats.numNumbers >= targetStats.numNumbers;
  if (canInterpolate) {
    return pipe(mixArray(originStats.values, targetStats.values), template);
  } else {
    warning(true, `Complex values '${origin}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);
    return mixImmediate(origin, target);
  }
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/progress.mjs
var progress = (from, to, value) => {
  const toFromDifference = to - from;
  return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/interpolate.mjs
var mixNumber = (from, to) => (p) => mix(from, to, p);
function detectMixerFactory(v) {
  if (typeof v === "number") {
    return mixNumber;
  } else if (typeof v === "string") {
    return color.test(v) ? mixColor : mixComplex;
  } else if (Array.isArray(v)) {
    return mixArray;
  } else if (typeof v === "object") {
    return mixObject;
  }
  return mixNumber;
}
function createMixers(output, ease2, customMixer) {
  const mixers = [];
  const mixerFactory = customMixer || detectMixerFactory(output[0]);
  const numMixers = output.length - 1;
  for (let i = 0; i < numMixers; i++) {
    let mixer = mixerFactory(output[i], output[i + 1]);
    if (ease2) {
      const easingFunction = Array.isArray(ease2) ? ease2[i] || noop : ease2;
      mixer = pipe(easingFunction, mixer);
    }
    mixers.push(mixer);
  }
  return mixers;
}
function interpolate(input, output, { clamp: isClamp = true, ease: ease2, mixer } = {}) {
  const inputLength = input.length;
  invariant(inputLength === output.length, "Both input and output ranges must be the same length");
  if (inputLength === 1)
    return () => output[0];
  if (input[0] > input[inputLength - 1]) {
    input = [...input].reverse();
    output = [...output].reverse();
  }
  const mixers = createMixers(output, ease2, mixer);
  const numMixers = mixers.length;
  const interpolator = (v) => {
    let i = 0;
    if (numMixers > 1) {
      for (; i < input.length - 2; i++) {
        if (v < input[i + 1])
          break;
      }
    }
    const progressInRange = progress(input[i], input[i + 1], v);
    return mixers[i](progressInRange);
  };
  return isClamp ? (v) => interpolator(clamp(input[0], input[inputLength - 1], v)) : interpolator;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/offsets/fill.mjs
function fillOffset(offset2, remaining) {
  const min = offset2[offset2.length - 1];
  for (let i = 1; i <= remaining; i++) {
    const offsetProgress = progress(0, remaining, i);
    offset2.push(mix(min, 1, offsetProgress));
  }
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/offsets/default.mjs
function defaultOffset(arr) {
  const offset2 = [0];
  fillOffset(offset2, arr.length - 1);
  return offset2;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/offsets/time.mjs
function convertOffsetToTimes(offset2, duration) {
  return offset2.map((o) => o * duration);
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/animation/generators/keyframes.mjs
function defaultEasing(values, easing) {
  return values.map(() => easing || easeInOut).splice(0, values.length - 1);
}
function keyframes({ duration = 300, keyframes: keyframeValues, times, ease: ease2 = "easeInOut" }) {
  const easingFunctions = isEasingArray(ease2) ? ease2.map(easingDefinitionToFunction) : easingDefinitionToFunction(ease2);
  const state = {
    done: false,
    value: keyframeValues[0]
  };
  const absoluteTimes = convertOffsetToTimes(
    // Only use the provided offsets if they're the correct length
    // TODO Maybe we should warn here if there's a length mismatch
    times && times.length === keyframeValues.length ? times : defaultOffset(keyframeValues),
    duration
  );
  const mapTimeToKeyframe = interpolate(absoluteTimes, keyframeValues, {
    ease: Array.isArray(easingFunctions) ? easingFunctions : defaultEasing(keyframeValues, easingFunctions)
  });
  return {
    calculatedDuration: duration,
    next: (t) => {
      state.value = mapTimeToKeyframe(t);
      state.done = t >= duration;
      return state;
    }
  };
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/velocity-per-second.mjs
function velocityPerSecond(velocity, frameDuration) {
  return frameDuration ? velocity * (1e3 / frameDuration) : 0;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/animation/generators/utils/velocity.mjs
var velocitySampleDuration = 5;
function calcGeneratorVelocity(resolveValue, t, current) {
  const prevT = Math.max(t - velocitySampleDuration, 0);
  return velocityPerSecond(current - resolveValue(prevT), t - prevT);
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/animation/generators/spring/find.mjs
var safeMin = 1e-3;
var minDuration = 0.01;
var maxDuration = 10;
var minDamping = 0.05;
var maxDamping = 1;
function findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1 }) {
  let envelope;
  let derivative;
  warning(duration <= secondsToMilliseconds(maxDuration), "Spring duration must be 10 seconds or less");
  let dampingRatio = 1 - bounce;
  dampingRatio = clamp(minDamping, maxDamping, dampingRatio);
  duration = clamp(minDuration, maxDuration, millisecondsToSeconds(duration));
  if (dampingRatio < 1) {
    envelope = (undampedFreq2) => {
      const exponentialDecay = undampedFreq2 * dampingRatio;
      const delta = exponentialDecay * duration;
      const a = exponentialDecay - velocity;
      const b = calcAngularFreq(undampedFreq2, dampingRatio);
      const c = Math.exp(-delta);
      return safeMin - a / b * c;
    };
    derivative = (undampedFreq2) => {
      const exponentialDecay = undampedFreq2 * dampingRatio;
      const delta = exponentialDecay * duration;
      const d = delta * velocity + velocity;
      const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq2, 2) * duration;
      const f = Math.exp(-delta);
      const g = calcAngularFreq(Math.pow(undampedFreq2, 2), dampingRatio);
      const factor = -envelope(undampedFreq2) + safeMin > 0 ? -1 : 1;
      return factor * ((d - e) * f) / g;
    };
  } else {
    envelope = (undampedFreq2) => {
      const a = Math.exp(-undampedFreq2 * duration);
      const b = (undampedFreq2 - velocity) * duration + 1;
      return -safeMin + a * b;
    };
    derivative = (undampedFreq2) => {
      const a = Math.exp(-undampedFreq2 * duration);
      const b = (velocity - undampedFreq2) * (duration * duration);
      return a * b;
    };
  }
  const initialGuess = 5 / duration;
  const undampedFreq = approximateRoot(envelope, derivative, initialGuess);
  duration = secondsToMilliseconds(duration);
  if (isNaN(undampedFreq)) {
    return {
      stiffness: 100,
      damping: 10,
      duration
    };
  } else {
    const stiffness = Math.pow(undampedFreq, 2) * mass;
    return {
      stiffness,
      damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),
      duration
    };
  }
}
var rootIterations = 12;
function approximateRoot(envelope, derivative, initialGuess) {
  let result = initialGuess;
  for (let i = 1; i < rootIterations; i++) {
    result = result - envelope(result) / derivative(result);
  }
  return result;
}
function calcAngularFreq(undampedFreq, dampingRatio) {
  return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/animation/generators/spring/index.mjs
var durationKeys = ["duration", "bounce"];
var physicsKeys = ["stiffness", "damping", "mass"];
function isSpringType(options, keys) {
  return keys.some((key2) => options[key2] !== void 0);
}
function getSpringOptions(options) {
  let springOptions = {
    velocity: 0,
    stiffness: 100,
    damping: 10,
    mass: 1,
    isResolvedFromDuration: false,
    ...options
  };
  if (!isSpringType(options, physicsKeys) && isSpringType(options, durationKeys)) {
    const derived = findSpring(options);
    springOptions = {
      ...springOptions,
      ...derived,
      mass: 1
    };
    springOptions.isResolvedFromDuration = true;
  }
  return springOptions;
}
function spring({ keyframes: keyframes2, restDelta, restSpeed, ...options }) {
  const origin = keyframes2[0];
  const target = keyframes2[keyframes2.length - 1];
  const state = { done: false, value: origin };
  const { stiffness, damping, mass, duration, velocity, isResolvedFromDuration } = getSpringOptions({
    ...options,
    velocity: -millisecondsToSeconds(options.velocity || 0)
  });
  const initialVelocity = velocity || 0;
  const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));
  const initialDelta = target - origin;
  const undampedAngularFreq = millisecondsToSeconds(Math.sqrt(stiffness / mass));
  const isGranularScale = Math.abs(initialDelta) < 5;
  restSpeed || (restSpeed = isGranularScale ? 0.01 : 2);
  restDelta || (restDelta = isGranularScale ? 5e-3 : 0.5);
  let resolveSpring;
  if (dampingRatio < 1) {
    const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);
    resolveSpring = (t) => {
      const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
      return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq * Math.sin(angularFreq * t) + initialDelta * Math.cos(angularFreq * t));
    };
  } else if (dampingRatio === 1) {
    resolveSpring = (t) => target - Math.exp(-undampedAngularFreq * t) * (initialDelta + (initialVelocity + undampedAngularFreq * initialDelta) * t);
  } else {
    const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);
    resolveSpring = (t) => {
      const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
      const freqForT = Math.min(dampedAngularFreq * t, 300);
      return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) * Math.sinh(freqForT) + dampedAngularFreq * initialDelta * Math.cosh(freqForT)) / dampedAngularFreq;
    };
  }
  return {
    calculatedDuration: isResolvedFromDuration ? duration || null : null,
    next: (t) => {
      const current = resolveSpring(t);
      if (!isResolvedFromDuration) {
        let currentVelocity = initialVelocity;
        if (t !== 0) {
          if (dampingRatio < 1) {
            currentVelocity = calcGeneratorVelocity(resolveSpring, t, current);
          } else {
            currentVelocity = 0;
          }
        }
        const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;
        const isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;
        state.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;
      } else {
        state.done = t >= duration;
      }
      state.value = state.done ? target : current;
      return state;
    }
  };
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/animation/generators/inertia.mjs
function inertia({ keyframes: keyframes2, velocity = 0, power = 0.8, timeConstant = 325, bounceDamping = 10, bounceStiffness = 500, modifyTarget, min, max, restDelta = 0.5, restSpeed }) {
  const origin = keyframes2[0];
  const state = {
    done: false,
    value: origin
  };
  const isOutOfBounds = (v) => min !== void 0 && v < min || max !== void 0 && v > max;
  const nearestBoundary = (v) => {
    if (min === void 0)
      return max;
    if (max === void 0)
      return min;
    return Math.abs(min - v) < Math.abs(max - v) ? min : max;
  };
  let amplitude = power * velocity;
  const ideal = origin + amplitude;
  const target = modifyTarget === void 0 ? ideal : modifyTarget(ideal);
  if (target !== ideal)
    amplitude = target - origin;
  const calcDelta = (t) => -amplitude * Math.exp(-t / timeConstant);
  const calcLatest = (t) => target + calcDelta(t);
  const applyFriction = (t) => {
    const delta = calcDelta(t);
    const latest = calcLatest(t);
    state.done = Math.abs(delta) <= restDelta;
    state.value = state.done ? target : latest;
  };
  let timeReachedBoundary;
  let spring$1;
  const checkCatchBoundary = (t) => {
    if (!isOutOfBounds(state.value))
      return;
    timeReachedBoundary = t;
    spring$1 = spring({
      keyframes: [state.value, nearestBoundary(state.value)],
      velocity: calcGeneratorVelocity(calcLatest, t, state.value),
      damping: bounceDamping,
      stiffness: bounceStiffness,
      restDelta,
      restSpeed
    });
  };
  checkCatchBoundary(0);
  return {
    calculatedDuration: null,
    next: (t) => {
      let hasUpdatedFrame = false;
      if (!spring$1 && timeReachedBoundary === void 0) {
        hasUpdatedFrame = true;
        applyFriction(t);
        checkCatchBoundary(t);
      }
      if (timeReachedBoundary !== void 0 && t > timeReachedBoundary) {
        return spring$1.next(t - timeReachedBoundary);
      } else {
        !hasUpdatedFrame && applyFriction(t);
        return state;
      }
    }
  };
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/animation/animators/js/driver-frameloop.mjs
var frameloopDriver = (update) => {
  const passTimestamp = ({ timestamp }) => update(timestamp);
  return {
    start: () => frame.update(passTimestamp, true),
    stop: () => cancelFrame(passTimestamp),
    /**
     * If we're processing this frame we can use the
     * framelocked timestamp to keep things in sync.
     */
    now: () => frameData.isProcessing ? frameData.timestamp : performance.now()
  };
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/animation/generators/utils/calc-duration.mjs
var maxGeneratorDuration = 2e4;
function calcGeneratorDuration(generator) {
  let duration = 0;
  const timeStep = 50;
  let state = generator.next(duration);
  while (!state.done && duration < maxGeneratorDuration) {
    duration += timeStep;
    state = generator.next(duration);
  }
  return duration >= maxGeneratorDuration ? Infinity : duration;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/animation/animators/js/index.mjs
var types = {
  decay: inertia,
  inertia,
  tween: keyframes,
  keyframes,
  spring
};
function animateValue({ autoplay = true, delay: delay2 = 0, driver = frameloopDriver, keyframes: keyframes$1, type = "keyframes", repeat = 0, repeatDelay = 0, repeatType = "loop", onPlay, onStop, onComplete, onUpdate, ...options }) {
  let speed = 1;
  let hasStopped = false;
  let resolveFinishedPromise;
  let currentFinishedPromise;
  const updateFinishedPromise = () => {
    currentFinishedPromise = new Promise((resolve) => {
      resolveFinishedPromise = resolve;
    });
  };
  updateFinishedPromise();
  let animationDriver;
  const generatorFactory = types[type] || keyframes;
  let mapNumbersToKeyframes;
  if (generatorFactory !== keyframes && typeof keyframes$1[0] !== "number") {
    if (true) {
      invariant(keyframes$1.length === 2, `Only two keyframes currently supported with spring and inertia animations. Trying to animate ${keyframes$1}`);
    }
    mapNumbersToKeyframes = interpolate([0, 100], keyframes$1, {
      clamp: false
    });
    keyframes$1 = [0, 100];
  }
  const generator = generatorFactory({ ...options, keyframes: keyframes$1 });
  let mirroredGenerator;
  if (repeatType === "mirror") {
    mirroredGenerator = generatorFactory({
      ...options,
      keyframes: [...keyframes$1].reverse(),
      velocity: -(options.velocity || 0)
    });
  }
  let playState = "idle";
  let holdTime = null;
  let startTime = null;
  let cancelTime = null;
  if (generator.calculatedDuration === null && repeat) {
    generator.calculatedDuration = calcGeneratorDuration(generator);
  }
  const { calculatedDuration } = generator;
  let resolvedDuration = Infinity;
  let totalDuration = Infinity;
  if (calculatedDuration !== null) {
    resolvedDuration = calculatedDuration + repeatDelay;
    totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;
  }
  let currentTime = 0;
  const tick = (timestamp) => {
    if (startTime === null)
      return;
    if (speed > 0)
      startTime = Math.min(startTime, timestamp);
    if (speed < 0)
      startTime = Math.min(timestamp - totalDuration / speed, startTime);
    if (holdTime !== null) {
      currentTime = holdTime;
    } else {
      currentTime = Math.round(timestamp - startTime) * speed;
    }
    const timeWithoutDelay = currentTime - delay2 * (speed >= 0 ? 1 : -1);
    const isInDelayPhase = speed >= 0 ? timeWithoutDelay < 0 : timeWithoutDelay > totalDuration;
    currentTime = Math.max(timeWithoutDelay, 0);
    if (playState === "finished" && holdTime === null) {
      currentTime = totalDuration;
    }
    let elapsed = currentTime;
    let frameGenerator = generator;
    if (repeat) {
      const progress2 = Math.min(currentTime, totalDuration) / resolvedDuration;
      let currentIteration = Math.floor(progress2);
      let iterationProgress = progress2 % 1;
      if (!iterationProgress && progress2 >= 1) {
        iterationProgress = 1;
      }
      iterationProgress === 1 && currentIteration--;
      currentIteration = Math.min(currentIteration, repeat + 1);
      const isOddIteration = Boolean(currentIteration % 2);
      if (isOddIteration) {
        if (repeatType === "reverse") {
          iterationProgress = 1 - iterationProgress;
          if (repeatDelay) {
            iterationProgress -= repeatDelay / resolvedDuration;
          }
        } else if (repeatType === "mirror") {
          frameGenerator = mirroredGenerator;
        }
      }
      elapsed = clamp(0, 1, iterationProgress) * resolvedDuration;
    }
    const state = isInDelayPhase ? { done: false, value: keyframes$1[0] } : frameGenerator.next(elapsed);
    if (mapNumbersToKeyframes) {
      state.value = mapNumbersToKeyframes(state.value);
    }
    let { done } = state;
    if (!isInDelayPhase && calculatedDuration !== null) {
      done = speed >= 0 ? currentTime >= totalDuration : currentTime <= 0;
    }
    const isAnimationFinished = holdTime === null && (playState === "finished" || playState === "running" && done);
    if (onUpdate) {
      onUpdate(state.value);
    }
    if (isAnimationFinished) {
      finish();
    }
    return state;
  };
  const stopAnimationDriver = () => {
    animationDriver && animationDriver.stop();
    animationDriver = void 0;
  };
  const cancel = () => {
    playState = "idle";
    stopAnimationDriver();
    resolveFinishedPromise();
    updateFinishedPromise();
    startTime = cancelTime = null;
  };
  const finish = () => {
    playState = "finished";
    onComplete && onComplete();
    stopAnimationDriver();
    resolveFinishedPromise();
  };
  const play = () => {
    if (hasStopped)
      return;
    if (!animationDriver)
      animationDriver = driver(tick);
    const now = animationDriver.now();
    onPlay && onPlay();
    if (holdTime !== null) {
      startTime = now - holdTime;
    } else if (!startTime || playState === "finished") {
      startTime = now;
    }
    if (playState === "finished") {
      updateFinishedPromise();
    }
    cancelTime = startTime;
    holdTime = null;
    playState = "running";
    animationDriver.start();
  };
  if (autoplay) {
    play();
  }
  const controls = {
    then(resolve, reject) {
      return currentFinishedPromise.then(resolve, reject);
    },
    get time() {
      return millisecondsToSeconds(currentTime);
    },
    set time(newTime) {
      newTime = secondsToMilliseconds(newTime);
      currentTime = newTime;
      if (holdTime !== null || !animationDriver || speed === 0) {
        holdTime = newTime;
      } else {
        startTime = animationDriver.now() - newTime / speed;
      }
    },
    get duration() {
      const duration = generator.calculatedDuration === null ? calcGeneratorDuration(generator) : generator.calculatedDuration;
      return millisecondsToSeconds(duration);
    },
    get speed() {
      return speed;
    },
    set speed(newSpeed) {
      if (newSpeed === speed || !animationDriver)
        return;
      speed = newSpeed;
      controls.time = millisecondsToSeconds(currentTime);
    },
    get state() {
      return playState;
    },
    play,
    pause: () => {
      playState = "paused";
      holdTime = currentTime;
    },
    stop: () => {
      hasStopped = true;
      if (playState === "idle")
        return;
      playState = "idle";
      onStop && onStop();
      cancel();
    },
    cancel: () => {
      if (cancelTime !== null)
        tick(cancelTime);
      cancel();
    },
    complete: () => {
      playState = "finished";
    },
    sample: (elapsed) => {
      startTime = 0;
      return tick(elapsed);
    }
  };
  return controls;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/memo.mjs
function memo(callback) {
  let result;
  return () => {
    if (result === void 0)
      result = callback();
    return result;
  };
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/animation/animators/waapi/create-accelerated-animation.mjs
var supportsWaapi = memo(() => Object.hasOwnProperty.call(Element.prototype, "animate"));
var acceleratedValues = /* @__PURE__ */ new Set([
  "opacity",
  "clipPath",
  "filter",
  "transform",
  "backgroundColor"
]);
var sampleDelta = 10;
var maxDuration2 = 2e4;
var requiresPregeneratedKeyframes = (valueName, options) => options.type === "spring" || valueName === "backgroundColor" || !isWaapiSupportedEasing(options.ease);
function createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {
  const canAccelerateAnimation = supportsWaapi() && acceleratedValues.has(valueName) && !options.repeatDelay && options.repeatType !== "mirror" && options.damping !== 0 && options.type !== "inertia";
  if (!canAccelerateAnimation)
    return false;
  let hasStopped = false;
  let resolveFinishedPromise;
  let currentFinishedPromise;
  let pendingCancel = false;
  const updateFinishedPromise = () => {
    currentFinishedPromise = new Promise((resolve) => {
      resolveFinishedPromise = resolve;
    });
  };
  updateFinishedPromise();
  let { keyframes: keyframes2, duration = 300, ease: ease2, times } = options;
  if (requiresPregeneratedKeyframes(valueName, options)) {
    const sampleAnimation = animateValue({
      ...options,
      repeat: 0,
      delay: 0
    });
    let state = { done: false, value: keyframes2[0] };
    const pregeneratedKeyframes = [];
    let t = 0;
    while (!state.done && t < maxDuration2) {
      state = sampleAnimation.sample(t);
      pregeneratedKeyframes.push(state.value);
      t += sampleDelta;
    }
    times = void 0;
    keyframes2 = pregeneratedKeyframes;
    duration = t - sampleDelta;
    ease2 = "linear";
  }
  const animation2 = animateStyle(value.owner.current, valueName, keyframes2, {
    ...options,
    duration,
    /**
     * This function is currently not called if ease is provided
     * as a function so the cast is safe.
     *
     * However it would be possible for a future refinement to port
     * in easing pregeneration from Motion One for browsers that
     * support the upcoming `linear()` easing function.
     */
    ease: ease2,
    times
  });
  const cancelAnimation = () => {
    pendingCancel = false;
    animation2.cancel();
  };
  const safeCancel = () => {
    pendingCancel = true;
    frame.update(cancelAnimation);
    resolveFinishedPromise();
    updateFinishedPromise();
  };
  animation2.onfinish = () => {
    if (pendingCancel)
      return;
    value.set(getFinalKeyframe(keyframes2, options));
    onComplete && onComplete();
    safeCancel();
  };
  const controls = {
    then(resolve, reject) {
      return currentFinishedPromise.then(resolve, reject);
    },
    attachTimeline(timeline) {
      animation2.timeline = timeline;
      animation2.onfinish = null;
      return noop;
    },
    get time() {
      return millisecondsToSeconds(animation2.currentTime || 0);
    },
    set time(newTime) {
      animation2.currentTime = secondsToMilliseconds(newTime);
    },
    get speed() {
      return animation2.playbackRate;
    },
    set speed(newSpeed) {
      animation2.playbackRate = newSpeed;
    },
    get duration() {
      return millisecondsToSeconds(duration);
    },
    play: () => {
      if (hasStopped)
        return;
      animation2.play();
      cancelFrame(cancelAnimation);
    },
    pause: () => animation2.pause(),
    stop: () => {
      hasStopped = true;
      if (animation2.playState === "idle")
        return;
      const { currentTime } = animation2;
      if (currentTime) {
        const sampleAnimation = animateValue({
          ...options,
          autoplay: false
        });
        value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);
      }
      safeCancel();
    },
    complete: () => {
      if (pendingCancel)
        return;
      animation2.finish();
    },
    cancel: safeCancel
  };
  return controls;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/animation/animators/instant.mjs
function createInstantAnimation({ keyframes: keyframes2, delay: delay2, onUpdate, onComplete }) {
  const setValue = () => {
    onUpdate && onUpdate(keyframes2[keyframes2.length - 1]);
    onComplete && onComplete();
    return {
      time: 0,
      speed: 1,
      duration: 0,
      play: noop,
      pause: noop,
      stop: noop,
      then: (resolve) => {
        resolve();
        return Promise.resolve();
      },
      cancel: noop,
      complete: noop
    };
  };
  return delay2 ? animateValue({
    keyframes: [0, 1],
    duration: 0,
    delay: delay2,
    onComplete: setValue
  }) : setValue();
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs
var underDampedSpring = {
  type: "spring",
  stiffness: 500,
  damping: 25,
  restSpeed: 10
};
var criticallyDampedSpring = (target) => ({
  type: "spring",
  stiffness: 550,
  damping: target === 0 ? 2 * Math.sqrt(550) : 30,
  restSpeed: 10
});
var keyframesTransition = {
  type: "keyframes",
  duration: 0.8
};
var ease = {
  type: "keyframes",
  ease: [0.25, 0.1, 0.35, 1],
  duration: 0.3
};
var getDefaultTransition = (valueKey, { keyframes: keyframes2 }) => {
  if (keyframes2.length > 2) {
    return keyframesTransition;
  } else if (transformProps.has(valueKey)) {
    return valueKey.startsWith("scale") ? criticallyDampedSpring(keyframes2[1]) : underDampedSpring;
  }
  return ease;
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs
var isAnimatable = (key2, value) => {
  if (key2 === "zIndex")
    return false;
  if (typeof value === "number" || Array.isArray(value))
    return true;
  if (typeof value === "string" && // It's animatable if we have a string
  (complex.test(value) || value === "0") && // And it contains numbers and/or colors
  !value.startsWith("url(")) {
    return true;
  }
  return false;
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/value/types/complex/filter.mjs
var maxDefaults = /* @__PURE__ */ new Set(["brightness", "contrast", "saturate", "opacity"]);
function applyDefaultFilter(v) {
  const [name, value] = v.slice(0, -1).split("(");
  if (name === "drop-shadow")
    return v;
  const [number2] = value.match(floatRegex) || [];
  if (!number2)
    return v;
  const unit = value.replace(number2, "");
  let defaultValue = maxDefaults.has(name) ? 1 : 0;
  if (number2 !== value)
    defaultValue *= 100;
  return name + "(" + defaultValue + unit + ")";
}
var functionRegex = /([a-z-]*)\(.*?\)/g;
var filter = {
  ...complex,
  getAnimatableNone: (v) => {
    const functions = v.match(functionRegex);
    return functions ? functions.map(applyDefaultFilter).join(" ") : v;
  }
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs
var defaultValueTypes = {
  ...numberValueTypes,
  // Color props
  color,
  backgroundColor: color,
  outlineColor: color,
  fill: color,
  stroke: color,
  // Border props
  borderColor: color,
  borderTopColor: color,
  borderRightColor: color,
  borderBottomColor: color,
  borderLeftColor: color,
  filter,
  WebkitFilter: filter
};
var getDefaultValueType = (key2) => defaultValueTypes[key2];

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs
function getAnimatableNone2(key2, value) {
  let defaultValueType = getDefaultValueType(key2);
  if (defaultValueType !== filter)
    defaultValueType = complex;
  return defaultValueType.getAnimatableNone ? defaultValueType.getAnimatableNone(value) : void 0;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs
var isZeroValueString = (v) => /^0[^.\s]+$/.test(v);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/animation/utils/is-none.mjs
function isNone(value) {
  if (typeof value === "number") {
    return value === 0;
  } else if (value !== null) {
    return value === "none" || value === "0" || isZeroValueString(value);
  }
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/animation/utils/keyframes.mjs
function getKeyframes(value, valueName, target, transition) {
  const isTargetAnimatable = isAnimatable(valueName, target);
  let keyframes2;
  if (Array.isArray(target)) {
    keyframes2 = [...target];
  } else {
    keyframes2 = [null, target];
  }
  const defaultOrigin = transition.from !== void 0 ? transition.from : value.get();
  let animatableTemplateValue = void 0;
  const noneKeyframeIndexes = [];
  for (let i = 0; i < keyframes2.length; i++) {
    if (keyframes2[i] === null) {
      keyframes2[i] = i === 0 ? defaultOrigin : keyframes2[i - 1];
    }
    if (isNone(keyframes2[i])) {
      noneKeyframeIndexes.push(i);
    }
    if (typeof keyframes2[i] === "string" && keyframes2[i] !== "none" && keyframes2[i] !== "0") {
      animatableTemplateValue = keyframes2[i];
    }
  }
  if (isTargetAnimatable && noneKeyframeIndexes.length && animatableTemplateValue) {
    for (let i = 0; i < noneKeyframeIndexes.length; i++) {
      const index2 = noneKeyframeIndexes[i];
      keyframes2[index2] = getAnimatableNone2(valueName, animatableTemplateValue);
    }
  }
  return keyframes2;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/animation/utils/transitions.mjs
function isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from, elapsed, ...transition }) {
  return !!Object.keys(transition).length;
}
function getValueTransition(transition, key2) {
  return transition[key2] || transition["default"] || transition;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/GlobalConfig.mjs
var MotionGlobalConfig = {
  skipAnimations: false
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs
var animateMotionValue = (valueName, value, target, transition = {}) => {
  return (onComplete) => {
    const valueTransition = getValueTransition(transition, valueName) || {};
    const delay2 = valueTransition.delay || transition.delay || 0;
    let { elapsed = 0 } = transition;
    elapsed = elapsed - secondsToMilliseconds(delay2);
    const keyframes2 = getKeyframes(value, valueName, target, valueTransition);
    const originKeyframe = keyframes2[0];
    const targetKeyframe = keyframes2[keyframes2.length - 1];
    const isOriginAnimatable = isAnimatable(valueName, originKeyframe);
    const isTargetAnimatable = isAnimatable(valueName, targetKeyframe);
    warning(isOriginAnimatable === isTargetAnimatable, `You are trying to animate ${valueName} from "${originKeyframe}" to "${targetKeyframe}". ${originKeyframe} is not an animatable value - to enable this animation set ${originKeyframe} to a value animatable to ${targetKeyframe} via the \`style\` property.`);
    let options = {
      keyframes: keyframes2,
      velocity: value.getVelocity(),
      ease: "easeOut",
      ...valueTransition,
      delay: -elapsed,
      onUpdate: (v) => {
        value.set(v);
        valueTransition.onUpdate && valueTransition.onUpdate(v);
      },
      onComplete: () => {
        onComplete();
        valueTransition.onComplete && valueTransition.onComplete();
      }
    };
    if (!isTransitionDefined(valueTransition)) {
      options = {
        ...options,
        ...getDefaultTransition(valueName, options)
      };
    }
    if (options.duration) {
      options.duration = secondsToMilliseconds(options.duration);
    }
    if (options.repeatDelay) {
      options.repeatDelay = secondsToMilliseconds(options.repeatDelay);
    }
    if (!isOriginAnimatable || !isTargetAnimatable || instantAnimationState.current || valueTransition.type === false || MotionGlobalConfig.skipAnimations) {
      return createInstantAnimation(instantAnimationState.current ? { ...options, delay: 0 } : options);
    }
    if (
      /**
       * If this is a handoff animation, the optimised animation will be running via
       * WAAPI. Therefore, this animation must be JS to ensure it runs "under" the
       * optimised animation.
       */
      !transition.isHandoff && value.owner && value.owner.current instanceof HTMLElement && /**
       * If we're outputting values to onUpdate then we can't use WAAPI as there's
       * no way to read the value from WAAPI every frame.
       */
      !value.owner.getProps().onUpdate
    ) {
      const acceleratedAnimation = createAcceleratedAnimation(value, valueName, options);
      if (acceleratedAnimation)
        return acceleratedAnimation;
    }
    return animateValue(options);
  };
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/value/use-will-change/is.mjs
function isWillChangeMotionValue(value) {
  return Boolean(isMotionValue(value) && value.add);
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs
var isNumericalString = (v) => /^\-?\d*\.?\d+$/.test(v);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/array.mjs
function addUniqueItem(arr, item) {
  if (arr.indexOf(item) === -1)
    arr.push(item);
}
function removeItem(arr, item) {
  const index2 = arr.indexOf(item);
  if (index2 > -1)
    arr.splice(index2, 1);
}
function moveItem([...arr], fromIndex, toIndex) {
  const startIndex = fromIndex < 0 ? arr.length + fromIndex : fromIndex;
  if (startIndex >= 0 && startIndex < arr.length) {
    const endIndex = toIndex < 0 ? arr.length + toIndex : toIndex;
    const [item] = arr.splice(fromIndex, 1);
    arr.splice(endIndex, 0, item);
  }
  return arr;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/subscription-manager.mjs
var SubscriptionManager = class {
  constructor() {
    this.subscriptions = [];
  }
  add(handler) {
    addUniqueItem(this.subscriptions, handler);
    return () => removeItem(this.subscriptions, handler);
  }
  notify(a, b, c) {
    const numSubscriptions = this.subscriptions.length;
    if (!numSubscriptions)
      return;
    if (numSubscriptions === 1) {
      this.subscriptions[0](a, b, c);
    } else {
      for (let i = 0; i < numSubscriptions; i++) {
        const handler = this.subscriptions[i];
        handler && handler(a, b, c);
      }
    }
  }
  getSize() {
    return this.subscriptions.length;
  }
  clear() {
    this.subscriptions.length = 0;
  }
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/warn-once.mjs
var warned = /* @__PURE__ */ new Set();
function warnOnce(condition, message, element) {
  if (condition || warned.has(message))
    return;
  console.warn(message);
  if (element)
    console.warn(element);
  warned.add(message);
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/value/index.mjs
var isFloat = (value) => {
  return !isNaN(parseFloat(value));
};
var collectMotionValues = {
  current: void 0
};
var MotionValue = class {
  /**
   * @param init - The initiating value
   * @param config - Optional configuration options
   *
   * -  `transformer`: A function to transform incoming values with.
   *
   * @internal
   */
  constructor(init, options = {}) {
    this.version = "10.18.0";
    this.timeDelta = 0;
    this.lastUpdated = 0;
    this.canTrackVelocity = false;
    this.events = {};
    this.updateAndNotify = (v, render = true) => {
      this.prev = this.current;
      this.current = v;
      const { delta, timestamp } = frameData;
      if (this.lastUpdated !== timestamp) {
        this.timeDelta = delta;
        this.lastUpdated = timestamp;
        frame.postRender(this.scheduleVelocityCheck);
      }
      if (this.prev !== this.current && this.events.change) {
        this.events.change.notify(this.current);
      }
      if (this.events.velocityChange) {
        this.events.velocityChange.notify(this.getVelocity());
      }
      if (render && this.events.renderRequest) {
        this.events.renderRequest.notify(this.current);
      }
    };
    this.scheduleVelocityCheck = () => frame.postRender(this.velocityCheck);
    this.velocityCheck = ({ timestamp }) => {
      if (timestamp !== this.lastUpdated) {
        this.prev = this.current;
        if (this.events.velocityChange) {
          this.events.velocityChange.notify(this.getVelocity());
        }
      }
    };
    this.hasAnimated = false;
    this.prev = this.current = init;
    this.canTrackVelocity = isFloat(this.current);
    this.owner = options.owner;
  }
  /**
   * Adds a function that will be notified when the `MotionValue` is updated.
   *
   * It returns a function that, when called, will cancel the subscription.
   *
   * When calling `onChange` inside a React component, it should be wrapped with the
   * `useEffect` hook. As it returns an unsubscribe function, this should be returned
   * from the `useEffect` function to ensure you don't add duplicate subscribers..
   *
   * ```jsx
   * export const MyComponent = () => {
   *   const x = useMotionValue(0)
   *   const y = useMotionValue(0)
   *   const opacity = useMotionValue(1)
   *
   *   useEffect(() => {
   *     function updateOpacity() {
   *       const maxXY = Math.max(x.get(), y.get())
   *       const newOpacity = transform(maxXY, [0, 100], [1, 0])
   *       opacity.set(newOpacity)
   *     }
   *
   *     const unsubscribeX = x.on("change", updateOpacity)
   *     const unsubscribeY = y.on("change", updateOpacity)
   *
   *     return () => {
   *       unsubscribeX()
   *       unsubscribeY()
   *     }
   *   }, [])
   *
   *   return <motion.div style={{ x }} />
   * }
   * ```
   *
   * @param subscriber - A function that receives the latest value.
   * @returns A function that, when called, will cancel this subscription.
   *
   * @deprecated
   */
  onChange(subscription) {
    if (true) {
      warnOnce(false, `value.onChange(callback) is deprecated. Switch to value.on("change", callback).`);
    }
    return this.on("change", subscription);
  }
  on(eventName, callback) {
    if (!this.events[eventName]) {
      this.events[eventName] = new SubscriptionManager();
    }
    const unsubscribe = this.events[eventName].add(callback);
    if (eventName === "change") {
      return () => {
        unsubscribe();
        frame.read(() => {
          if (!this.events.change.getSize()) {
            this.stop();
          }
        });
      };
    }
    return unsubscribe;
  }
  clearListeners() {
    for (const eventManagers in this.events) {
      this.events[eventManagers].clear();
    }
  }
  /**
   * Attaches a passive effect to the `MotionValue`.
   *
   * @internal
   */
  attach(passiveEffect, stopPassiveEffect) {
    this.passiveEffect = passiveEffect;
    this.stopPassiveEffect = stopPassiveEffect;
  }
  /**
   * Sets the state of the `MotionValue`.
   *
   * @remarks
   *
   * ```jsx
   * const x = useMotionValue(0)
   * x.set(10)
   * ```
   *
   * @param latest - Latest value to set.
   * @param render - Whether to notify render subscribers. Defaults to `true`
   *
   * @public
   */
  set(v, render = true) {
    if (!render || !this.passiveEffect) {
      this.updateAndNotify(v, render);
    } else {
      this.passiveEffect(v, this.updateAndNotify);
    }
  }
  setWithVelocity(prev, current, delta) {
    this.set(current);
    this.prev = prev;
    this.timeDelta = delta;
  }
  /**
   * Set the state of the `MotionValue`, stopping any active animations,
   * effects, and resets velocity to `0`.
   */
  jump(v) {
    this.updateAndNotify(v);
    this.prev = v;
    this.stop();
    if (this.stopPassiveEffect)
      this.stopPassiveEffect();
  }
  /**
   * Returns the latest state of `MotionValue`
   *
   * @returns - The latest state of `MotionValue`
   *
   * @public
   */
  get() {
    if (collectMotionValues.current) {
      collectMotionValues.current.push(this);
    }
    return this.current;
  }
  /**
   * @public
   */
  getPrevious() {
    return this.prev;
  }
  /**
   * Returns the latest velocity of `MotionValue`
   *
   * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.
   *
   * @public
   */
  getVelocity() {
    return this.canTrackVelocity ? (
      // These casts could be avoided if parseFloat would be typed better
      velocityPerSecond(parseFloat(this.current) - parseFloat(this.prev), this.timeDelta)
    ) : 0;
  }
  /**
   * Registers a new animation to control this `MotionValue`. Only one
   * animation can drive a `MotionValue` at one time.
   *
   * ```jsx
   * value.start()
   * ```
   *
   * @param animation - A function that starts the provided animation
   *
   * @internal
   */
  start(startAnimation) {
    this.stop();
    return new Promise((resolve) => {
      this.hasAnimated = true;
      this.animation = startAnimation(resolve);
      if (this.events.animationStart) {
        this.events.animationStart.notify();
      }
    }).then(() => {
      if (this.events.animationComplete) {
        this.events.animationComplete.notify();
      }
      this.clearAnimation();
    });
  }
  /**
   * Stop the currently active animation.
   *
   * @public
   */
  stop() {
    if (this.animation) {
      this.animation.stop();
      if (this.events.animationCancel) {
        this.events.animationCancel.notify();
      }
    }
    this.clearAnimation();
  }
  /**
   * Returns `true` if this value is currently animating.
   *
   * @public
   */
  isAnimating() {
    return !!this.animation;
  }
  clearAnimation() {
    delete this.animation;
  }
  /**
   * Destroy and clean up subscribers to this `MotionValue`.
   *
   * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically
   * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually
   * created a `MotionValue` via the `motionValue` function.
   *
   * @public
   */
  destroy() {
    this.clearListeners();
    this.stop();
    if (this.stopPassiveEffect) {
      this.stopPassiveEffect();
    }
  }
};
function motionValue(init, options) {
  return new MotionValue(init, options);
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs
var testValueType = (v) => (type) => type.test(v);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs
var auto = {
  test: (v) => v === "auto",
  parse: (v) => v
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs
var dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto];
var findDimensionValueType = (v) => dimensionValueTypes.find(testValueType(v));

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs
var valueTypes = [...dimensionValueTypes, color, complex];
var findValueType = (v) => valueTypes.find(testValueType(v));

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/utils/setters.mjs
function setMotionValue(visualElement, key2, value) {
  if (visualElement.hasValue(key2)) {
    visualElement.getValue(key2).set(value);
  } else {
    visualElement.addValue(key2, motionValue(value));
  }
}
function setTarget(visualElement, definition) {
  const resolved = resolveVariant(visualElement, definition);
  let { transitionEnd = {}, transition = {}, ...target } = resolved ? visualElement.makeTargetAnimatable(resolved, false) : {};
  target = { ...target, ...transitionEnd };
  for (const key2 in target) {
    const value = resolveFinalValueInKeyframes(target[key2]);
    setMotionValue(visualElement, key2, value);
  }
}
function checkTargetForNewValues(visualElement, target, origin) {
  var _a3, _b2;
  const newValueKeys = Object.keys(target).filter((key2) => !visualElement.hasValue(key2));
  const numNewValues = newValueKeys.length;
  if (!numNewValues)
    return;
  for (let i = 0; i < numNewValues; i++) {
    const key2 = newValueKeys[i];
    const targetValue = target[key2];
    let value = null;
    if (Array.isArray(targetValue)) {
      value = targetValue[0];
    }
    if (value === null) {
      value = (_b2 = (_a3 = origin[key2]) !== null && _a3 !== void 0 ? _a3 : visualElement.readValue(key2)) !== null && _b2 !== void 0 ? _b2 : target[key2];
    }
    if (value === void 0 || value === null)
      continue;
    if (typeof value === "string" && (isNumericalString(value) || isZeroValueString(value))) {
      value = parseFloat(value);
    } else if (!findValueType(value) && complex.test(targetValue)) {
      value = getAnimatableNone2(key2, targetValue);
    }
    visualElement.addValue(key2, motionValue(value, { owner: visualElement }));
    if (origin[key2] === void 0) {
      origin[key2] = value;
    }
    if (value !== null)
      visualElement.setBaseTarget(key2, value);
  }
}
function getOriginFromTransition(key2, transition) {
  if (!transition)
    return;
  const valueTransition = transition[key2] || transition["default"] || transition;
  return valueTransition.from;
}
function getOrigin(target, transition, visualElement) {
  const origin = {};
  for (const key2 in target) {
    const transitionOrigin = getOriginFromTransition(key2, transition);
    if (transitionOrigin !== void 0) {
      origin[key2] = transitionOrigin;
    } else {
      const value = visualElement.getValue(key2);
      if (value) {
        origin[key2] = value.get();
      }
    }
  }
  return origin;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs
function shouldBlockAnimation({ protectedKeys, needsAnimating }, key2) {
  const shouldBlock = protectedKeys.hasOwnProperty(key2) && needsAnimating[key2] !== true;
  needsAnimating[key2] = false;
  return shouldBlock;
}
function hasKeyframesChanged(value, target) {
  const current = value.get();
  if (Array.isArray(target)) {
    for (let i = 0; i < target.length; i++) {
      if (target[i] !== current)
        return true;
    }
  } else {
    return current !== target;
  }
}
function animateTarget(visualElement, definition, { delay: delay2 = 0, transitionOverride, type } = {}) {
  let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = visualElement.makeTargetAnimatable(definition);
  const willChange = visualElement.getValue("willChange");
  if (transitionOverride)
    transition = transitionOverride;
  const animations2 = [];
  const animationTypeState = type && visualElement.animationState && visualElement.animationState.getState()[type];
  for (const key2 in target) {
    const value = visualElement.getValue(key2);
    const valueTarget = target[key2];
    if (!value || valueTarget === void 0 || animationTypeState && shouldBlockAnimation(animationTypeState, key2)) {
      continue;
    }
    const valueTransition = {
      delay: delay2,
      elapsed: 0,
      ...getValueTransition(transition || {}, key2)
    };
    if (window.HandoffAppearAnimations) {
      const appearId = visualElement.getProps()[optimizedAppearDataAttribute];
      if (appearId) {
        const elapsed = window.HandoffAppearAnimations(appearId, key2, value, frame);
        if (elapsed !== null) {
          valueTransition.elapsed = elapsed;
          valueTransition.isHandoff = true;
        }
      }
    }
    let canSkip = !valueTransition.isHandoff && !hasKeyframesChanged(value, valueTarget);
    if (valueTransition.type === "spring" && (value.getVelocity() || valueTransition.velocity)) {
      canSkip = false;
    }
    if (value.animation) {
      canSkip = false;
    }
    if (canSkip)
      continue;
    value.start(animateMotionValue(key2, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key2) ? { type: false } : valueTransition));
    const animation2 = value.animation;
    if (isWillChangeMotionValue(willChange)) {
      willChange.add(key2);
      animation2.then(() => willChange.remove(key2));
    }
    animations2.push(animation2);
  }
  if (transitionEnd) {
    Promise.all(animations2).then(() => {
      transitionEnd && setTarget(visualElement, transitionEnd);
    });
  }
  return animations2;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-variant.mjs
function animateVariant(visualElement, variant, options = {}) {
  const resolved = resolveVariant(visualElement, variant, options.custom);
  let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};
  if (options.transitionOverride) {
    transition = options.transitionOverride;
  }
  const getAnimation = resolved ? () => Promise.all(animateTarget(visualElement, resolved, options)) : () => Promise.resolve();
  const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size ? (forwardDelay = 0) => {
    const { delayChildren = 0, staggerChildren, staggerDirection } = transition;
    return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);
  } : () => Promise.resolve();
  const { when } = transition;
  if (when) {
    const [first, last] = when === "beforeChildren" ? [getAnimation, getChildAnimations] : [getChildAnimations, getAnimation];
    return first().then(() => last());
  } else {
    return Promise.all([getAnimation(), getChildAnimations(options.delay)]);
  }
}
function animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {
  const animations2 = [];
  const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;
  const generateStaggerDuration = staggerDirection === 1 ? (i = 0) => i * staggerChildren : (i = 0) => maxStaggerDuration - i * staggerChildren;
  Array.from(visualElement.variantChildren).sort(sortByTreeOrder).forEach((child, i) => {
    child.notify("AnimationStart", variant);
    animations2.push(animateVariant(child, variant, {
      ...options,
      delay: delayChildren + generateStaggerDuration(i)
    }).then(() => child.notify("AnimationComplete", variant)));
  });
  return Promise.all(animations2);
}
function sortByTreeOrder(a, b) {
  return a.sortNodePosition(b);
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/animation/interfaces/visual-element.mjs
function animateVisualElement(visualElement, definition, options = {}) {
  visualElement.notify("AnimationStart", definition);
  let animation2;
  if (Array.isArray(definition)) {
    const animations2 = definition.map((variant) => animateVariant(visualElement, variant, options));
    animation2 = Promise.all(animations2);
  } else if (typeof definition === "string") {
    animation2 = animateVariant(visualElement, definition, options);
  } else {
    const resolvedDefinition = typeof definition === "function" ? resolveVariant(visualElement, definition, options.custom) : definition;
    animation2 = Promise.all(animateTarget(visualElement, resolvedDefinition, options));
  }
  return animation2.then(() => visualElement.notify("AnimationComplete", definition));
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/utils/animation-state.mjs
var reversePriorityOrder = [...variantPriorityOrder].reverse();
var numAnimationTypes = variantPriorityOrder.length;
function animateList(visualElement) {
  return (animations2) => Promise.all(animations2.map(({ animation: animation2, options }) => animateVisualElement(visualElement, animation2, options)));
}
function createAnimationState(visualElement) {
  let animate2 = animateList(visualElement);
  const state = createState();
  let isInitialRender = true;
  const buildResolvedTypeValues = (acc, definition) => {
    const resolved = resolveVariant(visualElement, definition);
    if (resolved) {
      const { transition, transitionEnd, ...target } = resolved;
      acc = { ...acc, ...target, ...transitionEnd };
    }
    return acc;
  };
  function setAnimateFunction(makeAnimator) {
    animate2 = makeAnimator(visualElement);
  }
  function animateChanges(options, changedActiveType) {
    const props = visualElement.getProps();
    const context = visualElement.getVariantContext(true) || {};
    const animations2 = [];
    const removedKeys = /* @__PURE__ */ new Set();
    let encounteredKeys = {};
    let removedVariantIndex = Infinity;
    for (let i = 0; i < numAnimationTypes; i++) {
      const type = reversePriorityOrder[i];
      const typeState = state[type];
      const prop = props[type] !== void 0 ? props[type] : context[type];
      const propIsVariant = isVariantLabel(prop);
      const activeDelta = type === changedActiveType ? typeState.isActive : null;
      if (activeDelta === false)
        removedVariantIndex = i;
      let isInherited = prop === context[type] && prop !== props[type] && propIsVariant;
      if (isInherited && isInitialRender && visualElement.manuallyAnimateOnMount) {
        isInherited = false;
      }
      typeState.protectedKeys = { ...encounteredKeys };
      if (
        // If it isn't active and hasn't *just* been set as inactive
        !typeState.isActive && activeDelta === null || // If we didn't and don't have any defined prop for this animation type
        !prop && !typeState.prevProp || // Or if the prop doesn't define an animation
        isAnimationControls(prop) || typeof prop === "boolean"
      ) {
        continue;
      }
      const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);
      let shouldAnimateType = variantDidChange || // If we're making this variant active, we want to always make it active
      type === changedActiveType && typeState.isActive && !isInherited && propIsVariant || // If we removed a higher-priority variant (i is in reverse order)
      i > removedVariantIndex && propIsVariant;
      let handledRemovedValues = false;
      const definitionList = Array.isArray(prop) ? prop : [prop];
      let resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});
      if (activeDelta === false)
        resolvedValues = {};
      const { prevResolvedValues = {} } = typeState;
      const allKeys = {
        ...prevResolvedValues,
        ...resolvedValues
      };
      const markToAnimate = (key2) => {
        shouldAnimateType = true;
        if (removedKeys.has(key2)) {
          handledRemovedValues = true;
          removedKeys.delete(key2);
        }
        typeState.needsAnimating[key2] = true;
      };
      for (const key2 in allKeys) {
        const next = resolvedValues[key2];
        const prev = prevResolvedValues[key2];
        if (encounteredKeys.hasOwnProperty(key2))
          continue;
        let valueHasChanged = false;
        if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {
          valueHasChanged = !shallowCompare(next, prev);
        } else {
          valueHasChanged = next !== prev;
        }
        if (valueHasChanged) {
          if (next !== void 0) {
            markToAnimate(key2);
          } else {
            removedKeys.add(key2);
          }
        } else if (next !== void 0 && removedKeys.has(key2)) {
          markToAnimate(key2);
        } else {
          typeState.protectedKeys[key2] = true;
        }
      }
      typeState.prevProp = prop;
      typeState.prevResolvedValues = resolvedValues;
      if (typeState.isActive) {
        encounteredKeys = { ...encounteredKeys, ...resolvedValues };
      }
      if (isInitialRender && visualElement.blockInitialAnimation) {
        shouldAnimateType = false;
      }
      if (shouldAnimateType && (!isInherited || handledRemovedValues)) {
        animations2.push(...definitionList.map((animation2) => ({
          animation: animation2,
          options: { type, ...options }
        })));
      }
    }
    if (removedKeys.size) {
      const fallbackAnimation = {};
      removedKeys.forEach((key2) => {
        const fallbackTarget = visualElement.getBaseTarget(key2);
        if (fallbackTarget !== void 0) {
          fallbackAnimation[key2] = fallbackTarget;
        }
      });
      animations2.push({ animation: fallbackAnimation });
    }
    let shouldAnimate = Boolean(animations2.length);
    if (isInitialRender && (props.initial === false || props.initial === props.animate) && !visualElement.manuallyAnimateOnMount) {
      shouldAnimate = false;
    }
    isInitialRender = false;
    return shouldAnimate ? animate2(animations2) : Promise.resolve();
  }
  function setActive(type, isActive, options) {
    var _a3;
    if (state[type].isActive === isActive)
      return Promise.resolve();
    (_a3 = visualElement.variantChildren) === null || _a3 === void 0 ? void 0 : _a3.forEach((child) => {
      var _a4;
      return (_a4 = child.animationState) === null || _a4 === void 0 ? void 0 : _a4.setActive(type, isActive);
    });
    state[type].isActive = isActive;
    const animations2 = animateChanges(options, type);
    for (const key2 in state) {
      state[key2].protectedKeys = {};
    }
    return animations2;
  }
  return {
    animateChanges,
    setActive,
    setAnimateFunction,
    getState: () => state
  };
}
function checkVariantsDidChange(prev, next) {
  if (typeof next === "string") {
    return next !== prev;
  } else if (Array.isArray(next)) {
    return !shallowCompare(next, prev);
  }
  return false;
}
function createTypeState(isActive = false) {
  return {
    isActive,
    protectedKeys: {},
    needsAnimating: {},
    prevResolvedValues: {}
  };
}
function createState() {
  return {
    animate: createTypeState(true),
    whileInView: createTypeState(),
    whileHover: createTypeState(),
    whileTap: createTypeState(),
    whileDrag: createTypeState(),
    whileFocus: createTypeState(),
    exit: createTypeState()
  };
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/motion/features/animation/index.mjs
var AnimationFeature = class extends Feature {
  /**
   * We dynamically generate the AnimationState manager as it contains a reference
   * to the underlying animation library. We only want to load that if we load this,
   * so people can optionally code split it out using the `m` component.
   */
  constructor(node) {
    super(node);
    node.animationState || (node.animationState = createAnimationState(node));
  }
  updateAnimationControlsSubscription() {
    const { animate: animate2 } = this.node.getProps();
    this.unmount();
    if (isAnimationControls(animate2)) {
      this.unmount = animate2.subscribe(this.node);
    }
  }
  /**
   * Subscribe any provided AnimationControls to the component's VisualElement
   */
  mount() {
    this.updateAnimationControlsSubscription();
  }
  update() {
    const { animate: animate2 } = this.node.getProps();
    const { animate: prevAnimate } = this.node.prevProps || {};
    if (animate2 !== prevAnimate) {
      this.updateAnimationControlsSubscription();
    }
  }
  unmount() {
  }
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/motion/features/animation/exit.mjs
var id = 0;
var ExitAnimationFeature = class extends Feature {
  constructor() {
    super(...arguments);
    this.id = id++;
  }
  update() {
    if (!this.node.presenceContext)
      return;
    const { isPresent, onExitComplete, custom } = this.node.presenceContext;
    const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};
    if (!this.node.animationState || isPresent === prevIsPresent) {
      return;
    }
    const exitAnimation = this.node.animationState.setActive("exit", !isPresent, { custom: custom !== null && custom !== void 0 ? custom : this.node.getProps().custom });
    if (onExitComplete && !isPresent) {
      exitAnimation.then(() => onExitComplete(this.id));
    }
  }
  mount() {
    const { register } = this.node.presenceContext || {};
    if (register) {
      this.unmount = register(this.id);
    }
  }
  unmount() {
  }
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/motion/features/animations.mjs
var animations = {
  animation: {
    Feature: AnimationFeature
  },
  exit: {
    Feature: ExitAnimationFeature
  }
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/distance.mjs
var distance = (a, b) => Math.abs(a - b);
function distance2D(a, b) {
  const xDelta = distance(a.x, b.x);
  const yDelta = distance(a.y, b.y);
  return Math.sqrt(xDelta ** 2 + yDelta ** 2);
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs
var PanSession = class {
  constructor(event, handlers, { transformPagePoint, contextWindow, dragSnapToOrigin = false } = {}) {
    this.startEvent = null;
    this.lastMoveEvent = null;
    this.lastMoveEventInfo = null;
    this.handlers = {};
    this.contextWindow = window;
    this.updatePoint = () => {
      if (!(this.lastMoveEvent && this.lastMoveEventInfo))
        return;
      const info2 = getPanInfo(this.lastMoveEventInfo, this.history);
      const isPanStarted = this.startEvent !== null;
      const isDistancePastThreshold = distance2D(info2.offset, { x: 0, y: 0 }) >= 3;
      if (!isPanStarted && !isDistancePastThreshold)
        return;
      const { point: point2 } = info2;
      const { timestamp: timestamp2 } = frameData;
      this.history.push({ ...point2, timestamp: timestamp2 });
      const { onStart, onMove } = this.handlers;
      if (!isPanStarted) {
        onStart && onStart(this.lastMoveEvent, info2);
        this.startEvent = this.lastMoveEvent;
      }
      onMove && onMove(this.lastMoveEvent, info2);
    };
    this.handlePointerMove = (event2, info2) => {
      this.lastMoveEvent = event2;
      this.lastMoveEventInfo = transformPoint(info2, this.transformPagePoint);
      frame.update(this.updatePoint, true);
    };
    this.handlePointerUp = (event2, info2) => {
      this.end();
      const { onEnd, onSessionEnd, resumeAnimation } = this.handlers;
      if (this.dragSnapToOrigin)
        resumeAnimation && resumeAnimation();
      if (!(this.lastMoveEvent && this.lastMoveEventInfo))
        return;
      const panInfo = getPanInfo(event2.type === "pointercancel" ? this.lastMoveEventInfo : transformPoint(info2, this.transformPagePoint), this.history);
      if (this.startEvent && onEnd) {
        onEnd(event2, panInfo);
      }
      onSessionEnd && onSessionEnd(event2, panInfo);
    };
    if (!isPrimaryPointer(event))
      return;
    this.dragSnapToOrigin = dragSnapToOrigin;
    this.handlers = handlers;
    this.transformPagePoint = transformPagePoint;
    this.contextWindow = contextWindow || window;
    const info = extractEventInfo(event);
    const initialInfo = transformPoint(info, this.transformPagePoint);
    const { point } = initialInfo;
    const { timestamp } = frameData;
    this.history = [{ ...point, timestamp }];
    const { onSessionStart } = handlers;
    onSessionStart && onSessionStart(event, getPanInfo(initialInfo, this.history));
    this.removeListeners = pipe(addPointerEvent(this.contextWindow, "pointermove", this.handlePointerMove), addPointerEvent(this.contextWindow, "pointerup", this.handlePointerUp), addPointerEvent(this.contextWindow, "pointercancel", this.handlePointerUp));
  }
  updateHandlers(handlers) {
    this.handlers = handlers;
  }
  end() {
    this.removeListeners && this.removeListeners();
    cancelFrame(this.updatePoint);
  }
};
function transformPoint(info, transformPagePoint) {
  return transformPagePoint ? { point: transformPagePoint(info.point) } : info;
}
function subtractPoint(a, b) {
  return { x: a.x - b.x, y: a.y - b.y };
}
function getPanInfo({ point }, history) {
  return {
    point,
    delta: subtractPoint(point, lastDevicePoint(history)),
    offset: subtractPoint(point, startDevicePoint(history)),
    velocity: getVelocity2(history, 0.1)
  };
}
function startDevicePoint(history) {
  return history[0];
}
function lastDevicePoint(history) {
  return history[history.length - 1];
}
function getVelocity2(history, timeDelta) {
  if (history.length < 2) {
    return { x: 0, y: 0 };
  }
  let i = history.length - 1;
  let timestampedPoint = null;
  const lastPoint = lastDevicePoint(history);
  while (i >= 0) {
    timestampedPoint = history[i];
    if (lastPoint.timestamp - timestampedPoint.timestamp > secondsToMilliseconds(timeDelta)) {
      break;
    }
    i--;
  }
  if (!timestampedPoint) {
    return { x: 0, y: 0 };
  }
  const time2 = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);
  if (time2 === 0) {
    return { x: 0, y: 0 };
  }
  const currentVelocity = {
    x: (lastPoint.x - timestampedPoint.x) / time2,
    y: (lastPoint.y - timestampedPoint.y) / time2
  };
  if (currentVelocity.x === Infinity) {
    currentVelocity.x = 0;
  }
  if (currentVelocity.y === Infinity) {
    currentVelocity.y = 0;
  }
  return currentVelocity;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs
function calcLength(axis) {
  return axis.max - axis.min;
}
function isNear(value, target = 0, maxDistance = 0.01) {
  return Math.abs(value - target) <= maxDistance;
}
function calcAxisDelta(delta, source, target, origin = 0.5) {
  delta.origin = origin;
  delta.originPoint = mix(source.min, source.max, delta.origin);
  delta.scale = calcLength(target) / calcLength(source);
  if (isNear(delta.scale, 1, 1e-4) || isNaN(delta.scale))
    delta.scale = 1;
  delta.translate = mix(target.min, target.max, delta.origin) - delta.originPoint;
  if (isNear(delta.translate) || isNaN(delta.translate))
    delta.translate = 0;
}
function calcBoxDelta(delta, source, target, origin) {
  calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : void 0);
  calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : void 0);
}
function calcRelativeAxis(target, relative, parent) {
  target.min = parent.min + relative.min;
  target.max = target.min + calcLength(relative);
}
function calcRelativeBox(target, relative, parent) {
  calcRelativeAxis(target.x, relative.x, parent.x);
  calcRelativeAxis(target.y, relative.y, parent.y);
}
function calcRelativeAxisPosition(target, layout2, parent) {
  target.min = layout2.min - parent.min;
  target.max = target.min + calcLength(layout2);
}
function calcRelativePosition(target, layout2, parent) {
  calcRelativeAxisPosition(target.x, layout2.x, parent.x);
  calcRelativeAxisPosition(target.y, layout2.y, parent.y);
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs
function applyConstraints(point, { min, max }, elastic) {
  if (min !== void 0 && point < min) {
    point = elastic ? mix(min, point, elastic.min) : Math.max(point, min);
  } else if (max !== void 0 && point > max) {
    point = elastic ? mix(max, point, elastic.max) : Math.min(point, max);
  }
  return point;
}
function calcRelativeAxisConstraints(axis, min, max) {
  return {
    min: min !== void 0 ? axis.min + min : void 0,
    max: max !== void 0 ? axis.max + max - (axis.max - axis.min) : void 0
  };
}
function calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {
  return {
    x: calcRelativeAxisConstraints(layoutBox.x, left, right),
    y: calcRelativeAxisConstraints(layoutBox.y, top, bottom)
  };
}
function calcViewportAxisConstraints(layoutAxis, constraintsAxis) {
  let min = constraintsAxis.min - layoutAxis.min;
  let max = constraintsAxis.max - layoutAxis.max;
  if (constraintsAxis.max - constraintsAxis.min < layoutAxis.max - layoutAxis.min) {
    [min, max] = [max, min];
  }
  return { min, max };
}
function calcViewportConstraints(layoutBox, constraintsBox) {
  return {
    x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),
    y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y)
  };
}
function calcOrigin2(source, target) {
  let origin = 0.5;
  const sourceLength = calcLength(source);
  const targetLength = calcLength(target);
  if (targetLength > sourceLength) {
    origin = progress(target.min, target.max - sourceLength, source.min);
  } else if (sourceLength > targetLength) {
    origin = progress(source.min, source.max - targetLength, target.min);
  }
  return clamp(0, 1, origin);
}
function rebaseAxisConstraints(layout2, constraints) {
  const relativeConstraints = {};
  if (constraints.min !== void 0) {
    relativeConstraints.min = constraints.min - layout2.min;
  }
  if (constraints.max !== void 0) {
    relativeConstraints.max = constraints.max - layout2.min;
  }
  return relativeConstraints;
}
var defaultElastic = 0.35;
function resolveDragElastic(dragElastic = defaultElastic) {
  if (dragElastic === false) {
    dragElastic = 0;
  } else if (dragElastic === true) {
    dragElastic = defaultElastic;
  }
  return {
    x: resolveAxisElastic(dragElastic, "left", "right"),
    y: resolveAxisElastic(dragElastic, "top", "bottom")
  };
}
function resolveAxisElastic(dragElastic, minLabel, maxLabel) {
  return {
    min: resolvePointElastic(dragElastic, minLabel),
    max: resolvePointElastic(dragElastic, maxLabel)
  };
}
function resolvePointElastic(dragElastic, label) {
  return typeof dragElastic === "number" ? dragElastic : dragElastic[label] || 0;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/projection/geometry/models.mjs
var createAxisDelta = () => ({
  translate: 0,
  scale: 1,
  origin: 0,
  originPoint: 0
});
var createDelta = () => ({
  x: createAxisDelta(),
  y: createAxisDelta()
});
var createAxis = () => ({ min: 0, max: 0 });
var createBox = () => ({
  x: createAxis(),
  y: createAxis()
});

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs
function eachAxis(callback) {
  return [callback("x"), callback("y")];
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs
function convertBoundingBoxToBox({ top, left, right, bottom }) {
  return {
    x: { min: left, max: right },
    y: { min: top, max: bottom }
  };
}
function convertBoxToBoundingBox({ x, y }) {
  return { top: y.min, right: x.max, bottom: y.max, left: x.min };
}
function transformBoxPoints(point, transformPoint2) {
  if (!transformPoint2)
    return point;
  const topLeft = transformPoint2({ x: point.left, y: point.top });
  const bottomRight = transformPoint2({ x: point.right, y: point.bottom });
  return {
    top: topLeft.y,
    left: topLeft.x,
    bottom: bottomRight.y,
    right: bottomRight.x
  };
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs
function isIdentityScale(scale2) {
  return scale2 === void 0 || scale2 === 1;
}
function hasScale({ scale: scale2, scaleX, scaleY }) {
  return !isIdentityScale(scale2) || !isIdentityScale(scaleX) || !isIdentityScale(scaleY);
}
function hasTransform(values) {
  return hasScale(values) || has2DTranslate(values) || values.z || values.rotate || values.rotateX || values.rotateY;
}
function has2DTranslate(values) {
  return is2DTranslate(values.x) || is2DTranslate(values.y);
}
function is2DTranslate(value) {
  return value && value !== "0%";
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs
function scalePoint(point, scale2, originPoint) {
  const distanceFromOrigin = point - originPoint;
  const scaled = scale2 * distanceFromOrigin;
  return originPoint + scaled;
}
function applyPointDelta(point, translate, scale2, originPoint, boxScale) {
  if (boxScale !== void 0) {
    point = scalePoint(point, boxScale, originPoint);
  }
  return scalePoint(point, scale2, originPoint) + translate;
}
function applyAxisDelta(axis, translate = 0, scale2 = 1, originPoint, boxScale) {
  axis.min = applyPointDelta(axis.min, translate, scale2, originPoint, boxScale);
  axis.max = applyPointDelta(axis.max, translate, scale2, originPoint, boxScale);
}
function applyBoxDelta(box, { x, y }) {
  applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);
  applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);
}
function applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {
  const treeLength = treePath.length;
  if (!treeLength)
    return;
  treeScale.x = treeScale.y = 1;
  let node;
  let delta;
  for (let i = 0; i < treeLength; i++) {
    node = treePath[i];
    delta = node.projectionDelta;
    const instance = node.instance;
    if (instance && instance.style && instance.style.display === "contents") {
      continue;
    }
    if (isSharedTransition && node.options.layoutScroll && node.scroll && node !== node.root) {
      transformBox(box, {
        x: -node.scroll.offset.x,
        y: -node.scroll.offset.y
      });
    }
    if (delta) {
      treeScale.x *= delta.x.scale;
      treeScale.y *= delta.y.scale;
      applyBoxDelta(box, delta);
    }
    if (isSharedTransition && hasTransform(node.latestValues)) {
      transformBox(box, node.latestValues);
    }
  }
  treeScale.x = snapToDefault(treeScale.x);
  treeScale.y = snapToDefault(treeScale.y);
}
function snapToDefault(scale2) {
  if (Number.isInteger(scale2))
    return scale2;
  return scale2 > 1.0000000000001 || scale2 < 0.999999999999 ? scale2 : 1;
}
function translateAxis(axis, distance2) {
  axis.min = axis.min + distance2;
  axis.max = axis.max + distance2;
}
function transformAxis(axis, transforms, [key2, scaleKey, originKey]) {
  const axisOrigin = transforms[originKey] !== void 0 ? transforms[originKey] : 0.5;
  const originPoint = mix(axis.min, axis.max, axisOrigin);
  applyAxisDelta(axis, transforms[key2], transforms[scaleKey], originPoint, transforms.scale);
}
var xKeys = ["x", "scaleX", "originX"];
var yKeys = ["y", "scaleY", "originY"];
function transformBox(box, transform2) {
  transformAxis(box.x, transform2, xKeys);
  transformAxis(box.y, transform2, yKeys);
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/projection/utils/measure.mjs
function measureViewportBox(instance, transformPoint2) {
  return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint2));
}
function measurePageBox(element, rootProjectionNode2, transformPagePoint) {
  const viewportBox = measureViewportBox(element, transformPagePoint);
  const { scroll: scroll2 } = rootProjectionNode2;
  if (scroll2) {
    translateAxis(viewportBox.x, scroll2.offset.x);
    translateAxis(viewportBox.y, scroll2.offset.y);
  }
  return viewportBox;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/get-context-window.mjs
var getContextWindow = ({ current }) => {
  return current ? current.ownerDocument.defaultView : null;
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs
var elementDragControls = /* @__PURE__ */ new WeakMap();
var VisualElementDragControls = class {
  constructor(visualElement) {
    this.openGlobalLock = null;
    this.isDragging = false;
    this.currentDirection = null;
    this.originPoint = { x: 0, y: 0 };
    this.constraints = false;
    this.hasMutatedConstraints = false;
    this.elastic = createBox();
    this.visualElement = visualElement;
  }
  start(originEvent, { snapToCursor = false } = {}) {
    const { presenceContext } = this.visualElement;
    if (presenceContext && presenceContext.isPresent === false)
      return;
    const onSessionStart = (event) => {
      const { dragSnapToOrigin: dragSnapToOrigin2 } = this.getProps();
      dragSnapToOrigin2 ? this.pauseAnimation() : this.stopAnimation();
      if (snapToCursor) {
        this.snapToCursor(extractEventInfo(event, "page").point);
      }
    };
    const onStart = (event, info) => {
      const { drag: drag2, dragPropagation, onDragStart } = this.getProps();
      if (drag2 && !dragPropagation) {
        if (this.openGlobalLock)
          this.openGlobalLock();
        this.openGlobalLock = getGlobalLock(drag2);
        if (!this.openGlobalLock)
          return;
      }
      this.isDragging = true;
      this.currentDirection = null;
      this.resolveConstraints();
      if (this.visualElement.projection) {
        this.visualElement.projection.isAnimationBlocked = true;
        this.visualElement.projection.target = void 0;
      }
      eachAxis((axis) => {
        let current = this.getAxisMotionValue(axis).get() || 0;
        if (percent.test(current)) {
          const { projection } = this.visualElement;
          if (projection && projection.layout) {
            const measuredAxis = projection.layout.layoutBox[axis];
            if (measuredAxis) {
              const length = calcLength(measuredAxis);
              current = length * (parseFloat(current) / 100);
            }
          }
        }
        this.originPoint[axis] = current;
      });
      if (onDragStart) {
        frame.update(() => onDragStart(event, info), false, true);
      }
      const { animationState } = this.visualElement;
      animationState && animationState.setActive("whileDrag", true);
    };
    const onMove = (event, info) => {
      const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag } = this.getProps();
      if (!dragPropagation && !this.openGlobalLock)
        return;
      const { offset: offset2 } = info;
      if (dragDirectionLock && this.currentDirection === null) {
        this.currentDirection = getCurrentDirection(offset2);
        if (this.currentDirection !== null) {
          onDirectionLock && onDirectionLock(this.currentDirection);
        }
        return;
      }
      this.updateAxis("x", info.point, offset2);
      this.updateAxis("y", info.point, offset2);
      this.visualElement.render();
      onDrag && onDrag(event, info);
    };
    const onSessionEnd = (event, info) => this.stop(event, info);
    const resumeAnimation = () => eachAxis((axis) => {
      var _a3;
      return this.getAnimationState(axis) === "paused" && ((_a3 = this.getAxisMotionValue(axis).animation) === null || _a3 === void 0 ? void 0 : _a3.play());
    });
    const { dragSnapToOrigin } = this.getProps();
    this.panSession = new PanSession(originEvent, {
      onSessionStart,
      onStart,
      onMove,
      onSessionEnd,
      resumeAnimation
    }, {
      transformPagePoint: this.visualElement.getTransformPagePoint(),
      dragSnapToOrigin,
      contextWindow: getContextWindow(this.visualElement)
    });
  }
  stop(event, info) {
    const isDragging = this.isDragging;
    this.cancel();
    if (!isDragging)
      return;
    const { velocity } = info;
    this.startAnimation(velocity);
    const { onDragEnd } = this.getProps();
    if (onDragEnd) {
      frame.update(() => onDragEnd(event, info));
    }
  }
  cancel() {
    this.isDragging = false;
    const { projection, animationState } = this.visualElement;
    if (projection) {
      projection.isAnimationBlocked = false;
    }
    this.panSession && this.panSession.end();
    this.panSession = void 0;
    const { dragPropagation } = this.getProps();
    if (!dragPropagation && this.openGlobalLock) {
      this.openGlobalLock();
      this.openGlobalLock = null;
    }
    animationState && animationState.setActive("whileDrag", false);
  }
  updateAxis(axis, _point, offset2) {
    const { drag: drag2 } = this.getProps();
    if (!offset2 || !shouldDrag(axis, drag2, this.currentDirection))
      return;
    const axisValue = this.getAxisMotionValue(axis);
    let next = this.originPoint[axis] + offset2[axis];
    if (this.constraints && this.constraints[axis]) {
      next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);
    }
    axisValue.set(next);
  }
  resolveConstraints() {
    var _a3;
    const { dragConstraints, dragElastic } = this.getProps();
    const layout2 = this.visualElement.projection && !this.visualElement.projection.layout ? this.visualElement.projection.measure(false) : (_a3 = this.visualElement.projection) === null || _a3 === void 0 ? void 0 : _a3.layout;
    const prevConstraints = this.constraints;
    if (dragConstraints && isRefObject(dragConstraints)) {
      if (!this.constraints) {
        this.constraints = this.resolveRefConstraints();
      }
    } else {
      if (dragConstraints && layout2) {
        this.constraints = calcRelativeConstraints(layout2.layoutBox, dragConstraints);
      } else {
        this.constraints = false;
      }
    }
    this.elastic = resolveDragElastic(dragElastic);
    if (prevConstraints !== this.constraints && layout2 && this.constraints && !this.hasMutatedConstraints) {
      eachAxis((axis) => {
        if (this.getAxisMotionValue(axis)) {
          this.constraints[axis] = rebaseAxisConstraints(layout2.layoutBox[axis], this.constraints[axis]);
        }
      });
    }
  }
  resolveRefConstraints() {
    const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();
    if (!constraints || !isRefObject(constraints))
      return false;
    const constraintsElement = constraints.current;
    invariant(constraintsElement !== null, "If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.");
    const { projection } = this.visualElement;
    if (!projection || !projection.layout)
      return false;
    const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());
    let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);
    if (onMeasureDragConstraints) {
      const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));
      this.hasMutatedConstraints = !!userConstraints;
      if (userConstraints) {
        measuredConstraints = convertBoundingBoxToBox(userConstraints);
      }
    }
    return measuredConstraints;
  }
  startAnimation(velocity) {
    const { drag: drag2, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd } = this.getProps();
    const constraints = this.constraints || {};
    const momentumAnimations = eachAxis((axis) => {
      if (!shouldDrag(axis, drag2, this.currentDirection)) {
        return;
      }
      let transition = constraints && constraints[axis] || {};
      if (dragSnapToOrigin)
        transition = { min: 0, max: 0 };
      const bounceStiffness = dragElastic ? 200 : 1e6;
      const bounceDamping = dragElastic ? 40 : 1e7;
      const inertia2 = {
        type: "inertia",
        velocity: dragMomentum ? velocity[axis] : 0,
        bounceStiffness,
        bounceDamping,
        timeConstant: 750,
        restDelta: 1,
        restSpeed: 10,
        ...dragTransition,
        ...transition
      };
      return this.startAxisValueAnimation(axis, inertia2);
    });
    return Promise.all(momentumAnimations).then(onDragTransitionEnd);
  }
  startAxisValueAnimation(axis, transition) {
    const axisValue = this.getAxisMotionValue(axis);
    return axisValue.start(animateMotionValue(axis, axisValue, 0, transition));
  }
  stopAnimation() {
    eachAxis((axis) => this.getAxisMotionValue(axis).stop());
  }
  pauseAnimation() {
    eachAxis((axis) => {
      var _a3;
      return (_a3 = this.getAxisMotionValue(axis).animation) === null || _a3 === void 0 ? void 0 : _a3.pause();
    });
  }
  getAnimationState(axis) {
    var _a3;
    return (_a3 = this.getAxisMotionValue(axis).animation) === null || _a3 === void 0 ? void 0 : _a3.state;
  }
  /**
   * Drag works differently depending on which props are provided.
   *
   * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.
   * - Otherwise, we apply the delta to the x/y motion values.
   */
  getAxisMotionValue(axis) {
    const dragKey = "_drag" + axis.toUpperCase();
    const props = this.visualElement.getProps();
    const externalMotionValue = props[dragKey];
    return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : void 0) || 0);
  }
  snapToCursor(point) {
    eachAxis((axis) => {
      const { drag: drag2 } = this.getProps();
      if (!shouldDrag(axis, drag2, this.currentDirection))
        return;
      const { projection } = this.visualElement;
      const axisValue = this.getAxisMotionValue(axis);
      if (projection && projection.layout) {
        const { min, max } = projection.layout.layoutBox[axis];
        axisValue.set(point[axis] - mix(min, max, 0.5));
      }
    });
  }
  /**
   * When the viewport resizes we want to check if the measured constraints
   * have changed and, if so, reposition the element within those new constraints
   * relative to where it was before the resize.
   */
  scalePositionWithinConstraints() {
    if (!this.visualElement.current)
      return;
    const { drag: drag2, dragConstraints } = this.getProps();
    const { projection } = this.visualElement;
    if (!isRefObject(dragConstraints) || !projection || !this.constraints)
      return;
    this.stopAnimation();
    const boxProgress = { x: 0, y: 0 };
    eachAxis((axis) => {
      const axisValue = this.getAxisMotionValue(axis);
      if (axisValue) {
        const latest = axisValue.get();
        boxProgress[axis] = calcOrigin2({ min: latest, max: latest }, this.constraints[axis]);
      }
    });
    const { transformTemplate } = this.visualElement.getProps();
    this.visualElement.current.style.transform = transformTemplate ? transformTemplate({}, "") : "none";
    projection.root && projection.root.updateScroll();
    projection.updateLayout();
    this.resolveConstraints();
    eachAxis((axis) => {
      if (!shouldDrag(axis, drag2, null))
        return;
      const axisValue = this.getAxisMotionValue(axis);
      const { min, max } = this.constraints[axis];
      axisValue.set(mix(min, max, boxProgress[axis]));
    });
  }
  addListeners() {
    if (!this.visualElement.current)
      return;
    elementDragControls.set(this.visualElement, this);
    const element = this.visualElement.current;
    const stopPointerListener = addPointerEvent(element, "pointerdown", (event) => {
      const { drag: drag2, dragListener = true } = this.getProps();
      drag2 && dragListener && this.start(event);
    });
    const measureDragConstraints = () => {
      const { dragConstraints } = this.getProps();
      if (isRefObject(dragConstraints)) {
        this.constraints = this.resolveRefConstraints();
      }
    };
    const { projection } = this.visualElement;
    const stopMeasureLayoutListener = projection.addEventListener("measure", measureDragConstraints);
    if (projection && !projection.layout) {
      projection.root && projection.root.updateScroll();
      projection.updateLayout();
    }
    measureDragConstraints();
    const stopResizeListener = addDomEvent(window, "resize", () => this.scalePositionWithinConstraints());
    const stopLayoutUpdateListener = projection.addEventListener("didUpdate", ({ delta, hasLayoutChanged }) => {
      if (this.isDragging && hasLayoutChanged) {
        eachAxis((axis) => {
          const motionValue2 = this.getAxisMotionValue(axis);
          if (!motionValue2)
            return;
          this.originPoint[axis] += delta[axis].translate;
          motionValue2.set(motionValue2.get() + delta[axis].translate);
        });
        this.visualElement.render();
      }
    });
    return () => {
      stopResizeListener();
      stopPointerListener();
      stopMeasureLayoutListener();
      stopLayoutUpdateListener && stopLayoutUpdateListener();
    };
  }
  getProps() {
    const props = this.visualElement.getProps();
    const { drag: drag2 = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true } = props;
    return {
      ...props,
      drag: drag2,
      dragDirectionLock,
      dragPropagation,
      dragConstraints,
      dragElastic,
      dragMomentum
    };
  }
};
function shouldDrag(direction, drag2, currentDirection) {
  return (drag2 === true || drag2 === direction) && (currentDirection === null || currentDirection === direction);
}
function getCurrentDirection(offset2, lockThreshold = 10) {
  let direction = null;
  if (Math.abs(offset2.y) > lockThreshold) {
    direction = "y";
  } else if (Math.abs(offset2.x) > lockThreshold) {
    direction = "x";
  }
  return direction;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/gestures/drag/index.mjs
var DragGesture = class extends Feature {
  constructor(node) {
    super(node);
    this.removeGroupControls = noop;
    this.removeListeners = noop;
    this.controls = new VisualElementDragControls(node);
  }
  mount() {
    const { dragControls } = this.node.getProps();
    if (dragControls) {
      this.removeGroupControls = dragControls.subscribe(this.controls);
    }
    this.removeListeners = this.controls.addListeners() || noop;
  }
  unmount() {
    this.removeGroupControls();
    this.removeListeners();
  }
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/gestures/pan/index.mjs
var asyncHandler = (handler) => (event, info) => {
  if (handler) {
    frame.update(() => handler(event, info));
  }
};
var PanGesture = class extends Feature {
  constructor() {
    super(...arguments);
    this.removePointerDownListener = noop;
  }
  onPointerDown(pointerDownEvent) {
    this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), {
      transformPagePoint: this.node.getTransformPagePoint(),
      contextWindow: getContextWindow(this.node)
    });
  }
  createPanHandlers() {
    const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();
    return {
      onSessionStart: asyncHandler(onPanSessionStart),
      onStart: asyncHandler(onPanStart),
      onMove: onPan,
      onEnd: (event, info) => {
        delete this.session;
        if (onPanEnd) {
          frame.update(() => onPanEnd(event, info));
        }
      }
    };
  }
  mount() {
    this.removePointerDownListener = addPointerEvent(this.node.current, "pointerdown", (event) => this.onPointerDown(event));
  }
  update() {
    this.session && this.session.updateHandlers(this.createPanHandlers());
  }
  unmount() {
    this.removePointerDownListener();
    this.session && this.session.end();
  }
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs
var import_react20 = __toESM(require_react(), 1);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs
var import_react19 = __toESM(require_react(), 1);
function usePresence() {
  const context = (0, import_react19.useContext)(PresenceContext);
  if (context === null)
    return [true, null];
  const { isPresent, onExitComplete, register } = context;
  const id3 = (0, import_react19.useId)();
  (0, import_react19.useEffect)(() => register(id3), []);
  const safeToRemove = () => onExitComplete && onExitComplete(id3);
  return !isPresent && onExitComplete ? [false, safeToRemove] : [true];
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/projection/node/state.mjs
var globalProjectionState = {
  /**
   * Global flag as to whether the tree has animated since the last time
   * we resized the window
   */
  hasAnimatedSinceResize: true,
  /**
   * We set this to true once, on the first update. Any nodes added to the tree beyond that
   * update will be given a `data-projection-id` attribute.
   */
  hasEverUpdated: false
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs
function pixelsToPercent(pixels, axis) {
  if (axis.max === axis.min)
    return 0;
  return pixels / (axis.max - axis.min) * 100;
}
var correctBorderRadius = {
  correct: (latest, node) => {
    if (!node.target)
      return latest;
    if (typeof latest === "string") {
      if (px.test(latest)) {
        latest = parseFloat(latest);
      } else {
        return latest;
      }
    }
    const x = pixelsToPercent(latest, node.target.x);
    const y = pixelsToPercent(latest, node.target.y);
    return `${x}% ${y}%`;
  }
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs
var correctBoxShadow = {
  correct: (latest, { treeScale, projectionDelta }) => {
    const original = latest;
    const shadow = complex.parse(latest);
    if (shadow.length > 5)
      return original;
    const template = complex.createTransformer(latest);
    const offset2 = typeof shadow[0] !== "number" ? 1 : 0;
    const xScale = projectionDelta.x.scale * treeScale.x;
    const yScale = projectionDelta.y.scale * treeScale.y;
    shadow[0 + offset2] /= xScale;
    shadow[1 + offset2] /= yScale;
    const averageScale = mix(xScale, yScale, 0.5);
    if (typeof shadow[2 + offset2] === "number")
      shadow[2 + offset2] /= averageScale;
    if (typeof shadow[3 + offset2] === "number")
      shadow[3 + offset2] /= averageScale;
    return template(shadow);
  }
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs
var MeasureLayoutWithContext = class extends import_react20.default.Component {
  /**
   * This only mounts projection nodes for components that
   * need measuring, we might want to do it for all components
   * in order to incorporate transforms
   */
  componentDidMount() {
    const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;
    const { projection } = visualElement;
    addScaleCorrector(defaultScaleCorrectors);
    if (projection) {
      if (layoutGroup.group)
        layoutGroup.group.add(projection);
      if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {
        switchLayoutGroup.register(projection);
      }
      projection.root.didUpdate();
      projection.addEventListener("animationComplete", () => {
        this.safeToRemove();
      });
      projection.setOptions({
        ...projection.options,
        onExitComplete: () => this.safeToRemove()
      });
    }
    globalProjectionState.hasEverUpdated = true;
  }
  getSnapshotBeforeUpdate(prevProps) {
    const { layoutDependency, visualElement, drag: drag2, isPresent } = this.props;
    const projection = visualElement.projection;
    if (!projection)
      return null;
    projection.isPresent = isPresent;
    if (drag2 || prevProps.layoutDependency !== layoutDependency || layoutDependency === void 0) {
      projection.willUpdate();
    } else {
      this.safeToRemove();
    }
    if (prevProps.isPresent !== isPresent) {
      if (isPresent) {
        projection.promote();
      } else if (!projection.relegate()) {
        frame.postRender(() => {
          const stack = projection.getStack();
          if (!stack || !stack.members.length) {
            this.safeToRemove();
          }
        });
      }
    }
    return null;
  }
  componentDidUpdate() {
    const { projection } = this.props.visualElement;
    if (projection) {
      projection.root.didUpdate();
      queueMicrotask(() => {
        if (!projection.currentAnimation && projection.isLead()) {
          this.safeToRemove();
        }
      });
    }
  }
  componentWillUnmount() {
    const { visualElement, layoutGroup, switchLayoutGroup: promoteContext } = this.props;
    const { projection } = visualElement;
    if (projection) {
      projection.scheduleCheckAfterUnmount();
      if (layoutGroup && layoutGroup.group)
        layoutGroup.group.remove(projection);
      if (promoteContext && promoteContext.deregister)
        promoteContext.deregister(projection);
    }
  }
  safeToRemove() {
    const { safeToRemove } = this.props;
    safeToRemove && safeToRemove();
  }
  render() {
    return null;
  }
};
function MeasureLayout(props) {
  const [isPresent, safeToRemove] = usePresence();
  const layoutGroup = (0, import_react20.useContext)(LayoutGroupContext);
  return import_react20.default.createElement(MeasureLayoutWithContext, { ...props, layoutGroup, switchLayoutGroup: (0, import_react20.useContext)(SwitchLayoutGroupContext), isPresent, safeToRemove });
}
var defaultScaleCorrectors = {
  borderRadius: {
    ...correctBorderRadius,
    applyTo: [
      "borderTopLeftRadius",
      "borderTopRightRadius",
      "borderBottomLeftRadius",
      "borderBottomRightRadius"
    ]
  },
  borderTopLeftRadius: correctBorderRadius,
  borderTopRightRadius: correctBorderRadius,
  borderBottomLeftRadius: correctBorderRadius,
  borderBottomRightRadius: correctBorderRadius,
  boxShadow: correctBoxShadow
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs
var borders = ["TopLeft", "TopRight", "BottomLeft", "BottomRight"];
var numBorders = borders.length;
var asNumber = (value) => typeof value === "string" ? parseFloat(value) : value;
var isPx = (value) => typeof value === "number" || px.test(value);
function mixValues(target, follow, lead, progress2, shouldCrossfadeOpacity, isOnlyMember) {
  if (shouldCrossfadeOpacity) {
    target.opacity = mix(
      0,
      // TODO Reinstate this if only child
      lead.opacity !== void 0 ? lead.opacity : 1,
      easeCrossfadeIn(progress2)
    );
    target.opacityExit = mix(follow.opacity !== void 0 ? follow.opacity : 1, 0, easeCrossfadeOut(progress2));
  } else if (isOnlyMember) {
    target.opacity = mix(follow.opacity !== void 0 ? follow.opacity : 1, lead.opacity !== void 0 ? lead.opacity : 1, progress2);
  }
  for (let i = 0; i < numBorders; i++) {
    const borderLabel = `border${borders[i]}Radius`;
    let followRadius = getRadius(follow, borderLabel);
    let leadRadius = getRadius(lead, borderLabel);
    if (followRadius === void 0 && leadRadius === void 0)
      continue;
    followRadius || (followRadius = 0);
    leadRadius || (leadRadius = 0);
    const canMix = followRadius === 0 || leadRadius === 0 || isPx(followRadius) === isPx(leadRadius);
    if (canMix) {
      target[borderLabel] = Math.max(mix(asNumber(followRadius), asNumber(leadRadius), progress2), 0);
      if (percent.test(leadRadius) || percent.test(followRadius)) {
        target[borderLabel] += "%";
      }
    } else {
      target[borderLabel] = leadRadius;
    }
  }
  if (follow.rotate || lead.rotate) {
    target.rotate = mix(follow.rotate || 0, lead.rotate || 0, progress2);
  }
}
function getRadius(values, radiusName) {
  return values[radiusName] !== void 0 ? values[radiusName] : values.borderRadius;
}
var easeCrossfadeIn = compress(0, 0.5, circOut);
var easeCrossfadeOut = compress(0.5, 0.95, noop);
function compress(min, max, easing) {
  return (p) => {
    if (p < min)
      return 0;
    if (p > max)
      return 1;
    return easing(progress(min, max, p));
  };
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/projection/geometry/copy.mjs
function copyAxisInto(axis, originAxis) {
  axis.min = originAxis.min;
  axis.max = originAxis.max;
}
function copyBoxInto(box, originBox) {
  copyAxisInto(box.x, originBox.x);
  copyAxisInto(box.y, originBox.y);
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs
function removePointDelta(point, translate, scale2, originPoint, boxScale) {
  point -= translate;
  point = scalePoint(point, 1 / scale2, originPoint);
  if (boxScale !== void 0) {
    point = scalePoint(point, 1 / boxScale, originPoint);
  }
  return point;
}
function removeAxisDelta(axis, translate = 0, scale2 = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {
  if (percent.test(translate)) {
    translate = parseFloat(translate);
    const relativeProgress = mix(sourceAxis.min, sourceAxis.max, translate / 100);
    translate = relativeProgress - sourceAxis.min;
  }
  if (typeof translate !== "number")
    return;
  let originPoint = mix(originAxis.min, originAxis.max, origin);
  if (axis === originAxis)
    originPoint -= translate;
  axis.min = removePointDelta(axis.min, translate, scale2, originPoint, boxScale);
  axis.max = removePointDelta(axis.max, translate, scale2, originPoint, boxScale);
}
function removeAxisTransforms(axis, transforms, [key2, scaleKey, originKey], origin, sourceAxis) {
  removeAxisDelta(axis, transforms[key2], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);
}
var xKeys2 = ["x", "scaleX", "originX"];
var yKeys2 = ["y", "scaleY", "originY"];
function removeBoxTransforms(box, transforms, originBox, sourceBox) {
  removeAxisTransforms(box.x, transforms, xKeys2, originBox ? originBox.x : void 0, sourceBox ? sourceBox.x : void 0);
  removeAxisTransforms(box.y, transforms, yKeys2, originBox ? originBox.y : void 0, sourceBox ? sourceBox.y : void 0);
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/projection/geometry/utils.mjs
function isAxisDeltaZero(delta) {
  return delta.translate === 0 && delta.scale === 1;
}
function isDeltaZero(delta) {
  return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);
}
function boxEquals(a, b) {
  return a.x.min === b.x.min && a.x.max === b.x.max && a.y.min === b.y.min && a.y.max === b.y.max;
}
function boxEqualsRounded(a, b) {
  return Math.round(a.x.min) === Math.round(b.x.min) && Math.round(a.x.max) === Math.round(b.x.max) && Math.round(a.y.min) === Math.round(b.y.min) && Math.round(a.y.max) === Math.round(b.y.max);
}
function aspectRatio(box) {
  return calcLength(box.x) / calcLength(box.y);
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/projection/shared/stack.mjs
var NodeStack = class {
  constructor() {
    this.members = [];
  }
  add(node) {
    addUniqueItem(this.members, node);
    node.scheduleRender();
  }
  remove(node) {
    removeItem(this.members, node);
    if (node === this.prevLead) {
      this.prevLead = void 0;
    }
    if (node === this.lead) {
      const prevLead = this.members[this.members.length - 1];
      if (prevLead) {
        this.promote(prevLead);
      }
    }
  }
  relegate(node) {
    const indexOfNode = this.members.findIndex((member) => node === member);
    if (indexOfNode === 0)
      return false;
    let prevLead;
    for (let i = indexOfNode; i >= 0; i--) {
      const member = this.members[i];
      if (member.isPresent !== false) {
        prevLead = member;
        break;
      }
    }
    if (prevLead) {
      this.promote(prevLead);
      return true;
    } else {
      return false;
    }
  }
  promote(node, preserveFollowOpacity) {
    const prevLead = this.lead;
    if (node === prevLead)
      return;
    this.prevLead = prevLead;
    this.lead = node;
    node.show();
    if (prevLead) {
      prevLead.instance && prevLead.scheduleRender();
      node.scheduleRender();
      node.resumeFrom = prevLead;
      if (preserveFollowOpacity) {
        node.resumeFrom.preserveOpacity = true;
      }
      if (prevLead.snapshot) {
        node.snapshot = prevLead.snapshot;
        node.snapshot.latestValues = prevLead.animationValues || prevLead.latestValues;
      }
      if (node.root && node.root.isUpdating) {
        node.isLayoutDirty = true;
      }
      const { crossfade } = node.options;
      if (crossfade === false) {
        prevLead.hide();
      }
    }
  }
  exitAnimationComplete() {
    this.members.forEach((node) => {
      const { options, resumingFrom } = node;
      options.onExitComplete && options.onExitComplete();
      if (resumingFrom) {
        resumingFrom.options.onExitComplete && resumingFrom.options.onExitComplete();
      }
    });
  }
  scheduleRender() {
    this.members.forEach((node) => {
      node.instance && node.scheduleRender(false);
    });
  }
  /**
   * Clear any leads that have been removed this render to prevent them from being
   * used in future animations and to prevent memory leaks
   */
  removeLeadSnapshot() {
    if (this.lead && this.lead.snapshot) {
      this.lead.snapshot = void 0;
    }
  }
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/projection/styles/transform.mjs
function buildProjectionTransform(delta, treeScale, latestTransform) {
  let transform2 = "";
  const xTranslate = delta.x.translate / treeScale.x;
  const yTranslate = delta.y.translate / treeScale.y;
  if (xTranslate || yTranslate) {
    transform2 = `translate3d(${xTranslate}px, ${yTranslate}px, 0) `;
  }
  if (treeScale.x !== 1 || treeScale.y !== 1) {
    transform2 += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;
  }
  if (latestTransform) {
    const { rotate: rotate2, rotateX, rotateY } = latestTransform;
    if (rotate2)
      transform2 += `rotate(${rotate2}deg) `;
    if (rotateX)
      transform2 += `rotateX(${rotateX}deg) `;
    if (rotateY)
      transform2 += `rotateY(${rotateY}deg) `;
  }
  const elementScaleX = delta.x.scale * treeScale.x;
  const elementScaleY = delta.y.scale * treeScale.y;
  if (elementScaleX !== 1 || elementScaleY !== 1) {
    transform2 += `scale(${elementScaleX}, ${elementScaleY})`;
  }
  return transform2 || "none";
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs
var compareByDepth = (a, b) => a.depth - b.depth;

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs
var FlatTree = class {
  constructor() {
    this.children = [];
    this.isDirty = false;
  }
  add(child) {
    addUniqueItem(this.children, child);
    this.isDirty = true;
  }
  remove(child) {
    removeItem(this.children, child);
    this.isDirty = true;
  }
  forEach(callback) {
    this.isDirty && this.children.sort(compareByDepth);
    this.isDirty = false;
    this.children.forEach(callback);
  }
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/delay.mjs
function delay(callback, timeout) {
  const start = performance.now();
  const checkElapsed = ({ timestamp }) => {
    const elapsed = timestamp - start;
    if (elapsed >= timeout) {
      cancelFrame(checkElapsed);
      callback(elapsed - timeout);
    }
  };
  frame.read(checkElapsed, true);
  return () => cancelFrame(checkElapsed);
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/debug/record.mjs
function record(data) {
  if (window.MotionDebug) {
    window.MotionDebug.record(data);
  }
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/dom/utils/is-svg-element.mjs
function isSVGElement(element) {
  return element instanceof SVGElement && element.tagName !== "svg";
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/animation/interfaces/single-value.mjs
function animateSingleValue(value, keyframes2, options) {
  const motionValue$1 = isMotionValue(value) ? value : motionValue(value);
  motionValue$1.start(animateMotionValue("", motionValue$1, keyframes2, options));
  return motionValue$1.animation;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs
var transformAxes = ["", "X", "Y", "Z"];
var hiddenVisibility = { visibility: "hidden" };
var animationTarget = 1e3;
var id2 = 0;
var projectionFrameData = {
  type: "projectionFrame",
  totalNodes: 0,
  resolvedTargetDeltas: 0,
  recalculatedProjection: 0
};
function createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform }) {
  return class ProjectionNode {
    constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {
      this.id = id2++;
      this.animationId = 0;
      this.children = /* @__PURE__ */ new Set();
      this.options = {};
      this.isTreeAnimating = false;
      this.isAnimationBlocked = false;
      this.isLayoutDirty = false;
      this.isProjectionDirty = false;
      this.isSharedProjectionDirty = false;
      this.isTransformDirty = false;
      this.updateManuallyBlocked = false;
      this.updateBlockedByResize = false;
      this.isUpdating = false;
      this.isSVG = false;
      this.needsReset = false;
      this.shouldResetTransform = false;
      this.treeScale = { x: 1, y: 1 };
      this.eventHandlers = /* @__PURE__ */ new Map();
      this.hasTreeAnimated = false;
      this.updateScheduled = false;
      this.projectionUpdateScheduled = false;
      this.checkUpdateFailed = () => {
        if (this.isUpdating) {
          this.isUpdating = false;
          this.clearAllSnapshots();
        }
      };
      this.updateProjection = () => {
        this.projectionUpdateScheduled = false;
        projectionFrameData.totalNodes = projectionFrameData.resolvedTargetDeltas = projectionFrameData.recalculatedProjection = 0;
        this.nodes.forEach(propagateDirtyNodes);
        this.nodes.forEach(resolveTargetDelta);
        this.nodes.forEach(calcProjection);
        this.nodes.forEach(cleanDirtyNodes);
        record(projectionFrameData);
      };
      this.hasProjected = false;
      this.isVisible = true;
      this.animationProgress = 0;
      this.sharedNodes = /* @__PURE__ */ new Map();
      this.latestValues = latestValues;
      this.root = parent ? parent.root || parent : this;
      this.path = parent ? [...parent.path, parent] : [];
      this.parent = parent;
      this.depth = parent ? parent.depth + 1 : 0;
      for (let i = 0; i < this.path.length; i++) {
        this.path[i].shouldResetTransform = true;
      }
      if (this.root === this)
        this.nodes = new FlatTree();
    }
    addEventListener(name, handler) {
      if (!this.eventHandlers.has(name)) {
        this.eventHandlers.set(name, new SubscriptionManager());
      }
      return this.eventHandlers.get(name).add(handler);
    }
    notifyListeners(name, ...args) {
      const subscriptionManager = this.eventHandlers.get(name);
      subscriptionManager && subscriptionManager.notify(...args);
    }
    hasListeners(name) {
      return this.eventHandlers.has(name);
    }
    /**
     * Lifecycles
     */
    mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {
      if (this.instance)
        return;
      this.isSVG = isSVGElement(instance);
      this.instance = instance;
      const { layoutId, layout: layout2, visualElement } = this.options;
      if (visualElement && !visualElement.current) {
        visualElement.mount(instance);
      }
      this.root.nodes.add(this);
      this.parent && this.parent.children.add(this);
      if (isLayoutDirty && (layout2 || layoutId)) {
        this.isLayoutDirty = true;
      }
      if (attachResizeListener) {
        let cancelDelay;
        const resizeUnblockUpdate = () => this.root.updateBlockedByResize = false;
        attachResizeListener(instance, () => {
          this.root.updateBlockedByResize = true;
          cancelDelay && cancelDelay();
          cancelDelay = delay(resizeUnblockUpdate, 250);
          if (globalProjectionState.hasAnimatedSinceResize) {
            globalProjectionState.hasAnimatedSinceResize = false;
            this.nodes.forEach(finishAnimation);
          }
        });
      }
      if (layoutId) {
        this.root.registerSharedNode(layoutId, this);
      }
      if (this.options.animate !== false && visualElement && (layoutId || layout2)) {
        this.addEventListener("didUpdate", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout }) => {
          if (this.isTreeAnimationBlocked()) {
            this.target = void 0;
            this.relativeTarget = void 0;
            return;
          }
          const layoutTransition = this.options.transition || visualElement.getDefaultTransition() || defaultLayoutTransition;
          const { onLayoutAnimationStart, onLayoutAnimationComplete } = visualElement.getProps();
          const targetChanged = !this.targetLayout || !boxEqualsRounded(this.targetLayout, newLayout) || hasRelativeTargetChanged;
          const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;
          if (this.options.layoutRoot || this.resumeFrom && this.resumeFrom.instance || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !this.currentAnimation)) {
            if (this.resumeFrom) {
              this.resumingFrom = this.resumeFrom;
              this.resumingFrom.resumingFrom = void 0;
            }
            this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);
            const animationOptions = {
              ...getValueTransition(layoutTransition, "layout"),
              onPlay: onLayoutAnimationStart,
              onComplete: onLayoutAnimationComplete
            };
            if (visualElement.shouldReduceMotion || this.options.layoutRoot) {
              animationOptions.delay = 0;
              animationOptions.type = false;
            }
            this.startAnimation(animationOptions);
          } else {
            if (!hasLayoutChanged) {
              finishAnimation(this);
            }
            if (this.isLead() && this.options.onExitComplete) {
              this.options.onExitComplete();
            }
          }
          this.targetLayout = newLayout;
        });
      }
    }
    unmount() {
      this.options.layoutId && this.willUpdate();
      this.root.nodes.remove(this);
      const stack = this.getStack();
      stack && stack.remove(this);
      this.parent && this.parent.children.delete(this);
      this.instance = void 0;
      cancelFrame(this.updateProjection);
    }
    // only on the root
    blockUpdate() {
      this.updateManuallyBlocked = true;
    }
    unblockUpdate() {
      this.updateManuallyBlocked = false;
    }
    isUpdateBlocked() {
      return this.updateManuallyBlocked || this.updateBlockedByResize;
    }
    isTreeAnimationBlocked() {
      return this.isAnimationBlocked || this.parent && this.parent.isTreeAnimationBlocked() || false;
    }
    // Note: currently only running on root node
    startUpdate() {
      if (this.isUpdateBlocked())
        return;
      this.isUpdating = true;
      this.nodes && this.nodes.forEach(resetRotation);
      this.animationId++;
    }
    getTransformTemplate() {
      const { visualElement } = this.options;
      return visualElement && visualElement.getProps().transformTemplate;
    }
    willUpdate(shouldNotifyListeners = true) {
      this.root.hasTreeAnimated = true;
      if (this.root.isUpdateBlocked()) {
        this.options.onExitComplete && this.options.onExitComplete();
        return;
      }
      !this.root.isUpdating && this.root.startUpdate();
      if (this.isLayoutDirty)
        return;
      this.isLayoutDirty = true;
      for (let i = 0; i < this.path.length; i++) {
        const node = this.path[i];
        node.shouldResetTransform = true;
        node.updateScroll("snapshot");
        if (node.options.layoutRoot) {
          node.willUpdate(false);
        }
      }
      const { layoutId, layout: layout2 } = this.options;
      if (layoutId === void 0 && !layout2)
        return;
      const transformTemplate = this.getTransformTemplate();
      this.prevTransformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, "") : void 0;
      this.updateSnapshot();
      shouldNotifyListeners && this.notifyListeners("willUpdate");
    }
    update() {
      this.updateScheduled = false;
      const updateWasBlocked = this.isUpdateBlocked();
      if (updateWasBlocked) {
        this.unblockUpdate();
        this.clearAllSnapshots();
        this.nodes.forEach(clearMeasurements);
        return;
      }
      if (!this.isUpdating) {
        this.nodes.forEach(clearIsLayoutDirty);
      }
      this.isUpdating = false;
      this.nodes.forEach(resetTransformStyle);
      this.nodes.forEach(updateLayout);
      this.nodes.forEach(notifyLayoutUpdate);
      this.clearAllSnapshots();
      const now = performance.now();
      frameData.delta = clamp(0, 1e3 / 60, now - frameData.timestamp);
      frameData.timestamp = now;
      frameData.isProcessing = true;
      steps.update.process(frameData);
      steps.preRender.process(frameData);
      steps.render.process(frameData);
      frameData.isProcessing = false;
    }
    didUpdate() {
      if (!this.updateScheduled) {
        this.updateScheduled = true;
        queueMicrotask(() => this.update());
      }
    }
    clearAllSnapshots() {
      this.nodes.forEach(clearSnapshot);
      this.sharedNodes.forEach(removeLeadSnapshots);
    }
    scheduleUpdateProjection() {
      if (!this.projectionUpdateScheduled) {
        this.projectionUpdateScheduled = true;
        frame.preRender(this.updateProjection, false, true);
      }
    }
    scheduleCheckAfterUnmount() {
      frame.postRender(() => {
        if (this.isLayoutDirty) {
          this.root.didUpdate();
        } else {
          this.root.checkUpdateFailed();
        }
      });
    }
    /**
     * Update measurements
     */
    updateSnapshot() {
      if (this.snapshot || !this.instance)
        return;
      this.snapshot = this.measure();
    }
    updateLayout() {
      if (!this.instance)
        return;
      this.updateScroll();
      if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {
        return;
      }
      if (this.resumeFrom && !this.resumeFrom.instance) {
        for (let i = 0; i < this.path.length; i++) {
          const node = this.path[i];
          node.updateScroll();
        }
      }
      const prevLayout = this.layout;
      this.layout = this.measure(false);
      this.layoutCorrected = createBox();
      this.isLayoutDirty = false;
      this.projectionDelta = void 0;
      this.notifyListeners("measure", this.layout.layoutBox);
      const { visualElement } = this.options;
      visualElement && visualElement.notify("LayoutMeasure", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : void 0);
    }
    updateScroll(phase = "measure") {
      let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);
      if (this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === phase) {
        needsMeasurement = false;
      }
      if (needsMeasurement) {
        this.scroll = {
          animationId: this.root.animationId,
          phase,
          isRoot: checkIsScrollRoot(this.instance),
          offset: measureScroll(this.instance)
        };
      }
    }
    resetTransform() {
      if (!resetTransform)
        return;
      const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;
      const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);
      const transformTemplate = this.getTransformTemplate();
      const transformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, "") : void 0;
      const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;
      if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {
        resetTransform(this.instance, transformTemplateValue);
        this.shouldResetTransform = false;
        this.scheduleRender();
      }
    }
    measure(removeTransform = true) {
      const pageBox = this.measurePageBox();
      let layoutBox = this.removeElementScroll(pageBox);
      if (removeTransform) {
        layoutBox = this.removeTransform(layoutBox);
      }
      roundBox(layoutBox);
      return {
        animationId: this.root.animationId,
        measuredBox: pageBox,
        layoutBox,
        latestValues: {},
        source: this.id
      };
    }
    measurePageBox() {
      const { visualElement } = this.options;
      if (!visualElement)
        return createBox();
      const box = visualElement.measureViewportBox();
      const { scroll: scroll2 } = this.root;
      if (scroll2) {
        translateAxis(box.x, scroll2.offset.x);
        translateAxis(box.y, scroll2.offset.y);
      }
      return box;
    }
    removeElementScroll(box) {
      const boxWithoutScroll = createBox();
      copyBoxInto(boxWithoutScroll, box);
      for (let i = 0; i < this.path.length; i++) {
        const node = this.path[i];
        const { scroll: scroll2, options } = node;
        if (node !== this.root && scroll2 && options.layoutScroll) {
          if (scroll2.isRoot) {
            copyBoxInto(boxWithoutScroll, box);
            const { scroll: rootScroll } = this.root;
            if (rootScroll) {
              translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);
              translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);
            }
          }
          translateAxis(boxWithoutScroll.x, scroll2.offset.x);
          translateAxis(boxWithoutScroll.y, scroll2.offset.y);
        }
      }
      return boxWithoutScroll;
    }
    applyTransform(box, transformOnly = false) {
      const withTransforms = createBox();
      copyBoxInto(withTransforms, box);
      for (let i = 0; i < this.path.length; i++) {
        const node = this.path[i];
        if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {
          transformBox(withTransforms, {
            x: -node.scroll.offset.x,
            y: -node.scroll.offset.y
          });
        }
        if (!hasTransform(node.latestValues))
          continue;
        transformBox(withTransforms, node.latestValues);
      }
      if (hasTransform(this.latestValues)) {
        transformBox(withTransforms, this.latestValues);
      }
      return withTransforms;
    }
    removeTransform(box) {
      const boxWithoutTransform = createBox();
      copyBoxInto(boxWithoutTransform, box);
      for (let i = 0; i < this.path.length; i++) {
        const node = this.path[i];
        if (!node.instance)
          continue;
        if (!hasTransform(node.latestValues))
          continue;
        hasScale(node.latestValues) && node.updateSnapshot();
        const sourceBox = createBox();
        const nodeBox = node.measurePageBox();
        copyBoxInto(sourceBox, nodeBox);
        removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : void 0, sourceBox);
      }
      if (hasTransform(this.latestValues)) {
        removeBoxTransforms(boxWithoutTransform, this.latestValues);
      }
      return boxWithoutTransform;
    }
    setTargetDelta(delta) {
      this.targetDelta = delta;
      this.root.scheduleUpdateProjection();
      this.isProjectionDirty = true;
    }
    setOptions(options) {
      this.options = {
        ...this.options,
        ...options,
        crossfade: options.crossfade !== void 0 ? options.crossfade : true
      };
    }
    clearMeasurements() {
      this.scroll = void 0;
      this.layout = void 0;
      this.snapshot = void 0;
      this.prevTransformTemplateValue = void 0;
      this.targetDelta = void 0;
      this.target = void 0;
      this.isLayoutDirty = false;
    }
    forceRelativeParentToResolveTarget() {
      if (!this.relativeParent)
        return;
      if (this.relativeParent.resolvedRelativeTargetAt !== frameData.timestamp) {
        this.relativeParent.resolveTargetDelta(true);
      }
    }
    resolveTargetDelta(forceRecalculation = false) {
      var _a3;
      const lead = this.getLead();
      this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);
      this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);
      this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);
      const isShared = Boolean(this.resumingFrom) || this !== lead;
      const canSkip = !(forceRecalculation || isShared && this.isSharedProjectionDirty || this.isProjectionDirty || ((_a3 = this.parent) === null || _a3 === void 0 ? void 0 : _a3.isProjectionDirty) || this.attemptToResolveRelativeTarget);
      if (canSkip)
        return;
      const { layout: layout2, layoutId } = this.options;
      if (!this.layout || !(layout2 || layoutId))
        return;
      this.resolvedRelativeTargetAt = frameData.timestamp;
      if (!this.targetDelta && !this.relativeTarget) {
        const relativeParent = this.getClosestProjectingParent();
        if (relativeParent && relativeParent.layout && this.animationProgress !== 1) {
          this.relativeParent = relativeParent;
          this.forceRelativeParentToResolveTarget();
          this.relativeTarget = createBox();
          this.relativeTargetOrigin = createBox();
          calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);
          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
        } else {
          this.relativeParent = this.relativeTarget = void 0;
        }
      }
      if (!this.relativeTarget && !this.targetDelta)
        return;
      if (!this.target) {
        this.target = createBox();
        this.targetWithTransforms = createBox();
      }
      if (this.relativeTarget && this.relativeTargetOrigin && this.relativeParent && this.relativeParent.target) {
        this.forceRelativeParentToResolveTarget();
        calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);
      } else if (this.targetDelta) {
        if (Boolean(this.resumingFrom)) {
          this.target = this.applyTransform(this.layout.layoutBox);
        } else {
          copyBoxInto(this.target, this.layout.layoutBox);
        }
        applyBoxDelta(this.target, this.targetDelta);
      } else {
        copyBoxInto(this.target, this.layout.layoutBox);
      }
      if (this.attemptToResolveRelativeTarget) {
        this.attemptToResolveRelativeTarget = false;
        const relativeParent = this.getClosestProjectingParent();
        if (relativeParent && Boolean(relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !relativeParent.options.layoutScroll && relativeParent.target && this.animationProgress !== 1) {
          this.relativeParent = relativeParent;
          this.forceRelativeParentToResolveTarget();
          this.relativeTarget = createBox();
          this.relativeTargetOrigin = createBox();
          calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);
          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
        } else {
          this.relativeParent = this.relativeTarget = void 0;
        }
      }
      projectionFrameData.resolvedTargetDeltas++;
    }
    getClosestProjectingParent() {
      if (!this.parent || hasScale(this.parent.latestValues) || has2DTranslate(this.parent.latestValues)) {
        return void 0;
      }
      if (this.parent.isProjecting()) {
        return this.parent;
      } else {
        return this.parent.getClosestProjectingParent();
      }
    }
    isProjecting() {
      return Boolean((this.relativeTarget || this.targetDelta || this.options.layoutRoot) && this.layout);
    }
    calcProjection() {
      var _a3;
      const lead = this.getLead();
      const isShared = Boolean(this.resumingFrom) || this !== lead;
      let canSkip = true;
      if (this.isProjectionDirty || ((_a3 = this.parent) === null || _a3 === void 0 ? void 0 : _a3.isProjectionDirty)) {
        canSkip = false;
      }
      if (isShared && (this.isSharedProjectionDirty || this.isTransformDirty)) {
        canSkip = false;
      }
      if (this.resolvedRelativeTargetAt === frameData.timestamp) {
        canSkip = false;
      }
      if (canSkip)
        return;
      const { layout: layout2, layoutId } = this.options;
      this.isTreeAnimating = Boolean(this.parent && this.parent.isTreeAnimating || this.currentAnimation || this.pendingAnimation);
      if (!this.isTreeAnimating) {
        this.targetDelta = this.relativeTarget = void 0;
      }
      if (!this.layout || !(layout2 || layoutId))
        return;
      copyBoxInto(this.layoutCorrected, this.layout.layoutBox);
      const prevTreeScaleX = this.treeScale.x;
      const prevTreeScaleY = this.treeScale.y;
      applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);
      if (lead.layout && !lead.target && (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {
        lead.target = lead.layout.layoutBox;
      }
      const { target } = lead;
      if (!target) {
        if (this.projectionTransform) {
          this.projectionDelta = createDelta();
          this.projectionTransform = "none";
          this.scheduleRender();
        }
        return;
      }
      if (!this.projectionDelta) {
        this.projectionDelta = createDelta();
        this.projectionDeltaWithTransform = createDelta();
      }
      const prevProjectionTransform = this.projectionTransform;
      calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);
      this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);
      if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {
        this.hasProjected = true;
        this.scheduleRender();
        this.notifyListeners("projectionUpdate", target);
      }
      projectionFrameData.recalculatedProjection++;
    }
    hide() {
      this.isVisible = false;
    }
    show() {
      this.isVisible = true;
    }
    scheduleRender(notifyAll = true) {
      this.options.scheduleRender && this.options.scheduleRender();
      if (notifyAll) {
        const stack = this.getStack();
        stack && stack.scheduleRender();
      }
      if (this.resumingFrom && !this.resumingFrom.instance) {
        this.resumingFrom = void 0;
      }
    }
    setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {
      const snapshot = this.snapshot;
      const snapshotLatestValues = snapshot ? snapshot.latestValues : {};
      const mixedValues = { ...this.latestValues };
      const targetDelta = createDelta();
      if (!this.relativeParent || !this.relativeParent.options.layoutRoot) {
        this.relativeTarget = this.relativeTargetOrigin = void 0;
      }
      this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;
      const relativeLayout = createBox();
      const snapshotSource = snapshot ? snapshot.source : void 0;
      const layoutSource = this.layout ? this.layout.source : void 0;
      const isSharedLayoutAnimation = snapshotSource !== layoutSource;
      const stack = this.getStack();
      const isOnlyMember = !stack || stack.members.length <= 1;
      const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));
      this.animationProgress = 0;
      let prevRelativeTarget;
      this.mixTargetDelta = (latest) => {
        const progress2 = latest / 1e3;
        mixAxisDelta(targetDelta.x, delta.x, progress2);
        mixAxisDelta(targetDelta.y, delta.y, progress2);
        this.setTargetDelta(targetDelta);
        if (this.relativeTarget && this.relativeTargetOrigin && this.layout && this.relativeParent && this.relativeParent.layout) {
          calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);
          mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress2);
          if (prevRelativeTarget && boxEquals(this.relativeTarget, prevRelativeTarget)) {
            this.isProjectionDirty = false;
          }
          if (!prevRelativeTarget)
            prevRelativeTarget = createBox();
          copyBoxInto(prevRelativeTarget, this.relativeTarget);
        }
        if (isSharedLayoutAnimation) {
          this.animationValues = mixedValues;
          mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress2, shouldCrossfadeOpacity, isOnlyMember);
        }
        this.root.scheduleUpdateProjection();
        this.scheduleRender();
        this.animationProgress = progress2;
      };
      this.mixTargetDelta(this.options.layoutRoot ? 1e3 : 0);
    }
    startAnimation(options) {
      this.notifyListeners("animationStart");
      this.currentAnimation && this.currentAnimation.stop();
      if (this.resumingFrom && this.resumingFrom.currentAnimation) {
        this.resumingFrom.currentAnimation.stop();
      }
      if (this.pendingAnimation) {
        cancelFrame(this.pendingAnimation);
        this.pendingAnimation = void 0;
      }
      this.pendingAnimation = frame.update(() => {
        globalProjectionState.hasAnimatedSinceResize = true;
        this.currentAnimation = animateSingleValue(0, animationTarget, {
          ...options,
          onUpdate: (latest) => {
            this.mixTargetDelta(latest);
            options.onUpdate && options.onUpdate(latest);
          },
          onComplete: () => {
            options.onComplete && options.onComplete();
            this.completeAnimation();
          }
        });
        if (this.resumingFrom) {
          this.resumingFrom.currentAnimation = this.currentAnimation;
        }
        this.pendingAnimation = void 0;
      });
    }
    completeAnimation() {
      if (this.resumingFrom) {
        this.resumingFrom.currentAnimation = void 0;
        this.resumingFrom.preserveOpacity = void 0;
      }
      const stack = this.getStack();
      stack && stack.exitAnimationComplete();
      this.resumingFrom = this.currentAnimation = this.animationValues = void 0;
      this.notifyListeners("animationComplete");
    }
    finishAnimation() {
      if (this.currentAnimation) {
        this.mixTargetDelta && this.mixTargetDelta(animationTarget);
        this.currentAnimation.stop();
      }
      this.completeAnimation();
    }
    applyTransformsToTarget() {
      const lead = this.getLead();
      let { targetWithTransforms, target, layout: layout2, latestValues } = lead;
      if (!targetWithTransforms || !target || !layout2)
        return;
      if (this !== lead && this.layout && layout2 && shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout2.layoutBox)) {
        target = this.target || createBox();
        const xLength = calcLength(this.layout.layoutBox.x);
        target.x.min = lead.target.x.min;
        target.x.max = target.x.min + xLength;
        const yLength = calcLength(this.layout.layoutBox.y);
        target.y.min = lead.target.y.min;
        target.y.max = target.y.min + yLength;
      }
      copyBoxInto(targetWithTransforms, target);
      transformBox(targetWithTransforms, latestValues);
      calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);
    }
    registerSharedNode(layoutId, node) {
      if (!this.sharedNodes.has(layoutId)) {
        this.sharedNodes.set(layoutId, new NodeStack());
      }
      const stack = this.sharedNodes.get(layoutId);
      stack.add(node);
      const config = node.options.initialPromotionConfig;
      node.promote({
        transition: config ? config.transition : void 0,
        preserveFollowOpacity: config && config.shouldPreserveFollowOpacity ? config.shouldPreserveFollowOpacity(node) : void 0
      });
    }
    isLead() {
      const stack = this.getStack();
      return stack ? stack.lead === this : true;
    }
    getLead() {
      var _a3;
      const { layoutId } = this.options;
      return layoutId ? ((_a3 = this.getStack()) === null || _a3 === void 0 ? void 0 : _a3.lead) || this : this;
    }
    getPrevLead() {
      var _a3;
      const { layoutId } = this.options;
      return layoutId ? (_a3 = this.getStack()) === null || _a3 === void 0 ? void 0 : _a3.prevLead : void 0;
    }
    getStack() {
      const { layoutId } = this.options;
      if (layoutId)
        return this.root.sharedNodes.get(layoutId);
    }
    promote({ needsReset, transition, preserveFollowOpacity } = {}) {
      const stack = this.getStack();
      if (stack)
        stack.promote(this, preserveFollowOpacity);
      if (needsReset) {
        this.projectionDelta = void 0;
        this.needsReset = true;
      }
      if (transition)
        this.setOptions({ transition });
    }
    relegate() {
      const stack = this.getStack();
      if (stack) {
        return stack.relegate(this);
      } else {
        return false;
      }
    }
    resetRotation() {
      const { visualElement } = this.options;
      if (!visualElement)
        return;
      let hasRotate = false;
      const { latestValues } = visualElement;
      if (latestValues.rotate || latestValues.rotateX || latestValues.rotateY || latestValues.rotateZ) {
        hasRotate = true;
      }
      if (!hasRotate)
        return;
      const resetValues = {};
      for (let i = 0; i < transformAxes.length; i++) {
        const key2 = "rotate" + transformAxes[i];
        if (latestValues[key2]) {
          resetValues[key2] = latestValues[key2];
          visualElement.setStaticValue(key2, 0);
        }
      }
      visualElement.render();
      for (const key2 in resetValues) {
        visualElement.setStaticValue(key2, resetValues[key2]);
      }
      visualElement.scheduleRender();
    }
    getProjectionStyles(styleProp) {
      var _a3, _b2;
      if (!this.instance || this.isSVG)
        return void 0;
      if (!this.isVisible) {
        return hiddenVisibility;
      }
      const styles = {
        visibility: ""
      };
      const transformTemplate = this.getTransformTemplate();
      if (this.needsReset) {
        this.needsReset = false;
        styles.opacity = "";
        styles.pointerEvents = resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || "";
        styles.transform = transformTemplate ? transformTemplate(this.latestValues, "") : "none";
        return styles;
      }
      const lead = this.getLead();
      if (!this.projectionDelta || !this.layout || !lead.target) {
        const emptyStyles = {};
        if (this.options.layoutId) {
          emptyStyles.opacity = this.latestValues.opacity !== void 0 ? this.latestValues.opacity : 1;
          emptyStyles.pointerEvents = resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || "";
        }
        if (this.hasProjected && !hasTransform(this.latestValues)) {
          emptyStyles.transform = transformTemplate ? transformTemplate({}, "") : "none";
          this.hasProjected = false;
        }
        return emptyStyles;
      }
      const valuesToRender = lead.animationValues || lead.latestValues;
      this.applyTransformsToTarget();
      styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);
      if (transformTemplate) {
        styles.transform = transformTemplate(valuesToRender, styles.transform);
      }
      const { x, y } = this.projectionDelta;
      styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;
      if (lead.animationValues) {
        styles.opacity = lead === this ? (_b2 = (_a3 = valuesToRender.opacity) !== null && _a3 !== void 0 ? _a3 : this.latestValues.opacity) !== null && _b2 !== void 0 ? _b2 : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;
      } else {
        styles.opacity = lead === this ? valuesToRender.opacity !== void 0 ? valuesToRender.opacity : "" : valuesToRender.opacityExit !== void 0 ? valuesToRender.opacityExit : 0;
      }
      for (const key2 in scaleCorrectors) {
        if (valuesToRender[key2] === void 0)
          continue;
        const { correct, applyTo } = scaleCorrectors[key2];
        const corrected = styles.transform === "none" ? valuesToRender[key2] : correct(valuesToRender[key2], lead);
        if (applyTo) {
          const num = applyTo.length;
          for (let i = 0; i < num; i++) {
            styles[applyTo[i]] = corrected;
          }
        } else {
          styles[key2] = corrected;
        }
      }
      if (this.options.layoutId) {
        styles.pointerEvents = lead === this ? resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || "" : "none";
      }
      return styles;
    }
    clearSnapshot() {
      this.resumeFrom = this.snapshot = void 0;
    }
    // Only run on root
    resetTree() {
      this.root.nodes.forEach((node) => {
        var _a3;
        return (_a3 = node.currentAnimation) === null || _a3 === void 0 ? void 0 : _a3.stop();
      });
      this.root.nodes.forEach(clearMeasurements);
      this.root.sharedNodes.clear();
    }
  };
}
function updateLayout(node) {
  node.updateLayout();
}
function notifyLayoutUpdate(node) {
  var _a3;
  const snapshot = ((_a3 = node.resumeFrom) === null || _a3 === void 0 ? void 0 : _a3.snapshot) || node.snapshot;
  if (node.isLead() && node.layout && snapshot && node.hasListeners("didUpdate")) {
    const { layoutBox: layout2, measuredBox: measuredLayout } = node.layout;
    const { animationType } = node.options;
    const isShared = snapshot.source !== node.layout.source;
    if (animationType === "size") {
      eachAxis((axis) => {
        const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];
        const length = calcLength(axisSnapshot);
        axisSnapshot.min = layout2[axis].min;
        axisSnapshot.max = axisSnapshot.min + length;
      });
    } else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout2)) {
      eachAxis((axis) => {
        const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];
        const length = calcLength(layout2[axis]);
        axisSnapshot.max = axisSnapshot.min + length;
        if (node.relativeTarget && !node.currentAnimation) {
          node.isProjectionDirty = true;
          node.relativeTarget[axis].max = node.relativeTarget[axis].min + length;
        }
      });
    }
    const layoutDelta = createDelta();
    calcBoxDelta(layoutDelta, layout2, snapshot.layoutBox);
    const visualDelta = createDelta();
    if (isShared) {
      calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);
    } else {
      calcBoxDelta(visualDelta, layout2, snapshot.layoutBox);
    }
    const hasLayoutChanged = !isDeltaZero(layoutDelta);
    let hasRelativeTargetChanged = false;
    if (!node.resumeFrom) {
      const relativeParent = node.getClosestProjectingParent();
      if (relativeParent && !relativeParent.resumeFrom) {
        const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;
        if (parentSnapshot && parentLayout) {
          const relativeSnapshot = createBox();
          calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);
          const relativeLayout = createBox();
          calcRelativePosition(relativeLayout, layout2, parentLayout.layoutBox);
          if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {
            hasRelativeTargetChanged = true;
          }
          if (relativeParent.options.layoutRoot) {
            node.relativeTarget = relativeLayout;
            node.relativeTargetOrigin = relativeSnapshot;
            node.relativeParent = relativeParent;
          }
        }
      }
    }
    node.notifyListeners("didUpdate", {
      layout: layout2,
      snapshot,
      delta: visualDelta,
      layoutDelta,
      hasLayoutChanged,
      hasRelativeTargetChanged
    });
  } else if (node.isLead()) {
    const { onExitComplete } = node.options;
    onExitComplete && onExitComplete();
  }
  node.options.transition = void 0;
}
function propagateDirtyNodes(node) {
  projectionFrameData.totalNodes++;
  if (!node.parent)
    return;
  if (!node.isProjecting()) {
    node.isProjectionDirty = node.parent.isProjectionDirty;
  }
  node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty || node.parent.isProjectionDirty || node.parent.isSharedProjectionDirty));
  node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);
}
function cleanDirtyNodes(node) {
  node.isProjectionDirty = node.isSharedProjectionDirty = node.isTransformDirty = false;
}
function clearSnapshot(node) {
  node.clearSnapshot();
}
function clearMeasurements(node) {
  node.clearMeasurements();
}
function clearIsLayoutDirty(node) {
  node.isLayoutDirty = false;
}
function resetTransformStyle(node) {
  const { visualElement } = node.options;
  if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {
    visualElement.notify("BeforeLayoutMeasure");
  }
  node.resetTransform();
}
function finishAnimation(node) {
  node.finishAnimation();
  node.targetDelta = node.relativeTarget = node.target = void 0;
  node.isProjectionDirty = true;
}
function resolveTargetDelta(node) {
  node.resolveTargetDelta();
}
function calcProjection(node) {
  node.calcProjection();
}
function resetRotation(node) {
  node.resetRotation();
}
function removeLeadSnapshots(stack) {
  stack.removeLeadSnapshot();
}
function mixAxisDelta(output, delta, p) {
  output.translate = mix(delta.translate, 0, p);
  output.scale = mix(delta.scale, 1, p);
  output.origin = delta.origin;
  output.originPoint = delta.originPoint;
}
function mixAxis(output, from, to, p) {
  output.min = mix(from.min, to.min, p);
  output.max = mix(from.max, to.max, p);
}
function mixBox(output, from, to, p) {
  mixAxis(output.x, from.x, to.x, p);
  mixAxis(output.y, from.y, to.y, p);
}
function hasOpacityCrossfade(node) {
  return node.animationValues && node.animationValues.opacityExit !== void 0;
}
var defaultLayoutTransition = {
  duration: 0.45,
  ease: [0.4, 0, 0.1, 1]
};
var userAgentContains = (string) => typeof navigator !== "undefined" && navigator.userAgent.toLowerCase().includes(string);
var roundPoint = userAgentContains("applewebkit/") && !userAgentContains("chrome/") ? Math.round : noop;
function roundAxis(axis) {
  axis.min = roundPoint(axis.min);
  axis.max = roundPoint(axis.max);
}
function roundBox(box) {
  roundAxis(box.x);
  roundAxis(box.y);
}
function shouldAnimatePositionOnly(animationType, snapshot, layout2) {
  return animationType === "position" || animationType === "preserve-aspect" && !isNear(aspectRatio(snapshot), aspectRatio(layout2), 0.2);
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs
var DocumentProjectionNode = createProjectionNode({
  attachResizeListener: (ref, notify2) => addDomEvent(ref, "resize", notify2),
  measureScroll: () => ({
    x: document.documentElement.scrollLeft || document.body.scrollLeft,
    y: document.documentElement.scrollTop || document.body.scrollTop
  }),
  checkIsScrollRoot: () => true
});

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs
var rootProjectionNode = {
  current: void 0
};
var HTMLProjectionNode = createProjectionNode({
  measureScroll: (instance) => ({
    x: instance.scrollLeft,
    y: instance.scrollTop
  }),
  defaultParent: () => {
    if (!rootProjectionNode.current) {
      const documentNode = new DocumentProjectionNode({});
      documentNode.mount(window);
      documentNode.setOptions({ layoutScroll: true });
      rootProjectionNode.current = documentNode;
    }
    return rootProjectionNode.current;
  },
  resetTransform: (instance, value) => {
    instance.style.transform = value !== void 0 ? value : "none";
  },
  checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === "fixed")
});

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/motion/features/drag.mjs
var drag = {
  pan: {
    Feature: PanGesture
  },
  drag: {
    Feature: DragGesture,
    ProjectionNode: HTMLProjectionNode,
    MeasureLayout
  }
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs
var splitCSSVariableRegex = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
function parseCSSVariable(current) {
  const match = splitCSSVariableRegex.exec(current);
  if (!match)
    return [,];
  const [, token, fallback] = match;
  return [token, fallback];
}
var maxDepth = 4;
function getVariableValue(current, element, depth = 1) {
  invariant(depth <= maxDepth, `Max CSS variable fallback depth detected in property "${current}". This may indicate a circular fallback dependency.`);
  const [token, fallback] = parseCSSVariable(current);
  if (!token)
    return;
  const resolved = window.getComputedStyle(element).getPropertyValue(token);
  if (resolved) {
    const trimmed = resolved.trim();
    return isNumericalString(trimmed) ? parseFloat(trimmed) : trimmed;
  } else if (isCSSVariableToken(fallback)) {
    return getVariableValue(fallback, element, depth + 1);
  } else {
    return fallback;
  }
}
function resolveCSSVariables(visualElement, { ...target }, transitionEnd) {
  const element = visualElement.current;
  if (!(element instanceof Element))
    return { target, transitionEnd };
  if (transitionEnd) {
    transitionEnd = { ...transitionEnd };
  }
  visualElement.values.forEach((value) => {
    const current = value.get();
    if (!isCSSVariableToken(current))
      return;
    const resolved = getVariableValue(current, element);
    if (resolved)
      value.set(resolved);
  });
  for (const key2 in target) {
    const current = target[key2];
    if (!isCSSVariableToken(current))
      continue;
    const resolved = getVariableValue(current, element);
    if (!resolved)
      continue;
    target[key2] = resolved;
    if (!transitionEnd)
      transitionEnd = {};
    if (transitionEnd[key2] === void 0) {
      transitionEnd[key2] = current;
    }
  }
  return { target, transitionEnd };
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs
var positionalKeys = /* @__PURE__ */ new Set([
  "width",
  "height",
  "top",
  "left",
  "right",
  "bottom",
  "x",
  "y",
  "translateX",
  "translateY"
]);
var isPositionalKey = (key2) => positionalKeys.has(key2);
var hasPositionalKey = (target) => {
  return Object.keys(target).some(isPositionalKey);
};
var isNumOrPxType = (v) => v === number || v === px;
var getPosFromMatrix = (matrix, pos) => parseFloat(matrix.split(", ")[pos]);
var getTranslateFromMatrix = (pos2, pos3) => (_bbox, { transform: transform2 }) => {
  if (transform2 === "none" || !transform2)
    return 0;
  const matrix3d = transform2.match(/^matrix3d\((.+)\)$/);
  if (matrix3d) {
    return getPosFromMatrix(matrix3d[1], pos3);
  } else {
    const matrix = transform2.match(/^matrix\((.+)\)$/);
    if (matrix) {
      return getPosFromMatrix(matrix[1], pos2);
    } else {
      return 0;
    }
  }
};
var transformKeys = /* @__PURE__ */ new Set(["x", "y", "z"]);
var nonTranslationalTransformKeys = transformPropOrder.filter((key2) => !transformKeys.has(key2));
function removeNonTranslationalTransform(visualElement) {
  const removedTransforms = [];
  nonTranslationalTransformKeys.forEach((key2) => {
    const value = visualElement.getValue(key2);
    if (value !== void 0) {
      removedTransforms.push([key2, value.get()]);
      value.set(key2.startsWith("scale") ? 1 : 0);
    }
  });
  if (removedTransforms.length)
    visualElement.render();
  return removedTransforms;
}
var positionalValues = {
  // Dimensions
  width: ({ x }, { paddingLeft = "0", paddingRight = "0" }) => x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight),
  height: ({ y }, { paddingTop = "0", paddingBottom = "0" }) => y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom),
  top: (_bbox, { top }) => parseFloat(top),
  left: (_bbox, { left }) => parseFloat(left),
  bottom: ({ y }, { top }) => parseFloat(top) + (y.max - y.min),
  right: ({ x }, { left }) => parseFloat(left) + (x.max - x.min),
  // Transform
  x: getTranslateFromMatrix(4, 13),
  y: getTranslateFromMatrix(5, 14)
};
positionalValues.translateX = positionalValues.x;
positionalValues.translateY = positionalValues.y;
var convertChangedValueTypes = (target, visualElement, changedKeys) => {
  const originBbox = visualElement.measureViewportBox();
  const element = visualElement.current;
  const elementComputedStyle = getComputedStyle(element);
  const { display } = elementComputedStyle;
  const origin = {};
  if (display === "none") {
    visualElement.setStaticValue("display", target.display || "block");
  }
  changedKeys.forEach((key2) => {
    origin[key2] = positionalValues[key2](originBbox, elementComputedStyle);
  });
  visualElement.render();
  const targetBbox = visualElement.measureViewportBox();
  changedKeys.forEach((key2) => {
    const value = visualElement.getValue(key2);
    value && value.jump(origin[key2]);
    target[key2] = positionalValues[key2](targetBbox, elementComputedStyle);
  });
  return target;
};
var checkAndConvertChangedValueTypes = (visualElement, target, origin = {}, transitionEnd = {}) => {
  target = { ...target };
  transitionEnd = { ...transitionEnd };
  const targetPositionalKeys = Object.keys(target).filter(isPositionalKey);
  let removedTransformValues = [];
  let hasAttemptedToRemoveTransformValues = false;
  const changedValueTypeKeys = [];
  targetPositionalKeys.forEach((key2) => {
    const value = visualElement.getValue(key2);
    if (!visualElement.hasValue(key2))
      return;
    let from = origin[key2];
    let fromType = findDimensionValueType(from);
    const to = target[key2];
    let toType;
    if (isKeyframesTarget(to)) {
      const numKeyframes = to.length;
      const fromIndex = to[0] === null ? 1 : 0;
      from = to[fromIndex];
      fromType = findDimensionValueType(from);
      for (let i = fromIndex; i < numKeyframes; i++) {
        if (to[i] === null)
          break;
        if (!toType) {
          toType = findDimensionValueType(to[i]);
          invariant(toType === fromType || isNumOrPxType(fromType) && isNumOrPxType(toType), "Keyframes must be of the same dimension as the current value");
        } else {
          invariant(findDimensionValueType(to[i]) === toType, "All keyframes must be of the same type");
        }
      }
    } else {
      toType = findDimensionValueType(to);
    }
    if (fromType !== toType) {
      if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {
        const current = value.get();
        if (typeof current === "string") {
          value.set(parseFloat(current));
        }
        if (typeof to === "string") {
          target[key2] = parseFloat(to);
        } else if (Array.isArray(to) && toType === px) {
          target[key2] = to.map(parseFloat);
        }
      } else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) && (toType === null || toType === void 0 ? void 0 : toType.transform) && (from === 0 || to === 0)) {
        if (from === 0) {
          value.set(toType.transform(from));
        } else {
          target[key2] = fromType.transform(to);
        }
      } else {
        if (!hasAttemptedToRemoveTransformValues) {
          removedTransformValues = removeNonTranslationalTransform(visualElement);
          hasAttemptedToRemoveTransformValues = true;
        }
        changedValueTypeKeys.push(key2);
        transitionEnd[key2] = transitionEnd[key2] !== void 0 ? transitionEnd[key2] : target[key2];
        value.jump(to);
      }
    }
  });
  if (changedValueTypeKeys.length) {
    const scrollY = changedValueTypeKeys.indexOf("height") >= 0 ? window.pageYOffset : null;
    const convertedTarget = convertChangedValueTypes(target, visualElement, changedValueTypeKeys);
    if (removedTransformValues.length) {
      removedTransformValues.forEach(([key2, value]) => {
        visualElement.getValue(key2).set(value);
      });
    }
    visualElement.render();
    if (isBrowser && scrollY !== null) {
      window.scrollTo({ top: scrollY });
    }
    return { target: convertedTarget, transitionEnd };
  } else {
    return { target, transitionEnd };
  }
};
function unitConversion(visualElement, target, origin, transitionEnd) {
  return hasPositionalKey(target) ? checkAndConvertChangedValueTypes(visualElement, target, origin, transitionEnd) : { target, transitionEnd };
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.mjs
var parseDomVariant = (visualElement, target, origin, transitionEnd) => {
  const resolved = resolveCSSVariables(visualElement, target, transitionEnd);
  target = resolved.target;
  transitionEnd = resolved.transitionEnd;
  return unitConversion(visualElement, target, origin, transitionEnd);
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs
var prefersReducedMotion = { current: null };
var hasReducedMotionListener = { current: false };

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs
function initPrefersReducedMotion() {
  hasReducedMotionListener.current = true;
  if (!isBrowser)
    return;
  if (window.matchMedia) {
    const motionMediaQuery = window.matchMedia("(prefers-reduced-motion)");
    const setReducedMotionPreferences = () => prefersReducedMotion.current = motionMediaQuery.matches;
    motionMediaQuery.addListener(setReducedMotionPreferences);
    setReducedMotionPreferences();
  } else {
    prefersReducedMotion.current = false;
  }
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/utils/motion-values.mjs
function updateMotionValuesFromProps(element, next, prev) {
  const { willChange } = next;
  for (const key2 in next) {
    const nextValue = next[key2];
    const prevValue = prev[key2];
    if (isMotionValue(nextValue)) {
      element.addValue(key2, nextValue);
      if (isWillChangeMotionValue(willChange)) {
        willChange.add(key2);
      }
      if (true) {
        warnOnce(nextValue.version === "10.18.0", `Attempting to mix Framer Motion versions ${nextValue.version} with 10.18.0 may not work as expected.`);
      }
    } else if (isMotionValue(prevValue)) {
      element.addValue(key2, motionValue(nextValue, { owner: element }));
      if (isWillChangeMotionValue(willChange)) {
        willChange.remove(key2);
      }
    } else if (prevValue !== nextValue) {
      if (element.hasValue(key2)) {
        const existingValue = element.getValue(key2);
        !existingValue.hasAnimated && existingValue.set(nextValue);
      } else {
        const latestValue = element.getStaticValue(key2);
        element.addValue(key2, motionValue(latestValue !== void 0 ? latestValue : nextValue, { owner: element }));
      }
    }
  }
  for (const key2 in prev) {
    if (next[key2] === void 0)
      element.removeValue(key2);
  }
  return next;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/store.mjs
var visualElementStore = /* @__PURE__ */ new WeakMap();

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/VisualElement.mjs
var featureNames = Object.keys(featureDefinitions);
var numFeatures = featureNames.length;
var propEventHandlers = [
  "AnimationStart",
  "AnimationComplete",
  "Update",
  "BeforeLayoutMeasure",
  "LayoutMeasure",
  "LayoutAnimationStart",
  "LayoutAnimationComplete"
];
var numVariantProps = variantProps.length;
var VisualElement = class {
  constructor({ parent, props, presenceContext, reducedMotionConfig, visualState }, options = {}) {
    this.current = null;
    this.children = /* @__PURE__ */ new Set();
    this.isVariantNode = false;
    this.isControllingVariants = false;
    this.shouldReduceMotion = null;
    this.values = /* @__PURE__ */ new Map();
    this.features = {};
    this.valueSubscriptions = /* @__PURE__ */ new Map();
    this.prevMotionValues = {};
    this.events = {};
    this.propEventSubscriptions = {};
    this.notifyUpdate = () => this.notify("Update", this.latestValues);
    this.render = () => {
      if (!this.current)
        return;
      this.triggerBuild();
      this.renderInstance(this.current, this.renderState, this.props.style, this.projection);
    };
    this.scheduleRender = () => frame.render(this.render, false, true);
    const { latestValues, renderState } = visualState;
    this.latestValues = latestValues;
    this.baseTarget = { ...latestValues };
    this.initialValues = props.initial ? { ...latestValues } : {};
    this.renderState = renderState;
    this.parent = parent;
    this.props = props;
    this.presenceContext = presenceContext;
    this.depth = parent ? parent.depth + 1 : 0;
    this.reducedMotionConfig = reducedMotionConfig;
    this.options = options;
    this.isControllingVariants = isControllingVariants(props);
    this.isVariantNode = isVariantNode(props);
    if (this.isVariantNode) {
      this.variantChildren = /* @__PURE__ */ new Set();
    }
    this.manuallyAnimateOnMount = Boolean(parent && parent.current);
    const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {});
    for (const key2 in initialMotionValues) {
      const value = initialMotionValues[key2];
      if (latestValues[key2] !== void 0 && isMotionValue(value)) {
        value.set(latestValues[key2], false);
        if (isWillChangeMotionValue(willChange)) {
          willChange.add(key2);
        }
      }
    }
  }
  /**
   * This method takes React props and returns found MotionValues. For example, HTML
   * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.
   *
   * This isn't an abstract method as it needs calling in the constructor, but it is
   * intended to be one.
   */
  scrapeMotionValuesFromProps(_props, _prevProps) {
    return {};
  }
  mount(instance) {
    this.current = instance;
    visualElementStore.set(instance, this);
    if (this.projection && !this.projection.instance) {
      this.projection.mount(instance);
    }
    if (this.parent && this.isVariantNode && !this.isControllingVariants) {
      this.removeFromVariantTree = this.parent.addVariantChild(this);
    }
    this.values.forEach((value, key2) => this.bindToMotionValue(key2, value));
    if (!hasReducedMotionListener.current) {
      initPrefersReducedMotion();
    }
    this.shouldReduceMotion = this.reducedMotionConfig === "never" ? false : this.reducedMotionConfig === "always" ? true : prefersReducedMotion.current;
    if (true) {
      warnOnce(this.shouldReduceMotion !== true, "You have Reduced Motion enabled on your device. Animations may not appear as expected.");
    }
    if (this.parent)
      this.parent.children.add(this);
    this.update(this.props, this.presenceContext);
  }
  unmount() {
    visualElementStore.delete(this.current);
    this.projection && this.projection.unmount();
    cancelFrame(this.notifyUpdate);
    cancelFrame(this.render);
    this.valueSubscriptions.forEach((remove) => remove());
    this.removeFromVariantTree && this.removeFromVariantTree();
    this.parent && this.parent.children.delete(this);
    for (const key2 in this.events) {
      this.events[key2].clear();
    }
    for (const key2 in this.features) {
      this.features[key2].unmount();
    }
    this.current = null;
  }
  bindToMotionValue(key2, value) {
    const valueIsTransform = transformProps.has(key2);
    const removeOnChange = value.on("change", (latestValue) => {
      this.latestValues[key2] = latestValue;
      this.props.onUpdate && frame.update(this.notifyUpdate, false, true);
      if (valueIsTransform && this.projection) {
        this.projection.isTransformDirty = true;
      }
    });
    const removeOnRenderRequest = value.on("renderRequest", this.scheduleRender);
    this.valueSubscriptions.set(key2, () => {
      removeOnChange();
      removeOnRenderRequest();
    });
  }
  sortNodePosition(other) {
    if (!this.current || !this.sortInstanceNodePosition || this.type !== other.type) {
      return 0;
    }
    return this.sortInstanceNodePosition(this.current, other.current);
  }
  loadFeatures({ children, ...renderedProps }, isStrict, preloadedFeatures2, initialLayoutGroupConfig) {
    let ProjectionNodeConstructor;
    let MeasureLayout2;
    if (preloadedFeatures2 && isStrict) {
      const strictMessage = "You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.";
      renderedProps.ignoreStrict ? warning(false, strictMessage) : invariant(false, strictMessage);
    }
    for (let i = 0; i < numFeatures; i++) {
      const name = featureNames[i];
      const { isEnabled, Feature: FeatureConstructor, ProjectionNode, MeasureLayout: MeasureLayoutComponent } = featureDefinitions[name];
      if (ProjectionNode)
        ProjectionNodeConstructor = ProjectionNode;
      if (isEnabled(renderedProps)) {
        if (!this.features[name] && FeatureConstructor) {
          this.features[name] = new FeatureConstructor(this);
        }
        if (MeasureLayoutComponent) {
          MeasureLayout2 = MeasureLayoutComponent;
        }
      }
    }
    if ((this.type === "html" || this.type === "svg") && !this.projection && ProjectionNodeConstructor) {
      this.projection = new ProjectionNodeConstructor(this.latestValues, this.parent && this.parent.projection);
      const { layoutId, layout: layout2, drag: drag2, dragConstraints, layoutScroll, layoutRoot } = renderedProps;
      this.projection.setOptions({
        layoutId,
        layout: layout2,
        alwaysMeasureLayout: Boolean(drag2) || dragConstraints && isRefObject(dragConstraints),
        visualElement: this,
        scheduleRender: () => this.scheduleRender(),
        /**
         * TODO: Update options in an effect. This could be tricky as it'll be too late
         * to update by the time layout animations run.
         * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,
         * ensuring it gets called if there's no potential layout animations.
         *
         */
        animationType: typeof layout2 === "string" ? layout2 : "both",
        initialPromotionConfig: initialLayoutGroupConfig,
        layoutScroll,
        layoutRoot
      });
    }
    return MeasureLayout2;
  }
  updateFeatures() {
    for (const key2 in this.features) {
      const feature = this.features[key2];
      if (feature.isMounted) {
        feature.update();
      } else {
        feature.mount();
        feature.isMounted = true;
      }
    }
  }
  triggerBuild() {
    this.build(this.renderState, this.latestValues, this.options, this.props);
  }
  /**
   * Measure the current viewport box with or without transforms.
   * Only measures axis-aligned boxes, rotate and skew must be manually
   * removed with a re-render to work.
   */
  measureViewportBox() {
    return this.current ? this.measureInstanceViewportBox(this.current, this.props) : createBox();
  }
  getStaticValue(key2) {
    return this.latestValues[key2];
  }
  setStaticValue(key2, value) {
    this.latestValues[key2] = value;
  }
  /**
   * Make a target animatable by Popmotion. For instance, if we're
   * trying to animate width from 100px to 100vw we need to measure 100vw
   * in pixels to determine what we really need to animate to. This is also
   * pluggable to support Framer's custom value types like Color,
   * and CSS variables.
   */
  makeTargetAnimatable(target, canMutate = true) {
    return this.makeTargetAnimatableFromInstance(target, this.props, canMutate);
  }
  /**
   * Update the provided props. Ensure any newly-added motion values are
   * added to our map, old ones removed, and listeners updated.
   */
  update(props, presenceContext) {
    if (props.transformTemplate || this.props.transformTemplate) {
      this.scheduleRender();
    }
    this.prevProps = this.props;
    this.props = props;
    this.prevPresenceContext = this.presenceContext;
    this.presenceContext = presenceContext;
    for (let i = 0; i < propEventHandlers.length; i++) {
      const key2 = propEventHandlers[i];
      if (this.propEventSubscriptions[key2]) {
        this.propEventSubscriptions[key2]();
        delete this.propEventSubscriptions[key2];
      }
      const listener = props["on" + key2];
      if (listener) {
        this.propEventSubscriptions[key2] = this.on(key2, listener);
      }
    }
    this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps), this.prevMotionValues);
    if (this.handleChildMotionValue) {
      this.handleChildMotionValue();
    }
  }
  getProps() {
    return this.props;
  }
  /**
   * Returns the variant definition with a given name.
   */
  getVariant(name) {
    return this.props.variants ? this.props.variants[name] : void 0;
  }
  /**
   * Returns the defined default transition on this component.
   */
  getDefaultTransition() {
    return this.props.transition;
  }
  getTransformPagePoint() {
    return this.props.transformPagePoint;
  }
  getClosestVariantNode() {
    return this.isVariantNode ? this : this.parent ? this.parent.getClosestVariantNode() : void 0;
  }
  getVariantContext(startAtParent = false) {
    if (startAtParent) {
      return this.parent ? this.parent.getVariantContext() : void 0;
    }
    if (!this.isControllingVariants) {
      const context2 = this.parent ? this.parent.getVariantContext() || {} : {};
      if (this.props.initial !== void 0) {
        context2.initial = this.props.initial;
      }
      return context2;
    }
    const context = {};
    for (let i = 0; i < numVariantProps; i++) {
      const name = variantProps[i];
      const prop = this.props[name];
      if (isVariantLabel(prop) || prop === false) {
        context[name] = prop;
      }
    }
    return context;
  }
  /**
   * Add a child visual element to our set of children.
   */
  addVariantChild(child) {
    const closestVariantNode = this.getClosestVariantNode();
    if (closestVariantNode) {
      closestVariantNode.variantChildren && closestVariantNode.variantChildren.add(child);
      return () => closestVariantNode.variantChildren.delete(child);
    }
  }
  /**
   * Add a motion value and bind it to this visual element.
   */
  addValue(key2, value) {
    if (value !== this.values.get(key2)) {
      this.removeValue(key2);
      this.bindToMotionValue(key2, value);
    }
    this.values.set(key2, value);
    this.latestValues[key2] = value.get();
  }
  /**
   * Remove a motion value and unbind any active subscriptions.
   */
  removeValue(key2) {
    this.values.delete(key2);
    const unsubscribe = this.valueSubscriptions.get(key2);
    if (unsubscribe) {
      unsubscribe();
      this.valueSubscriptions.delete(key2);
    }
    delete this.latestValues[key2];
    this.removeValueFromRenderState(key2, this.renderState);
  }
  /**
   * Check whether we have a motion value for this key
   */
  hasValue(key2) {
    return this.values.has(key2);
  }
  getValue(key2, defaultValue) {
    if (this.props.values && this.props.values[key2]) {
      return this.props.values[key2];
    }
    let value = this.values.get(key2);
    if (value === void 0 && defaultValue !== void 0) {
      value = motionValue(defaultValue, { owner: this });
      this.addValue(key2, value);
    }
    return value;
  }
  /**
   * If we're trying to animate to a previously unencountered value,
   * we need to check for it in our state and as a last resort read it
   * directly from the instance (which might have performance implications).
   */
  readValue(key2) {
    var _a3;
    return this.latestValues[key2] !== void 0 || !this.current ? this.latestValues[key2] : (_a3 = this.getBaseTargetFromProps(this.props, key2)) !== null && _a3 !== void 0 ? _a3 : this.readValueFromInstance(this.current, key2, this.options);
  }
  /**
   * Set the base target to later animate back to. This is currently
   * only hydrated on creation and when we first read a value.
   */
  setBaseTarget(key2, value) {
    this.baseTarget[key2] = value;
  }
  /**
   * Find the base target for a value thats been removed from all animation
   * props.
   */
  getBaseTarget(key2) {
    var _a3;
    const { initial } = this.props;
    const valueFromInitial = typeof initial === "string" || typeof initial === "object" ? (_a3 = resolveVariantFromProps(this.props, initial)) === null || _a3 === void 0 ? void 0 : _a3[key2] : void 0;
    if (initial && valueFromInitial !== void 0) {
      return valueFromInitial;
    }
    const target = this.getBaseTargetFromProps(this.props, key2);
    if (target !== void 0 && !isMotionValue(target))
      return target;
    return this.initialValues[key2] !== void 0 && valueFromInitial === void 0 ? void 0 : this.baseTarget[key2];
  }
  on(eventName, callback) {
    if (!this.events[eventName]) {
      this.events[eventName] = new SubscriptionManager();
    }
    return this.events[eventName].add(callback);
  }
  notify(eventName, ...args) {
    if (this.events[eventName]) {
      this.events[eventName].notify(...args);
    }
  }
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs
var DOMVisualElement = class extends VisualElement {
  sortInstanceNodePosition(a, b) {
    return a.compareDocumentPosition(b) & 2 ? 1 : -1;
  }
  getBaseTargetFromProps(props, key2) {
    return props.style ? props.style[key2] : void 0;
  }
  removeValueFromRenderState(key2, { vars, style }) {
    delete vars[key2];
    delete style[key2];
  }
  makeTargetAnimatableFromInstance({ transition, transitionEnd, ...target }, { transformValues }, isMounted) {
    let origin = getOrigin(target, transition || {}, this);
    if (transformValues) {
      if (transitionEnd)
        transitionEnd = transformValues(transitionEnd);
      if (target)
        target = transformValues(target);
      if (origin)
        origin = transformValues(origin);
    }
    if (isMounted) {
      checkTargetForNewValues(this, target, origin);
      const parsed = parseDomVariant(this, target, origin, transitionEnd);
      transitionEnd = parsed.transitionEnd;
      target = parsed.target;
    }
    return {
      transition,
      transitionEnd,
      ...target
    };
  }
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs
function getComputedStyle2(element) {
  return window.getComputedStyle(element);
}
var HTMLVisualElement = class extends DOMVisualElement {
  constructor() {
    super(...arguments);
    this.type = "html";
  }
  readValueFromInstance(instance, key2) {
    if (transformProps.has(key2)) {
      const defaultType = getDefaultValueType(key2);
      return defaultType ? defaultType.default || 0 : 0;
    } else {
      const computedStyle = getComputedStyle2(instance);
      const value = (isCSSVariableName(key2) ? computedStyle.getPropertyValue(key2) : computedStyle[key2]) || 0;
      return typeof value === "string" ? value.trim() : value;
    }
  }
  measureInstanceViewportBox(instance, { transformPagePoint }) {
    return measureViewportBox(instance, transformPagePoint);
  }
  build(renderState, latestValues, options, props) {
    buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);
  }
  scrapeMotionValuesFromProps(props, prevProps) {
    return scrapeMotionValuesFromProps(props, prevProps);
  }
  handleChildMotionValue() {
    if (this.childSubscription) {
      this.childSubscription();
      delete this.childSubscription;
    }
    const { children } = this.props;
    if (isMotionValue(children)) {
      this.childSubscription = children.on("change", (latest) => {
        if (this.current)
          this.current.textContent = `${latest}`;
      });
    }
  }
  renderInstance(instance, renderState, styleProp, projection) {
    renderHTML(instance, renderState, styleProp, projection);
  }
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs
var SVGVisualElement = class extends DOMVisualElement {
  constructor() {
    super(...arguments);
    this.type = "svg";
    this.isSVGTag = false;
  }
  getBaseTargetFromProps(props, key2) {
    return props[key2];
  }
  readValueFromInstance(instance, key2) {
    if (transformProps.has(key2)) {
      const defaultType = getDefaultValueType(key2);
      return defaultType ? defaultType.default || 0 : 0;
    }
    key2 = !camelCaseAttributes.has(key2) ? camelToDash(key2) : key2;
    return instance.getAttribute(key2);
  }
  measureInstanceViewportBox() {
    return createBox();
  }
  scrapeMotionValuesFromProps(props, prevProps) {
    return scrapeMotionValuesFromProps2(props, prevProps);
  }
  build(renderState, latestValues, options, props) {
    buildSVGAttrs(renderState, latestValues, options, this.isSVGTag, props.transformTemplate);
  }
  renderInstance(instance, renderState, styleProp, projection) {
    renderSVG(instance, renderState, styleProp, projection);
  }
  mount(instance) {
    this.isSVGTag = isSVGTag(instance.tagName);
    super.mount(instance);
  }
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs
var createDomVisualElement = (Component3, options) => {
  return isSVGComponent(Component3) ? new SVGVisualElement(options, { enableHardwareAcceleration: false }) : new HTMLVisualElement(options, { enableHardwareAcceleration: true });
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/motion/features/layout.mjs
var layout = {
  layout: {
    ProjectionNode: HTMLProjectionNode,
    MeasureLayout
  }
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/dom/motion.mjs
var preloadedFeatures = {
  ...animations,
  ...gestureAnimations,
  ...drag,
  ...layout
};
var motion = createMotionProxy((Component3, config) => createDomMotionConfig(Component3, config, preloadedFeatures, createDomVisualElement));

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/dom/motion-minimal.mjs
var m = createMotionProxy(createDomMotionConfig);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs
var React5 = __toESM(require_react(), 1);
var import_react26 = __toESM(require_react(), 1);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/use-force-update.mjs
var import_react22 = __toESM(require_react(), 1);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/use-is-mounted.mjs
var import_react21 = __toESM(require_react(), 1);
function useIsMounted() {
  const isMounted = (0, import_react21.useRef)(false);
  useIsomorphicLayoutEffect(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, []);
  return isMounted;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/use-force-update.mjs
function useForceUpdate() {
  const isMounted = useIsMounted();
  const [forcedRenderCount, setForcedRenderCount] = (0, import_react22.useState)(0);
  const forceRender = (0, import_react22.useCallback)(() => {
    isMounted.current && setForcedRenderCount(forcedRenderCount + 1);
  }, [forcedRenderCount]);
  const deferredForceRender = (0, import_react22.useCallback)(() => frame.postRender(forceRender), [forceRender]);
  return [deferredForceRender, forcedRenderCount];
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs
var React4 = __toESM(require_react(), 1);
var import_react24 = __toESM(require_react(), 1);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/components/AnimatePresence/PopChild.mjs
var React3 = __toESM(require_react(), 1);
var import_react23 = __toESM(require_react(), 1);
var PopChildMeasure = class extends React3.Component {
  getSnapshotBeforeUpdate(prevProps) {
    const element = this.props.childRef.current;
    if (element && prevProps.isPresent && !this.props.isPresent) {
      const size3 = this.props.sizeRef.current;
      size3.height = element.offsetHeight || 0;
      size3.width = element.offsetWidth || 0;
      size3.top = element.offsetTop;
      size3.left = element.offsetLeft;
    }
    return null;
  }
  /**
   * Required with getSnapshotBeforeUpdate to stop React complaining.
   */
  componentDidUpdate() {
  }
  render() {
    return this.props.children;
  }
};
function PopChild({ children, isPresent }) {
  const id3 = (0, import_react23.useId)();
  const ref = (0, import_react23.useRef)(null);
  const size3 = (0, import_react23.useRef)({
    width: 0,
    height: 0,
    top: 0,
    left: 0
  });
  (0, import_react23.useInsertionEffect)(() => {
    const { width, height, top, left } = size3.current;
    if (isPresent || !ref.current || !width || !height)
      return;
    ref.current.dataset.motionPopId = id3;
    const style = document.createElement("style");
    document.head.appendChild(style);
    if (style.sheet) {
      style.sheet.insertRule(`
          [data-motion-pop-id="${id3}"] {
            position: absolute !important;
            width: ${width}px !important;
            height: ${height}px !important;
            top: ${top}px !important;
            left: ${left}px !important;
          }
        `);
    }
    return () => {
      document.head.removeChild(style);
    };
  }, [isPresent]);
  return React3.createElement(PopChildMeasure, { isPresent, childRef: ref, sizeRef: size3 }, React3.cloneElement(children, { ref }));
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs
var PresenceChild = ({ children, initial, isPresent, onExitComplete, custom, presenceAffectsLayout, mode }) => {
  const presenceChildren = useConstant(newChildrenMap);
  const id3 = (0, import_react24.useId)();
  const context = (0, import_react24.useMemo)(
    () => ({
      id: id3,
      initial,
      isPresent,
      custom,
      onExitComplete: (childId) => {
        presenceChildren.set(childId, true);
        for (const isComplete of presenceChildren.values()) {
          if (!isComplete)
            return;
        }
        onExitComplete && onExitComplete();
      },
      register: (childId) => {
        presenceChildren.set(childId, false);
        return () => presenceChildren.delete(childId);
      }
    }),
    /**
     * If the presence of a child affects the layout of the components around it,
     * we want to make a new context value to ensure they get re-rendered
     * so they can detect that layout change.
     */
    presenceAffectsLayout ? void 0 : [isPresent]
  );
  (0, import_react24.useMemo)(() => {
    presenceChildren.forEach((_, key2) => presenceChildren.set(key2, false));
  }, [isPresent]);
  React4.useEffect(() => {
    !isPresent && !presenceChildren.size && onExitComplete && onExitComplete();
  }, [isPresent]);
  if (mode === "popLayout") {
    children = React4.createElement(PopChild, { isPresent }, children);
  }
  return React4.createElement(PresenceContext.Provider, { value: context }, children);
};
function newChildrenMap() {
  return /* @__PURE__ */ new Map();
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/use-unmount-effect.mjs
var import_react25 = __toESM(require_react(), 1);
function useUnmountEffect(callback) {
  return (0, import_react25.useEffect)(() => () => callback(), []);
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs
var getChildKey = (child) => child.key || "";
function updateChildLookup(children, allChildren) {
  children.forEach((child) => {
    const key2 = getChildKey(child);
    allChildren.set(key2, child);
  });
}
function onlyElements(children) {
  const filtered = [];
  import_react26.Children.forEach(children, (child) => {
    if ((0, import_react26.isValidElement)(child))
      filtered.push(child);
  });
  return filtered;
}
var AnimatePresence = ({ children, custom, initial = true, onExitComplete, exitBeforeEnter, presenceAffectsLayout = true, mode = "sync" }) => {
  invariant(!exitBeforeEnter, "Replace exitBeforeEnter with mode='wait'");
  const forceRender = (0, import_react26.useContext)(LayoutGroupContext).forceRender || useForceUpdate()[0];
  const isMounted = useIsMounted();
  const filteredChildren = onlyElements(children);
  let childrenToRender = filteredChildren;
  const exitingChildren = (0, import_react26.useRef)(/* @__PURE__ */ new Map()).current;
  const presentChildren = (0, import_react26.useRef)(childrenToRender);
  const allChildren = (0, import_react26.useRef)(/* @__PURE__ */ new Map()).current;
  const isInitialRender = (0, import_react26.useRef)(true);
  useIsomorphicLayoutEffect(() => {
    isInitialRender.current = false;
    updateChildLookup(filteredChildren, allChildren);
    presentChildren.current = childrenToRender;
  });
  useUnmountEffect(() => {
    isInitialRender.current = true;
    allChildren.clear();
    exitingChildren.clear();
  });
  if (isInitialRender.current) {
    return React5.createElement(React5.Fragment, null, childrenToRender.map((child) => React5.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial ? void 0 : false, presenceAffectsLayout, mode }, child)));
  }
  childrenToRender = [...childrenToRender];
  const presentKeys = presentChildren.current.map(getChildKey);
  const targetKeys = filteredChildren.map(getChildKey);
  const numPresent = presentKeys.length;
  for (let i = 0; i < numPresent; i++) {
    const key2 = presentKeys[i];
    if (targetKeys.indexOf(key2) === -1 && !exitingChildren.has(key2)) {
      exitingChildren.set(key2, void 0);
    }
  }
  if (mode === "wait" && exitingChildren.size) {
    childrenToRender = [];
  }
  exitingChildren.forEach((component, key2) => {
    if (targetKeys.indexOf(key2) !== -1)
      return;
    const child = allChildren.get(key2);
    if (!child)
      return;
    const insertionIndex = presentKeys.indexOf(key2);
    let exitingComponent = component;
    if (!exitingComponent) {
      const onExit = () => {
        exitingChildren.delete(key2);
        const leftOverKeys = Array.from(allChildren.keys()).filter((childKey) => !targetKeys.includes(childKey));
        leftOverKeys.forEach((leftOverKey) => allChildren.delete(leftOverKey));
        presentChildren.current = filteredChildren.filter((presentChild) => {
          const presentChildKey = getChildKey(presentChild);
          return (
            // filter out the node exiting
            presentChildKey === key2 || // filter out the leftover children
            leftOverKeys.includes(presentChildKey)
          );
        });
        if (!exitingChildren.size) {
          if (isMounted.current === false)
            return;
          forceRender();
          onExitComplete && onExitComplete();
        }
      };
      exitingComponent = React5.createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom, presenceAffectsLayout, mode }, child);
      exitingChildren.set(key2, exitingComponent);
    }
    childrenToRender.splice(insertionIndex, 0, exitingComponent);
  });
  childrenToRender = childrenToRender.map((child) => {
    const key2 = child.key;
    return exitingChildren.has(key2) ? child : React5.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout, mode }, child);
  });
  if (mode === "wait" && childrenToRender.length > 1) {
    console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to "wait". This will lead to odd visual behaviour.`);
  }
  return React5.createElement(React5.Fragment, null, exitingChildren.size ? childrenToRender : childrenToRender.map((child) => (0, import_react26.cloneElement)(child)));
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/components/MotionConfig/index.mjs
var React6 = __toESM(require_react(), 1);
var import_react27 = __toESM(require_react(), 1);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/components/LazyMotion/index.mjs
var React7 = __toESM(require_react(), 1);
var import_react28 = __toESM(require_react(), 1);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/components/LayoutGroup/index.mjs
var React8 = __toESM(require_react(), 1);
var import_react30 = __toESM(require_react(), 1);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/context/DeprecatedLayoutGroupContext.mjs
var import_react29 = __toESM(require_react(), 1);
var DeprecatedLayoutGroupContext = (0, import_react29.createContext)(null);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/components/Reorder/Group.mjs
var React9 = __toESM(require_react(), 1);
var import_react32 = __toESM(require_react(), 1);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/context/ReorderContext.mjs
var import_react31 = __toESM(require_react(), 1);
var ReorderContext = (0, import_react31.createContext)(null);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/components/Reorder/utils/check-reorder.mjs
function checkReorder(order, value, offset2, velocity) {
  if (!velocity)
    return order;
  const index2 = order.findIndex((item2) => item2.value === value);
  if (index2 === -1)
    return order;
  const nextOffset = velocity > 0 ? 1 : -1;
  const nextItem = order[index2 + nextOffset];
  if (!nextItem)
    return order;
  const item = order[index2];
  const nextLayout = nextItem.layout;
  const nextItemCenter = mix(nextLayout.min, nextLayout.max, 0.5);
  if (nextOffset === 1 && item.layout.max + offset2 > nextItemCenter || nextOffset === -1 && item.layout.min + offset2 < nextItemCenter) {
    return moveItem(order, index2, index2 + nextOffset);
  }
  return order;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/components/Reorder/Group.mjs
function ReorderGroup({ children, as = "ul", axis = "y", onReorder, values, ...props }, externalRef) {
  const Component3 = useConstant(() => motion(as));
  const order = [];
  const isReordering = (0, import_react32.useRef)(false);
  invariant(Boolean(values), "Reorder.Group must be provided a values prop");
  const context = {
    axis,
    registerItem: (value, layout2) => {
      const idx = order.findIndex((entry) => value === entry.value);
      if (idx !== -1) {
        order[idx].layout = layout2[axis];
      } else {
        order.push({ value, layout: layout2[axis] });
      }
      order.sort(compareMin);
    },
    updateOrder: (item, offset2, velocity) => {
      if (isReordering.current)
        return;
      const newOrder = checkReorder(order, item, offset2, velocity);
      if (order !== newOrder) {
        isReordering.current = true;
        onReorder(newOrder.map(getValue).filter((value) => values.indexOf(value) !== -1));
      }
    }
  };
  (0, import_react32.useEffect)(() => {
    isReordering.current = false;
  });
  return React9.createElement(
    Component3,
    { ...props, ref: externalRef, ignoreStrict: true },
    React9.createElement(ReorderContext.Provider, { value: context }, children)
  );
}
var Group = (0, import_react32.forwardRef)(ReorderGroup);
function getValue(item) {
  return item.value;
}
function compareMin(a, b) {
  return a.layout.min - b.layout.min;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/components/Reorder/Item.mjs
var React10 = __toESM(require_react(), 1);
var import_react34 = __toESM(require_react(), 1);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/value/use-motion-value.mjs
var import_react33 = __toESM(require_react(), 1);
function useMotionValue(initial) {
  const value = useConstant(() => motionValue(initial));
  const { isStatic } = (0, import_react33.useContext)(MotionConfigContext);
  if (isStatic) {
    const [, setLatest] = (0, import_react33.useState)(initial);
    (0, import_react33.useEffect)(() => value.on("change", setLatest), []);
  }
  return value;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/transform.mjs
var isCustomValueType = (v) => {
  return v && typeof v === "object" && v.mix;
};
var getMixer2 = (v) => isCustomValueType(v) ? v.mix : void 0;
function transform(...args) {
  const useImmediate = !Array.isArray(args[0]);
  const argOffset = useImmediate ? 0 : -1;
  const inputValue = args[0 + argOffset];
  const inputRange = args[1 + argOffset];
  const outputRange = args[2 + argOffset];
  const options = args[3 + argOffset];
  const interpolator = interpolate(inputRange, outputRange, {
    mixer: getMixer2(outputRange[0]),
    ...options
  });
  return useImmediate ? interpolator(inputValue) : interpolator;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/value/use-combine-values.mjs
function useCombineMotionValues(values, combineValues) {
  const value = useMotionValue(combineValues());
  const updateValue = () => value.set(combineValues());
  updateValue();
  useIsomorphicLayoutEffect(() => {
    const scheduleUpdate = () => frame.update(updateValue, false, true);
    const subscriptions = values.map((v) => v.on("change", scheduleUpdate));
    return () => {
      subscriptions.forEach((unsubscribe) => unsubscribe());
      cancelFrame(updateValue);
    };
  });
  return value;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/value/use-computed.mjs
function useComputed(compute) {
  collectMotionValues.current = [];
  compute();
  const value = useCombineMotionValues(collectMotionValues.current, compute);
  collectMotionValues.current = void 0;
  return value;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/value/use-transform.mjs
function useTransform(input, inputRangeOrTransformer, outputRange, options) {
  if (typeof input === "function") {
    return useComputed(input);
  }
  const transformer = typeof inputRangeOrTransformer === "function" ? inputRangeOrTransformer : transform(inputRangeOrTransformer, outputRange, options);
  return Array.isArray(input) ? useListTransform(input, transformer) : useListTransform([input], ([latest]) => transformer(latest));
}
function useListTransform(values, transformer) {
  const latest = useConstant(() => []);
  return useCombineMotionValues(values, () => {
    latest.length = 0;
    const numValues = values.length;
    for (let i = 0; i < numValues; i++) {
      latest[i] = values[i].get();
    }
    return transformer(latest);
  });
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/components/Reorder/Item.mjs
function useDefaultMotionValue(value, defaultValue = 0) {
  return isMotionValue(value) ? value : useMotionValue(defaultValue);
}
function ReorderItem({ children, style = {}, value, as = "li", onDrag, layout: layout2 = true, ...props }, externalRef) {
  const Component3 = useConstant(() => motion(as));
  const context = (0, import_react34.useContext)(ReorderContext);
  const point = {
    x: useDefaultMotionValue(style.x),
    y: useDefaultMotionValue(style.y)
  };
  const zIndex = useTransform([point.x, point.y], ([latestX, latestY]) => latestX || latestY ? 1 : "unset");
  invariant(Boolean(context), "Reorder.Item must be a child of Reorder.Group");
  const { axis, registerItem, updateOrder } = context;
  return React10.createElement(Component3, { drag: axis, ...props, dragSnapToOrigin: true, style: { ...style, x: point.x, y: point.y, zIndex }, layout: layout2, onDrag: (event, gesturePoint) => {
    const { velocity } = gesturePoint;
    velocity[axis] && updateOrder(value, point[axis].get(), velocity[axis]);
    onDrag && onDrag(event, gesturePoint);
  }, onLayoutMeasure: (measured) => registerItem(value, measured), ref: externalRef, ignoreStrict: true }, children);
}
var Item = (0, import_react34.forwardRef)(ReorderItem);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/dom/features-animation.mjs
var domAnimation = {
  renderer: createDomVisualElement,
  ...animations,
  ...gestureAnimations
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/dom/features-max.mjs
var domMax = {
  ...domAnimation,
  ...drag,
  ...layout
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/value/use-spring.mjs
var import_react35 = __toESM(require_react(), 1);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/use-motion-value-event.mjs
var import_react36 = __toESM(require_react(), 1);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/value/use-scroll.mjs
var import_react37 = __toESM(require_react(), 1);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/dom/utils/resolve-element.mjs
function resolveElements(elements, scope, selectorCache) {
  var _a3;
  if (typeof elements === "string") {
    let root = document;
    if (scope) {
      invariant(Boolean(scope.current), "Scope provided, but no element detected.");
      root = scope.current;
    }
    if (selectorCache) {
      (_a3 = selectorCache[elements]) !== null && _a3 !== void 0 ? _a3 : selectorCache[elements] = root.querySelectorAll(elements);
      elements = selectorCache[elements];
    } else {
      elements = root.querySelectorAll(elements);
    }
  } else if (elements instanceof Element) {
    elements = [elements];
  }
  return Array.from(elements || []);
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/use-animation-frame.mjs
var import_react38 = __toESM(require_react(), 1);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/reduced-motion/use-reduced-motion.mjs
var import_react39 = __toESM(require_react(), 1);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/reduced-motion/use-reduced-motion-config.mjs
var import_react40 = __toESM(require_react(), 1);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/dom/scroll/observe.mjs
function observeTimeline(update, timeline) {
  let prevProgress;
  const onFrame = () => {
    const { currentTime } = timeline;
    const percentage = currentTime === null ? 0 : currentTime.value;
    const progress2 = percentage / 100;
    if (prevProgress !== progress2) {
      update(progress2);
    }
    prevProgress = progress2;
  };
  frame.update(onFrame, true);
  return () => cancelFrame(onFrame);
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/render/dom/scroll/supports.mjs
var supportsScrollTimeline = memo(() => window.ScrollTimeline !== void 0);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/animation/GroupPlaybackControls.mjs
var GroupPlaybackControls = class {
  constructor(animations2) {
    this.animations = animations2.filter(Boolean);
  }
  then(onResolve, onReject) {
    return Promise.all(this.animations).then(onResolve).catch(onReject);
  }
  /**
   * TODO: Filter out cancelled or stopped animations before returning
   */
  getAll(propName) {
    return this.animations[0][propName];
  }
  setAll(propName, newValue) {
    for (let i = 0; i < this.animations.length; i++) {
      this.animations[i][propName] = newValue;
    }
  }
  attachTimeline(timeline) {
    const cancelAll = this.animations.map((animation2) => {
      if (supportsScrollTimeline() && animation2.attachTimeline) {
        animation2.attachTimeline(timeline);
      } else {
        animation2.pause();
        return observeTimeline((progress2) => {
          animation2.time = animation2.duration * progress2;
        }, timeline);
      }
    });
    return () => {
      cancelAll.forEach((cancelTimeline, i) => {
        if (cancelTimeline)
          cancelTimeline();
        this.animations[i].stop();
      });
    };
  }
  get time() {
    return this.getAll("time");
  }
  set time(time2) {
    this.setAll("time", time2);
  }
  get speed() {
    return this.getAll("speed");
  }
  set speed(speed) {
    this.setAll("speed", speed);
  }
  get duration() {
    let max = 0;
    for (let i = 0; i < this.animations.length; i++) {
      max = Math.max(max, this.animations[i].duration);
    }
    return max;
  }
  runAll(methodName) {
    this.animations.forEach((controls) => controls[methodName]());
  }
  play() {
    this.runAll("play");
  }
  pause() {
    this.runAll("pause");
  }
  stop() {
    this.runAll("stop");
  }
  cancel() {
    this.runAll("cancel");
  }
  complete() {
    this.runAll("complete");
  }
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/animation/utils/is-dom-keyframes.mjs
function isDOMKeyframes(keyframes2) {
  return typeof keyframes2 === "object" && !Array.isArray(keyframes2);
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/animation/utils/create-visual-element.mjs
function createVisualElement(element) {
  const options = {
    presenceContext: null,
    props: {},
    visualState: {
      renderState: {
        transform: {},
        transformOrigin: {},
        style: {},
        vars: {},
        attrs: {}
      },
      latestValues: {}
    }
  };
  const node = isSVGElement(element) ? new SVGVisualElement(options, {
    enableHardwareAcceleration: false
  }) : new HTMLVisualElement(options, {
    enableHardwareAcceleration: true
  });
  node.mount(element);
  visualElementStore.set(element, node);
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/easing/utils/create-generator-easing.mjs
function createGeneratorEasing(options, scale2 = 100) {
  const generator = spring({ keyframes: [0, scale2], ...options });
  const duration = Math.min(calcGeneratorDuration(generator), maxGeneratorDuration);
  return {
    type: "keyframes",
    ease: (progress2) => generator.next(duration * progress2).value / scale2,
    duration: millisecondsToSeconds(duration)
  };
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/animation/sequence/utils/calc-time.mjs
function calcNextTime(current, next, prev, labels) {
  var _a3;
  if (typeof next === "number") {
    return next;
  } else if (next.startsWith("-") || next.startsWith("+")) {
    return Math.max(0, current + parseFloat(next));
  } else if (next === "<") {
    return prev;
  } else {
    return (_a3 = labels.get(next)) !== null && _a3 !== void 0 ? _a3 : current;
  }
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/wrap.mjs
var wrap = (min, max, v) => {
  const rangeSize = max - min;
  return ((v - min) % rangeSize + rangeSize) % rangeSize + min;
};

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/easing/utils/get-easing-for-segment.mjs
function getEasingForSegment(easing, i) {
  return isEasingArray(easing) ? easing[wrap(0, easing.length, i)] : easing;
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/animation/sequence/utils/edit.mjs
function eraseKeyframes(sequence, startTime, endTime) {
  for (let i = 0; i < sequence.length; i++) {
    const keyframe2 = sequence[i];
    if (keyframe2.at > startTime && keyframe2.at < endTime) {
      removeItem(sequence, keyframe2);
      i--;
    }
  }
}
function addKeyframes(sequence, keyframes2, easing, offset2, startTime, endTime) {
  eraseKeyframes(sequence, startTime, endTime);
  for (let i = 0; i < keyframes2.length; i++) {
    sequence.push({
      value: keyframes2[i],
      at: mix(startTime, endTime, offset2[i]),
      easing: getEasingForSegment(easing, i)
    });
  }
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/animation/sequence/utils/sort.mjs
function compareByTime(a, b) {
  if (a.at === b.at) {
    if (a.value === null)
      return 1;
    if (b.value === null)
      return -1;
    return 0;
  } else {
    return a.at - b.at;
  }
}

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/animation/sequence/create.mjs
var defaultSegmentEasing = "easeInOut";
function createAnimationsFromSequence(sequence, { defaultTransition = {}, ...sequenceTransition } = {}, scope) {
  const defaultDuration = defaultTransition.duration || 0.3;
  const animationDefinitions = /* @__PURE__ */ new Map();
  const sequences = /* @__PURE__ */ new Map();
  const elementCache = {};
  const timeLabels = /* @__PURE__ */ new Map();
  let prevTime = 0;
  let currentTime = 0;
  let totalDuration = 0;
  for (let i = 0; i < sequence.length; i++) {
    const segment = sequence[i];
    if (typeof segment === "string") {
      timeLabels.set(segment, currentTime);
      continue;
    } else if (!Array.isArray(segment)) {
      timeLabels.set(segment.name, calcNextTime(currentTime, segment.at, prevTime, timeLabels));
      continue;
    }
    let [subject, keyframes2, transition = {}] = segment;
    if (transition.at !== void 0) {
      currentTime = calcNextTime(currentTime, transition.at, prevTime, timeLabels);
    }
    let maxDuration3 = 0;
    const resolveValueSequence = (valueKeyframes, valueTransition, valueSequence, elementIndex = 0, numElements = 0) => {
      const valueKeyframesAsList = keyframesAsList(valueKeyframes);
      const { delay: delay2 = 0, times = defaultOffset(valueKeyframesAsList), type = "keyframes", ...remainingTransition } = valueTransition;
      let { ease: ease2 = defaultTransition.ease || "easeOut", duration } = valueTransition;
      const calculatedDelay = typeof delay2 === "function" ? delay2(elementIndex, numElements) : delay2;
      const numKeyframes = valueKeyframesAsList.length;
      if (numKeyframes <= 2 && type === "spring") {
        let absoluteDelta = 100;
        if (numKeyframes === 2 && isNumberKeyframesArray(valueKeyframesAsList)) {
          const delta = valueKeyframesAsList[1] - valueKeyframesAsList[0];
          absoluteDelta = Math.abs(delta);
        }
        const springTransition = { ...remainingTransition };
        if (duration !== void 0) {
          springTransition.duration = secondsToMilliseconds(duration);
        }
        const springEasing = createGeneratorEasing(springTransition, absoluteDelta);
        ease2 = springEasing.ease;
        duration = springEasing.duration;
      }
      duration !== null && duration !== void 0 ? duration : duration = defaultDuration;
      const startTime = currentTime + calculatedDelay;
      const targetTime = startTime + duration;
      if (times.length === 1 && times[0] === 0) {
        times[1] = 1;
      }
      const remainder = times.length - valueKeyframesAsList.length;
      remainder > 0 && fillOffset(times, remainder);
      valueKeyframesAsList.length === 1 && valueKeyframesAsList.unshift(null);
      addKeyframes(valueSequence, valueKeyframesAsList, ease2, times, startTime, targetTime);
      maxDuration3 = Math.max(calculatedDelay + duration, maxDuration3);
      totalDuration = Math.max(targetTime, totalDuration);
    };
    if (isMotionValue(subject)) {
      const subjectSequence = getSubjectSequence(subject, sequences);
      resolveValueSequence(keyframes2, transition, getValueSequence("default", subjectSequence));
    } else {
      const elements = resolveElements(subject, scope, elementCache);
      const numElements = elements.length;
      for (let elementIndex = 0; elementIndex < numElements; elementIndex++) {
        keyframes2 = keyframes2;
        transition = transition;
        const element = elements[elementIndex];
        const subjectSequence = getSubjectSequence(element, sequences);
        for (const key2 in keyframes2) {
          resolveValueSequence(keyframes2[key2], getValueTransition2(transition, key2), getValueSequence(key2, subjectSequence), elementIndex, numElements);
        }
      }
    }
    prevTime = currentTime;
    currentTime += maxDuration3;
  }
  sequences.forEach((valueSequences, element) => {
    for (const key2 in valueSequences) {
      const valueSequence = valueSequences[key2];
      valueSequence.sort(compareByTime);
      const keyframes2 = [];
      const valueOffset = [];
      const valueEasing = [];
      for (let i = 0; i < valueSequence.length; i++) {
        const { at, value, easing } = valueSequence[i];
        keyframes2.push(value);
        valueOffset.push(progress(0, totalDuration, at));
        valueEasing.push(easing || "easeOut");
      }
      if (valueOffset[0] !== 0) {
        valueOffset.unshift(0);
        keyframes2.unshift(keyframes2[0]);
        valueEasing.unshift(defaultSegmentEasing);
      }
      if (valueOffset[valueOffset.length - 1] !== 1) {
        valueOffset.push(1);
        keyframes2.push(null);
      }
      if (!animationDefinitions.has(element)) {
        animationDefinitions.set(element, {
          keyframes: {},
          transition: {}
        });
      }
      const definition = animationDefinitions.get(element);
      definition.keyframes[key2] = keyframes2;
      definition.transition[key2] = {
        ...defaultTransition,
        duration: totalDuration,
        ease: valueEasing,
        times: valueOffset,
        ...sequenceTransition
      };
    }
  });
  return animationDefinitions;
}
function getSubjectSequence(subject, sequences) {
  !sequences.has(subject) && sequences.set(subject, {});
  return sequences.get(subject);
}
function getValueSequence(name, sequences) {
  if (!sequences[name])
    sequences[name] = [];
  return sequences[name];
}
function keyframesAsList(keyframes2) {
  return Array.isArray(keyframes2) ? keyframes2 : [keyframes2];
}
function getValueTransition2(transition, key2) {
  return transition[key2] ? { ...transition, ...transition[key2] } : { ...transition };
}
var isNumber = (keyframe2) => typeof keyframe2 === "number";
var isNumberKeyframesArray = (keyframes2) => keyframes2.every(isNumber);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/animation/animate.mjs
function animateElements(elementOrSelector, keyframes2, options, scope) {
  const elements = resolveElements(elementOrSelector, scope);
  const numElements = elements.length;
  invariant(Boolean(numElements), "No valid element provided.");
  const animations2 = [];
  for (let i = 0; i < numElements; i++) {
    const element = elements[i];
    if (!visualElementStore.has(element)) {
      createVisualElement(element);
    }
    const visualElement = visualElementStore.get(element);
    const transition = { ...options };
    if (typeof transition.delay === "function") {
      transition.delay = transition.delay(i, numElements);
    }
    animations2.push(...animateTarget(visualElement, { ...keyframes2, transition }, {}));
  }
  return new GroupPlaybackControls(animations2);
}
var isSequence = (value) => Array.isArray(value) && Array.isArray(value[0]);
function animateSequence(sequence, options, scope) {
  const animations2 = [];
  const animationDefinitions = createAnimationsFromSequence(sequence, options, scope);
  animationDefinitions.forEach(({ keyframes: keyframes2, transition }, subject) => {
    let animation2;
    if (isMotionValue(subject)) {
      animation2 = animateSingleValue(subject, keyframes2.default, transition.default);
    } else {
      animation2 = animateElements(subject, keyframes2, transition);
    }
    animations2.push(animation2);
  });
  return new GroupPlaybackControls(animations2);
}
var createScopedAnimate = (scope) => {
  function scopedAnimate(valueOrElementOrSequence, keyframes2, options) {
    let animation2;
    if (isSequence(valueOrElementOrSequence)) {
      animation2 = animateSequence(valueOrElementOrSequence, keyframes2, scope);
    } else if (isDOMKeyframes(keyframes2)) {
      animation2 = animateElements(valueOrElementOrSequence, keyframes2, options, scope);
    } else {
      animation2 = animateSingleValue(valueOrElementOrSequence, keyframes2, options);
    }
    if (scope) {
      scope.animations.push(animation2);
    }
    return animation2;
  }
  return scopedAnimate;
};
var animate = createScopedAnimate();

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/use-cycle.mjs
var import_react41 = __toESM(require_react(), 1);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/use-in-view.mjs
var import_react42 = __toESM(require_react(), 1);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/events/use-dom-event.mjs
var import_react43 = __toESM(require_react(), 1);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/utils/use-instant-transition.mjs
var import_react44 = __toESM(require_react(), 1);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/projection/use-reset-projection.mjs
var React11 = __toESM(require_react(), 1);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/animation/hooks/use-animated-state.mjs
var import_react45 = __toESM(require_react(), 1);
var createObject = () => ({});
var useVisualState = makeUseVisualState({
  scrapeMotionValuesFromProps: createObject,
  createRenderState: createObject
});

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/value/use-inverted-scale.mjs
var import_react46 = __toESM(require_react(), 1);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/components/AnimateSharedLayout.mjs
var React12 = __toESM(require_react(), 1);

// node_modules/sanity-translations-tab/node_modules/framer-motion/dist/es/frameloop/index-legacy.mjs
var cancelSync = stepsOrder.reduce((acc, key2) => {
  acc[key2] = (process3) => cancelFrame(process3);
  return acc;
}, {});

// node_modules/sanity-translations-tab/node_modules/@sanity/ui/dist/index.esm.js
var EMPTY_ARRAY = [];
var EMPTY_RECORD = {};
var FLOATING_STATIC_SIDES = {
  top: "bottom",
  right: "left",
  bottom: "top",
  left: "right"
};
function _fillCSSObject(keys, value) {
  return keys.reduce((style, key2) => {
    style[key2] = value;
    return style;
  }, {});
}
function rem(pixelValue) {
  if (pixelValue === 0)
    return 0;
  return "".concat(pixelValue / 16, "rem");
}
function _responsive(media, values, callback) {
  const statements = (values == null ? void 0 : values.map(callback)) || [];
  return statements.map((statement, mediaIndex) => {
    if (mediaIndex === 0)
      return statement;
    return {
      ["@media screen and (min-width: ".concat(media[mediaIndex - 1], "px)")]: statement
    };
  });
}
function _getArrayProp(val, defaultVal) {
  if (val === void 0)
    return defaultVal || EMPTY_ARRAY;
  return Array.isArray(val) ? val : [val];
}
function _getResponsiveSpace(theme, props) {
  let spaceIndexes = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : EMPTY_ARRAY;
  if (!Array.isArray(spaceIndexes)) {
    throw new Error("the property must be array of numbers");
  }
  if (spaceIndexes.length === 0) {
    return null;
  }
  return _responsive(theme.sanity.media, spaceIndexes, (spaceIndex) => _fillCSSObject(props, rem(theme.sanity.space[spaceIndex])));
}
function responsiveFont(fontKey, props) {
  const {
    $size,
    $weight,
    theme
  } = props;
  const {
    fonts,
    media
  } = theme.sanity;
  const {
    family,
    sizes,
    weights
  } = fonts[fontKey];
  const fontWeight = $weight && weights[$weight] || weights.regular;
  const defaultSize = sizes[2];
  const base = {
    position: "relative",
    fontFamily: family,
    fontWeight,
    padding: "1px 0",
    margin: 0,
    "&:before": {
      content: '""',
      display: "block",
      height: 0
    },
    "&:after": {
      content: '""',
      display: "block",
      height: 0
    },
    "& > code, & > span": {
      display: "block"
    },
    "&:not([hidden])": {
      display: "block"
    }
  };
  if (!$size) {
    if (!responsiveFont.warned) {
      console.warn("No size specified for responsive font", {
        fontKey,
        $size,
        props,
        base
      });
      responsiveFont.warned = true;
    }
    return [base];
  }
  const resp = _responsive(media, $size, (sizeIndex) => fontSize(sizes[sizeIndex] || defaultSize));
  return [base, ...resp];
}
function fontSize(size3) {
  const {
    ascenderHeight,
    descenderHeight,
    fontSize: fontSize2,
    iconSize,
    letterSpacing,
    lineHeight
  } = size3;
  const negHeight = ascenderHeight + descenderHeight;
  const capHeight = lineHeight - negHeight;
  const iconOffset = (capHeight - iconSize) / 2;
  const customIconSize = Math.floor(fontSize2 * 1.125 / 2) * 2 + 1;
  const customIconOffset = (capHeight - customIconSize) / 2;
  return {
    fontSize: rem(fontSize2),
    lineHeight: "calc(".concat(lineHeight, " / ").concat(fontSize2, ")"),
    letterSpacing: rem(letterSpacing),
    transform: "translateY(".concat(rem(descenderHeight), ")"),
    "&:before": {
      marginTop: "calc(".concat(rem(0 - negHeight), " - 1px)")
    },
    "&:after": {
      marginBottom: "-1px"
    },
    "& svg:not([data-sanity-icon])": {
      fontSize: "calc(".concat(customIconSize, " / 16 * 1rem)"),
      margin: rem(customIconOffset)
    },
    "& [data-sanity-icon]": {
      fontSize: "calc(".concat(iconSize, " / 16 * 1rem)"),
      margin: rem(iconOffset)
    }
  };
}
function responsiveCodeFontStyle(props) {
  return responsiveFont("code", props);
}
function responsiveHeadingFont(props) {
  return responsiveFont("heading", props);
}
function responsiveLabelFont(props) {
  return responsiveFont("label", props);
}
function responsiveTextAlignStyle(props) {
  const {
    theme
  } = props;
  return _responsive(theme.sanity.media, props.$align, (textAlign) => {
    return {
      textAlign
    };
  });
}
function responsiveTextFont(props) {
  return responsiveFont("text", props);
}
function useArrayProp(val, defaultVal) {
  const __perf_hash__ = (0, import_react47.useMemo)(() => JSON.stringify(val != null ? val : defaultVal), [defaultVal, val]);
  return (0, import_react47.useMemo)(
    () => _getArrayProp(val, defaultVal),
    // Improve performance: Keep object identify for a given hash of the value
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [__perf_hash__]
  );
}
function _getElements(element, elementsArg) {
  const ret = [element];
  for (const el of elementsArg) {
    if (Array.isArray(el)) {
      ret.push(...el);
    } else {
      ret.push(el);
    }
  }
  return ret.filter(Boolean);
}
function useClickOutside(listener) {
  let elementsArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : EMPTY_ARRAY;
  let boundaryElement = arguments.length > 2 ? arguments[2] : void 0;
  const [element, setElement] = (0, import_react47.useState)(null);
  const [elements, setElements] = (0, import_react47.useState)(() => _getElements(element, elementsArg));
  const elementsRef = (0, import_react47.useRef)(elements);
  (0, import_react47.useEffect)(() => {
    const prevElements = elementsRef.current;
    const nextElements = _getElements(element, elementsArg);
    if (prevElements.length !== nextElements.length) {
      setElements(nextElements);
      elementsRef.current = nextElements;
      return;
    }
    for (const el of prevElements) {
      if (!nextElements.includes(el)) {
        setElements(nextElements);
        elementsRef.current = nextElements;
        return;
      }
    }
    for (const el of nextElements) {
      if (!prevElements.includes(el)) {
        setElements(nextElements);
        elementsRef.current = nextElements;
        return;
      }
    }
  }, [element, elementsArg]);
  (0, import_react47.useEffect)(() => {
    if (!listener)
      return void 0;
    const handleWindowMouseDown = (evt) => {
      const target = evt.target;
      if (!(target instanceof Node)) {
        return;
      }
      if (boundaryElement && !boundaryElement.contains(target)) {
        return;
      }
      for (const el of elements) {
        if (target === el || el.contains(target)) {
          return;
        }
      }
      listener(evt);
    };
    window.addEventListener("mousedown", handleWindowMouseDown);
    return () => {
      window.removeEventListener("mousedown", handleWindowMouseDown);
    };
  }, [boundaryElement, listener, elements]);
  return setElement;
}
var resizeObservers = [];
var hasActiveObservations = function() {
  return resizeObservers.some(function(ro) {
    return ro.activeTargets.length > 0;
  });
};
var hasSkippedObservations = function() {
  return resizeObservers.some(function(ro) {
    return ro.skippedTargets.length > 0;
  });
};
var msg = "ResizeObserver loop completed with undelivered notifications.";
var deliverResizeLoopError = function() {
  var event;
  if (typeof ErrorEvent === "function") {
    event = new ErrorEvent("error", {
      message: msg
    });
  } else {
    event = document.createEvent("Event");
    event.initEvent("error", false, false);
    event.message = msg;
  }
  window.dispatchEvent(event);
};
var ResizeObserverBoxOptions;
(function(ResizeObserverBoxOptions2) {
  ResizeObserverBoxOptions2["BORDER_BOX"] = "border-box";
  ResizeObserverBoxOptions2["CONTENT_BOX"] = "content-box";
  ResizeObserverBoxOptions2["DEVICE_PIXEL_CONTENT_BOX"] = "device-pixel-content-box";
})(ResizeObserverBoxOptions || (ResizeObserverBoxOptions = {}));
var freeze = function(obj) {
  return Object.freeze(obj);
};
var ResizeObserverSize = function() {
  function ResizeObserverSize2(inlineSize, blockSize) {
    this.inlineSize = inlineSize;
    this.blockSize = blockSize;
    freeze(this);
  }
  return ResizeObserverSize2;
}();
var DOMRectReadOnly = function() {
  function DOMRectReadOnly2(x, y, width, height) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
    this.top = this.y;
    this.left = this.x;
    this.bottom = this.top + this.height;
    this.right = this.left + this.width;
    return freeze(this);
  }
  DOMRectReadOnly2.prototype.toJSON = function() {
    var _a3 = this, x = _a3.x, y = _a3.y, top = _a3.top, right = _a3.right, bottom = _a3.bottom, left = _a3.left, width = _a3.width, height = _a3.height;
    return {
      x,
      y,
      top,
      right,
      bottom,
      left,
      width,
      height
    };
  };
  DOMRectReadOnly2.fromRect = function(rectangle) {
    return new DOMRectReadOnly2(rectangle.x, rectangle.y, rectangle.width, rectangle.height);
  };
  return DOMRectReadOnly2;
}();
var isSVG = function(target) {
  return target instanceof SVGElement && "getBBox" in target;
};
var isHidden = function(target) {
  if (isSVG(target)) {
    var _a3 = target.getBBox(), width = _a3.width, height = _a3.height;
    return !width && !height;
  }
  var _b2 = target, offsetWidth = _b2.offsetWidth, offsetHeight = _b2.offsetHeight;
  return !(offsetWidth || offsetHeight || target.getClientRects().length);
};
var isElement = function(obj) {
  var _a3;
  if (obj instanceof Element) {
    return true;
  }
  var scope = (_a3 = obj === null || obj === void 0 ? void 0 : obj.ownerDocument) === null || _a3 === void 0 ? void 0 : _a3.defaultView;
  return !!(scope && obj instanceof scope.Element);
};
var isReplacedElement = function(target) {
  switch (target.tagName) {
    case "INPUT":
      if (target.type !== "image") {
        break;
      }
    case "VIDEO":
    case "AUDIO":
    case "EMBED":
    case "OBJECT":
    case "CANVAS":
    case "IFRAME":
    case "IMG":
      return true;
  }
  return false;
};
var global$1 = typeof window !== "undefined" ? window : {};
var cache = /* @__PURE__ */ new WeakMap();
var scrollRegexp = /auto|scroll/;
var verticalRegexp = /^tb|vertical/;
var IE = /msie|trident/i.test(global$1.navigator && global$1.navigator.userAgent);
var parseDimension = function(pixel) {
  return parseFloat(pixel || "0");
};
var size$1 = function(inlineSize, blockSize, switchSizes) {
  if (inlineSize === void 0) {
    inlineSize = 0;
  }
  if (blockSize === void 0) {
    blockSize = 0;
  }
  if (switchSizes === void 0) {
    switchSizes = false;
  }
  return new ResizeObserverSize((switchSizes ? blockSize : inlineSize) || 0, (switchSizes ? inlineSize : blockSize) || 0);
};
var zeroBoxes = freeze({
  devicePixelContentBoxSize: size$1(),
  borderBoxSize: size$1(),
  contentBoxSize: size$1(),
  contentRect: new DOMRectReadOnly(0, 0, 0, 0)
});
var calculateBoxSizes = function(target, forceRecalculation) {
  if (forceRecalculation === void 0) {
    forceRecalculation = false;
  }
  if (cache.has(target) && !forceRecalculation) {
    return cache.get(target);
  }
  if (isHidden(target)) {
    cache.set(target, zeroBoxes);
    return zeroBoxes;
  }
  var cs = getComputedStyle(target);
  var svg = isSVG(target) && target.ownerSVGElement && target.getBBox();
  var removePadding = !IE && cs.boxSizing === "border-box";
  var switchSizes = verticalRegexp.test(cs.writingMode || "");
  var canScrollVertically = !svg && scrollRegexp.test(cs.overflowY || "");
  var canScrollHorizontally = !svg && scrollRegexp.test(cs.overflowX || "");
  var paddingTop = svg ? 0 : parseDimension(cs.paddingTop);
  var paddingRight = svg ? 0 : parseDimension(cs.paddingRight);
  var paddingBottom = svg ? 0 : parseDimension(cs.paddingBottom);
  var paddingLeft = svg ? 0 : parseDimension(cs.paddingLeft);
  var borderTop2 = svg ? 0 : parseDimension(cs.borderTopWidth);
  var borderRight2 = svg ? 0 : parseDimension(cs.borderRightWidth);
  var borderBottom2 = svg ? 0 : parseDimension(cs.borderBottomWidth);
  var borderLeft2 = svg ? 0 : parseDimension(cs.borderLeftWidth);
  var horizontalPadding = paddingLeft + paddingRight;
  var verticalPadding = paddingTop + paddingBottom;
  var horizontalBorderArea = borderLeft2 + borderRight2;
  var verticalBorderArea = borderTop2 + borderBottom2;
  var horizontalScrollbarThickness = !canScrollHorizontally ? 0 : target.offsetHeight - verticalBorderArea - target.clientHeight;
  var verticalScrollbarThickness = !canScrollVertically ? 0 : target.offsetWidth - horizontalBorderArea - target.clientWidth;
  var widthReduction = removePadding ? horizontalPadding + horizontalBorderArea : 0;
  var heightReduction = removePadding ? verticalPadding + verticalBorderArea : 0;
  var contentWidth = svg ? svg.width : parseDimension(cs.width) - widthReduction - verticalScrollbarThickness;
  var contentHeight = svg ? svg.height : parseDimension(cs.height) - heightReduction - horizontalScrollbarThickness;
  var borderBoxWidth = contentWidth + horizontalPadding + verticalScrollbarThickness + horizontalBorderArea;
  var borderBoxHeight = contentHeight + verticalPadding + horizontalScrollbarThickness + verticalBorderArea;
  var boxes = freeze({
    devicePixelContentBoxSize: size$1(Math.round(contentWidth * devicePixelRatio), Math.round(contentHeight * devicePixelRatio), switchSizes),
    borderBoxSize: size$1(borderBoxWidth, borderBoxHeight, switchSizes),
    contentBoxSize: size$1(contentWidth, contentHeight, switchSizes),
    contentRect: new DOMRectReadOnly(paddingLeft, paddingTop, contentWidth, contentHeight)
  });
  cache.set(target, boxes);
  return boxes;
};
var calculateBoxSize = function(target, observedBox, forceRecalculation) {
  var _a3 = calculateBoxSizes(target, forceRecalculation), borderBoxSize = _a3.borderBoxSize, contentBoxSize = _a3.contentBoxSize, devicePixelContentBoxSize = _a3.devicePixelContentBoxSize;
  switch (observedBox) {
    case ResizeObserverBoxOptions.DEVICE_PIXEL_CONTENT_BOX:
      return devicePixelContentBoxSize;
    case ResizeObserverBoxOptions.BORDER_BOX:
      return borderBoxSize;
    default:
      return contentBoxSize;
  }
};
var ResizeObserverEntry = function() {
  function ResizeObserverEntry2(target) {
    var boxes = calculateBoxSizes(target);
    this.target = target;
    this.contentRect = boxes.contentRect;
    this.borderBoxSize = freeze([boxes.borderBoxSize]);
    this.contentBoxSize = freeze([boxes.contentBoxSize]);
    this.devicePixelContentBoxSize = freeze([boxes.devicePixelContentBoxSize]);
  }
  return ResizeObserverEntry2;
}();
var calculateDepthForNode = function(node) {
  if (isHidden(node)) {
    return Infinity;
  }
  var depth = 0;
  var parent = node.parentNode;
  while (parent) {
    depth += 1;
    parent = parent.parentNode;
  }
  return depth;
};
var broadcastActiveObservations = function() {
  var shallowestDepth = Infinity;
  var callbacks2 = [];
  resizeObservers.forEach(function processObserver(ro) {
    if (ro.activeTargets.length === 0) {
      return;
    }
    var entries = [];
    ro.activeTargets.forEach(function processTarget(ot) {
      var entry = new ResizeObserverEntry(ot.target);
      var targetDepth = calculateDepthForNode(ot.target);
      entries.push(entry);
      ot.lastReportedSize = calculateBoxSize(ot.target, ot.observedBox);
      if (targetDepth < shallowestDepth) {
        shallowestDepth = targetDepth;
      }
    });
    callbacks2.push(function resizeObserverCallback() {
      ro.callback.call(ro.observer, entries, ro.observer);
    });
    ro.activeTargets.splice(0, ro.activeTargets.length);
  });
  for (var _i = 0, callbacks_1 = callbacks2; _i < callbacks_1.length; _i++) {
    var callback = callbacks_1[_i];
    callback();
  }
  return shallowestDepth;
};
var gatherActiveObservationsAtDepth = function(depth) {
  resizeObservers.forEach(function processObserver(ro) {
    ro.activeTargets.splice(0, ro.activeTargets.length);
    ro.skippedTargets.splice(0, ro.skippedTargets.length);
    ro.observationTargets.forEach(function processTarget(ot) {
      if (ot.isActive()) {
        if (calculateDepthForNode(ot.target) > depth) {
          ro.activeTargets.push(ot);
        } else {
          ro.skippedTargets.push(ot);
        }
      }
    });
  });
};
var process2 = function() {
  var depth = 0;
  gatherActiveObservationsAtDepth(depth);
  while (hasActiveObservations()) {
    depth = broadcastActiveObservations();
    gatherActiveObservationsAtDepth(depth);
  }
  if (hasSkippedObservations()) {
    deliverResizeLoopError();
  }
  return depth > 0;
};
var trigger;
var callbacks = [];
var notify = function() {
  return callbacks.splice(0).forEach(function(cb) {
    return cb();
  });
};
var queueMicroTask = function(callback) {
  if (!trigger) {
    var toggle_1 = 0;
    var el_1 = document.createTextNode("");
    var config = {
      characterData: true
    };
    new MutationObserver(function() {
      return notify();
    }).observe(el_1, config);
    trigger = function() {
      el_1.textContent = "".concat(toggle_1 ? toggle_1-- : toggle_1++);
    };
  }
  callbacks.push(callback);
  trigger();
};
var queueResizeObserver = function(cb) {
  queueMicroTask(function ResizeObserver3() {
    requestAnimationFrame(cb);
  });
};
var watching = 0;
var isWatching = function() {
  return !!watching;
};
var CATCH_PERIOD = 250;
var observerConfig = {
  attributes: true,
  characterData: true,
  childList: true,
  subtree: true
};
var events = ["resize", "load", "transitionend", "animationend", "animationstart", "animationiteration", "keyup", "keydown", "mouseup", "mousedown", "mouseover", "mouseout", "blur", "focus"];
var time = function(timeout) {
  if (timeout === void 0) {
    timeout = 0;
  }
  return Date.now() + timeout;
};
var scheduled = false;
var Scheduler = function() {
  function Scheduler2() {
    var _this = this;
    this.stopped = true;
    this.listener = function() {
      return _this.schedule();
    };
  }
  Scheduler2.prototype.run = function(timeout) {
    var _this = this;
    if (timeout === void 0) {
      timeout = CATCH_PERIOD;
    }
    if (scheduled) {
      return;
    }
    scheduled = true;
    var until = time(timeout);
    queueResizeObserver(function() {
      var elementsHaveResized = false;
      try {
        elementsHaveResized = process2();
      } finally {
        scheduled = false;
        timeout = until - time();
        if (!isWatching()) {
          return;
        }
        if (elementsHaveResized) {
          _this.run(1e3);
        } else if (timeout > 0) {
          _this.run(timeout);
        } else {
          _this.start();
        }
      }
    });
  };
  Scheduler2.prototype.schedule = function() {
    this.stop();
    this.run();
  };
  Scheduler2.prototype.observe = function() {
    var _this = this;
    var cb = function() {
      return _this.observer && _this.observer.observe(document.body, observerConfig);
    };
    document.body ? cb() : global$1.addEventListener("DOMContentLoaded", cb);
  };
  Scheduler2.prototype.start = function() {
    var _this = this;
    if (this.stopped) {
      this.stopped = false;
      this.observer = new MutationObserver(this.listener);
      this.observe();
      events.forEach(function(name) {
        return global$1.addEventListener(name, _this.listener, true);
      });
    }
  };
  Scheduler2.prototype.stop = function() {
    var _this = this;
    if (!this.stopped) {
      this.observer && this.observer.disconnect();
      events.forEach(function(name) {
        return global$1.removeEventListener(name, _this.listener, true);
      });
      this.stopped = true;
    }
  };
  return Scheduler2;
}();
var scheduler = new Scheduler();
var updateCount = function(n) {
  !watching && n > 0 && scheduler.start();
  watching += n;
  !watching && scheduler.stop();
};
var skipNotifyOnElement = function(target) {
  return !isSVG(target) && !isReplacedElement(target) && getComputedStyle(target).display === "inline";
};
var ResizeObservation = function() {
  function ResizeObservation2(target, observedBox) {
    this.target = target;
    this.observedBox = observedBox || ResizeObserverBoxOptions.CONTENT_BOX;
    this.lastReportedSize = {
      inlineSize: 0,
      blockSize: 0
    };
  }
  ResizeObservation2.prototype.isActive = function() {
    var size3 = calculateBoxSize(this.target, this.observedBox, true);
    if (skipNotifyOnElement(this.target)) {
      this.lastReportedSize = size3;
    }
    if (this.lastReportedSize.inlineSize !== size3.inlineSize || this.lastReportedSize.blockSize !== size3.blockSize) {
      return true;
    }
    return false;
  };
  return ResizeObservation2;
}();
var ResizeObserverDetail = function() {
  function ResizeObserverDetail2(resizeObserver, callback) {
    this.activeTargets = [];
    this.skippedTargets = [];
    this.observationTargets = [];
    this.observer = resizeObserver;
    this.callback = callback;
  }
  return ResizeObserverDetail2;
}();
var observerMap = /* @__PURE__ */ new WeakMap();
var getObservationIndex = function(observationTargets, target) {
  for (var i = 0; i < observationTargets.length; i += 1) {
    if (observationTargets[i].target === target) {
      return i;
    }
  }
  return -1;
};
var ResizeObserverController = function() {
  function ResizeObserverController2() {
  }
  ResizeObserverController2.connect = function(resizeObserver, callback) {
    var detail = new ResizeObserverDetail(resizeObserver, callback);
    observerMap.set(resizeObserver, detail);
  };
  ResizeObserverController2.observe = function(resizeObserver, target, options) {
    var detail = observerMap.get(resizeObserver);
    var firstObservation = detail.observationTargets.length === 0;
    if (getObservationIndex(detail.observationTargets, target) < 0) {
      firstObservation && resizeObservers.push(detail);
      detail.observationTargets.push(new ResizeObservation(target, options && options.box));
      updateCount(1);
      scheduler.schedule();
    }
  };
  ResizeObserverController2.unobserve = function(resizeObserver, target) {
    var detail = observerMap.get(resizeObserver);
    var index2 = getObservationIndex(detail.observationTargets, target);
    var lastObservation = detail.observationTargets.length === 1;
    if (index2 >= 0) {
      lastObservation && resizeObservers.splice(resizeObservers.indexOf(detail), 1);
      detail.observationTargets.splice(index2, 1);
      updateCount(-1);
    }
  };
  ResizeObserverController2.disconnect = function(resizeObserver) {
    var _this = this;
    var detail = observerMap.get(resizeObserver);
    detail.observationTargets.slice().forEach(function(ot) {
      return _this.unobserve(resizeObserver, ot.target);
    });
    detail.activeTargets.splice(0, detail.activeTargets.length);
  };
  return ResizeObserverController2;
}();
var ResizeObserver2 = function() {
  function ResizeObserver3(callback) {
    if (arguments.length === 0) {
      throw new TypeError("Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.");
    }
    if (typeof callback !== "function") {
      throw new TypeError("Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.");
    }
    ResizeObserverController.connect(this, callback);
  }
  ResizeObserver3.prototype.observe = function(target, options) {
    if (arguments.length === 0) {
      throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.");
    }
    if (!isElement(target)) {
      throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element");
    }
    ResizeObserverController.observe(this, target, options);
  };
  ResizeObserver3.prototype.unobserve = function(target) {
    if (arguments.length === 0) {
      throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.");
    }
    if (!isElement(target)) {
      throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element");
    }
    ResizeObserverController.unobserve(this, target);
  };
  ResizeObserver3.prototype.disconnect = function() {
    ResizeObserverController.disconnect(this);
  };
  ResizeObserver3.toString = function() {
    return "function ResizeObserver () { [polyfill code] }";
  };
  return ResizeObserver3;
}();
var _ResizeObserver = typeof document !== "undefined" && typeof window !== "undefined" && window.ResizeObserver ? window.ResizeObserver : ResizeObserver2;
var _elementSizeObserver = _createElementSizeObserver();
function _createElementRectValueListener() {
  return {
    subscribe(element, subscriber) {
      const resizeObserver = new _ResizeObserver((_ref) => {
        let [entry] = _ref;
        subscriber({
          _contentRect: entry.contentRect,
          border: {
            width: entry.borderBoxSize[0].inlineSize,
            height: entry.borderBoxSize[0].blockSize
          },
          content: {
            width: entry.contentRect.width,
            height: entry.contentRect.height
          }
        });
      });
      resizeObserver.observe(element);
      return () => {
        resizeObserver.unobserve(element);
        resizeObserver.disconnect();
      };
    }
  };
}
function _createElementSizeObserver() {
  const disposeCache = /* @__PURE__ */ new WeakMap();
  const subscribersCache = /* @__PURE__ */ new WeakMap();
  return {
    subscribe(element, subscriber) {
      const subscribers = subscribersCache.get(element) || [];
      let dispose = disposeCache.get(element);
      if (!subscribersCache.has(element)) {
        subscribersCache.set(element, subscribers);
        const listener = _createElementRectValueListener();
        dispose = listener.subscribe(element, (elementRect) => {
          for (const sub of subscribers) {
            sub(elementRect);
          }
        });
      }
      subscribers.push(subscriber);
      return () => {
        const idx = subscribers.indexOf(subscriber);
        if (idx > -1) {
          subscribers.splice(idx, 1);
        }
        if (subscribers.length === 0) {
          if (dispose)
            dispose();
        }
      };
    }
  };
}
function useElementSize(element) {
  const [size3, setSize] = (0, import_react47.useState)(null);
  (0, import_react47.useEffect)(() => {
    if (!element)
      return void 0;
    return _elementSizeObserver.subscribe(element, setSize);
  }, [element]);
  return size3;
}
function useGlobalKeyDown(onKeyDown) {
  return (0, import_react47.useEffect)(() => {
    addEventListener("keydown", onKeyDown);
    return () => removeEventListener("keydown", onKeyDown);
  }, [onKeyDown]);
}
function multiplyChannel(b, s) {
  return b * s;
}
function multiply$1(b, s) {
  return {
    r: Math.round(clamp$1(multiplyChannel(b.r / 255, s.r / 255) * 255)),
    g: Math.round(clamp$1(multiplyChannel(b.g / 255, s.g / 255) * 255)),
    b: Math.round(clamp$1(multiplyChannel(b.b / 255, s.b / 255) * 255))
  };
}
function clamp$1(num) {
  return Math.max(Math.min(num, 255), 0);
}
function screenChannel(b, s) {
  return b + s - b * s;
}
function screen$1(b, s) {
  return {
    r: Math.round(clamp2(screenChannel(b.r / 255, s.r / 255) * 255)),
    g: Math.round(clamp2(screenChannel(b.g / 255, s.g / 255) * 255)),
    b: Math.round(clamp2(screenChannel(b.b / 255, s.b / 255) * 255))
  };
}
function clamp2(num) {
  return Math.max(Math.min(num, 255), 0);
}
function hexToRgb(hex2) {
  if (hex2.length === 4) {
    const hexR = hex2.slice(1, 2);
    const hexG = hex2.slice(2, 3);
    const hexB = hex2.slice(3, 4);
    return {
      r: parseInt(hexR + hexR, 16),
      g: parseInt(hexG + hexG, 16),
      b: parseInt(hexB + hexB, 16)
    };
  }
  return {
    r: parseInt(hex2.slice(1, 3), 16),
    g: parseInt(hex2.slice(3, 5), 16),
    b: parseInt(hex2.slice(5, 7), 16)
  };
}
function rgbToHex(_ref2) {
  let {
    r,
    g,
    b
  } = _ref2;
  return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
}
function hslToRgb(hsl) {
  const s = hsl.s / 100;
  const l = hsl.l / 100;
  const c = (1 - Math.abs(2 * l - 1)) * s;
  const x = c * (1 - Math.abs(hsl.h / 60 % 2 - 1));
  const m2 = l - c / 2;
  let r = 0;
  let g = 0;
  let b = 0;
  if (0 <= hsl.h && hsl.h < 60) {
    r = c;
    g = x;
    b = 0;
  } else if (60 <= hsl.h && hsl.h < 120) {
    r = x;
    g = c;
    b = 0;
  } else if (120 <= hsl.h && hsl.h < 180) {
    r = 0;
    g = c;
    b = x;
  } else if (180 <= hsl.h && hsl.h < 240) {
    r = 0;
    g = x;
    b = c;
  } else if (240 <= hsl.h && hsl.h < 300) {
    r = x;
    g = 0;
    b = c;
  } else if (300 <= hsl.h && hsl.h < 360) {
    r = c;
    g = 0;
    b = x;
  }
  return {
    r: Math.round((r + m2) * 255),
    g: Math.round((g + m2) * 255),
    b: Math.round((b + m2) * 255)
  };
}
var HEX_CHARS = "0123456789ABCDEFabcdef";
var HSL_RE = /hsl\(\s*(\d+)\s*,\s*((\d+(?:\.\d+)?)%)\s*,\s*((\d+(?:\.\d+)?)%)\s*\)/i;
function isHexChars(str) {
  for (const c of str) {
    if (HEX_CHARS.indexOf(c) === -1) {
      return false;
    }
  }
  return true;
}
function isHex(str) {
  if (str[0] !== "#")
    return false;
  if (!(str.length === 4 || str.length === 7))
    return false;
  return isHexChars(str.slice(1));
}
function parseHsl(str) {
  const res = HSL_RE.exec(str);
  if (!res) {
    throw new Error('parseHsl: string is not a HSL color: "'.concat(str, '"'));
  }
  return {
    h: parseInt(res[1]),
    s: parseFloat(res[3]),
    l: parseFloat(res[5])
  };
}
function parseColor(color3) {
  if (!color3)
    return {
      r: 0,
      g: 0,
      b: 0
    };
  if (typeof color3 !== "string") {
    throw new Error("parseColor: expected a string");
  }
  if (isHex(color3)) {
    return hexToRgb(color3);
  }
  if (color3.startsWith("hsl(")) {
    return hslToRgb(parseHsl(color3));
  }
  throw new Error('parseColor: unexpected color format: "'.concat(color3, '"'));
}
function rgba2(color3, a) {
  const rgb = parseColor(color3);
  return "rgba(".concat(rgb.r, ",").concat(rgb.g, ",").concat(rgb.b, ",").concat(a, ")");
}
function createButtonTones(opts, base, dark, solid, muted, mode) {
  return {
    default: opts.button({
      base,
      dark,
      solid: solid.default,
      muted: muted.default,
      mode
    }),
    primary: opts.button({
      base,
      dark,
      solid: solid.primary,
      muted: muted.primary,
      mode
    }),
    positive: opts.button({
      base,
      dark,
      solid: solid.positive,
      muted: muted.positive,
      mode
    }),
    caution: opts.button({
      base,
      dark,
      solid: solid.caution,
      muted: muted.caution,
      mode
    }),
    critical: opts.button({
      base,
      dark,
      solid: solid.critical,
      muted: muted.critical,
      mode
    })
  };
}
function createButtonModes(opts, base, dark, solid, muted) {
  return {
    default: createButtonTones(opts, base, dark, solid, muted, "default"),
    ghost: createButtonTones(opts, base, dark, solid, muted, "ghost"),
    bleed: createButtonTones(opts, base, dark, solid, muted, "bleed")
  };
}
function createCardStates(opts, base, dark, name, solid, muted) {
  return {
    enabled: opts.card({
      base,
      dark,
      name,
      state: "enabled",
      solid,
      muted
    }),
    disabled: opts.card({
      base,
      dark,
      name,
      state: "disabled",
      solid,
      muted
    }),
    hovered: opts.card({
      base,
      dark,
      name,
      state: "hovered",
      solid,
      muted
    }),
    pressed: opts.card({
      base,
      dark,
      name,
      state: "pressed",
      solid,
      muted
    }),
    selected: opts.card({
      base,
      dark,
      name,
      state: "selected",
      solid,
      muted
    })
  };
}
var black2 = "hsl(0, 0%, 0%)";
var white2 = "hsl(0, 0%, 100%)";
var colors = {
  default: {
    lightest: "hsl(0, 0%, 95%)",
    lighter: "hsl(0, 0%, 70%)",
    light: "hsl(0, 0%, 65%)",
    base: "hsl(0, 0%, 50%)",
    dark: "hsl(0, 0%, 35%)",
    darker: "hsl(0, 0%, 20%)",
    darkest: "hsl(0, 0%, 5%)"
  },
  transparent: {
    lightest: "hsl(240, 100%, 95%)",
    lighter: "hsl(240, 100%, 70%)",
    light: "hsl(240, 100%, 65%)",
    base: "hsl(240, 100%, 50%)",
    dark: "hsl(240, 100%, 35%)",
    darker: "hsl(240, 100%, 20%)",
    darkest: "hsl(240, 100%, 5%)"
  },
  primary: {
    lightest: "hsl(240, 100%, 95%)",
    lighter: "hsl(240, 100%, 70%)",
    light: "hsl(240, 100%, 65%)",
    base: "hsl(240, 100%, 50%)",
    dark: "hsl(240, 100%, 35%)",
    darker: "hsl(240, 100%, 20%)",
    darkest: "hsl(240, 100%, 5%)"
  },
  positive: {
    lightest: "hsl(120, 100%, 95%)",
    lighter: "hsl(120, 100%, 70%)",
    light: "hsl(120, 100%, 65%)",
    base: "hsl(120, 100%, 50%)",
    dark: "hsl(120, 100%, 35%)",
    darker: "hsl(120, 100%, 20%)",
    darkest: "hsl(120, 100%, 5%)"
  },
  caution: {
    lightest: "hsl(60, 100%, 95%)",
    lighter: "hsl(60, 100%, 70%)",
    light: "hsl(60, 100%, 65%)",
    base: "hsl(60, 100%, 50%)",
    dark: "hsl(60, 100%, 35%)",
    darker: "hsl(60, 100%, 20%)",
    darkest: "hsl(60, 100%, 5%)"
  },
  critical: {
    lightest: "hsl(0, 100%, 95%)",
    lighter: "hsl(0, 100%, 70%)",
    light: "hsl(0, 100%, 65%)",
    base: "hsl(0, 100%, 50%)",
    dark: "hsl(0, 100%, 35%)",
    darker: "hsl(0, 100%, 20%)",
    darkest: "hsl(0, 100%, 5%)"
  }
};
var spots = {
  gray: "hsl(0, 0%, 50%)",
  red: "hsl(0, 100%, 50%)",
  orange: "hsl(30, 100%, 50%)",
  yellow: "hsl(60, 100%, 50%)",
  green: "hsl(120, 100%, 50%)",
  cyan: "hsl(180, 100%, 50%)",
  blue: "hsl(240, 100%, 50%)",
  purple: "hsl(270, 100%, 50%)",
  magenta: "hsl(300, 100%, 50%)"
};
var tones$1 = {
  transparent: {
    bg: [colors.transparent.darkest, colors.transparent.lightest],
    fg: [colors.transparent.lightest, colors.transparent.darkest],
    border: [colors.transparent.darker, colors.transparent.lighter],
    focusRing: [colors.transparent.base, colors.transparent.base]
  },
  primary: {
    bg: [colors.primary.darkest, colors.primary.lightest],
    fg: [colors.primary.lightest, colors.primary.darkest],
    border: [colors.primary.darker, colors.primary.lighter],
    focusRing: [colors.primary.base, colors.primary.base]
  },
  positive: {
    bg: [colors.positive.darkest, colors.positive.lightest],
    fg: [colors.positive.lightest, colors.positive.darkest],
    border: [colors.positive.darker, colors.positive.lighter],
    focusRing: [colors.positive.base, colors.positive.base]
  },
  caution: {
    bg: [colors.caution.darkest, colors.caution.lightest],
    fg: [colors.caution.lightest, colors.caution.darkest],
    border: [colors.caution.darker, colors.caution.lighter],
    focusRing: [colors.caution.base, colors.caution.base]
  },
  critical: {
    bg: [colors.critical.darkest, colors.critical.lightest],
    fg: [colors.critical.lightest, colors.critical.darkest],
    border: [colors.critical.darker, colors.critical.lighter],
    focusRing: [colors.critical.base, colors.critical.base]
  }
};
var defaultOpts = {
  base: (_ref4) => {
    let {
      dark,
      name
    } = _ref4;
    if (name === "default") {
      return {
        bg: dark ? black2 : white2,
        fg: dark ? white2 : black2,
        border: dark ? colors.default.darkest : colors.default.lightest,
        focusRing: colors.primary.base,
        shadow: {
          outline: black2,
          umbra: black2,
          penumbra: black2,
          ambient: black2
        },
        skeleton: {
          from: dark ? white2 : black2,
          to: dark ? white2 : black2
        }
      };
    }
    return {
      bg: tones$1[name].bg[dark ? 0 : 1],
      fg: tones$1[name].fg[dark ? 0 : 1],
      border: tones$1[name].border[dark ? 0 : 1],
      focusRing: tones$1[name].focusRing[dark ? 0 : 1],
      shadow: {
        outline: black2,
        umbra: black2,
        penumbra: black2,
        ambient: black2
      },
      skeleton: {
        from: dark ? white2 : black2,
        to: dark ? white2 : black2
      }
    };
  },
  solid: (_ref5) => {
    let {
      base,
      dark,
      state,
      tone
    } = _ref5;
    const color3 = colors[tone];
    if (state === "hovered") {
      return {
        bg: dark ? color3.light : color3.dark,
        bg2: dark ? color3.light : color3.dark,
        border: dark ? color3.lighter : color3.darker,
        fg: dark ? color3.darkest : color3.lightest,
        muted: {
          fg: black2
        },
        accent: {
          fg: black2
        },
        link: {
          fg: black2
        },
        code: {
          bg: black2,
          fg: black2
        },
        skeleton: base.skeleton
      };
    }
    return {
      bg: color3.base,
      bg2: color3.base,
      border: dark ? color3.light : color3.dark,
      fg: dark ? color3.darkest : color3.lightest,
      muted: {
        fg: black2
      },
      accent: {
        fg: black2
      },
      link: {
        fg: black2
      },
      code: {
        bg: black2,
        fg: black2
      },
      skeleton: base.skeleton
    };
  },
  muted: (_ref6) => {
    let {
      base,
      dark,
      state,
      tone
    } = _ref6;
    const color3 = colors[tone];
    if (state === "hovered") {
      return {
        bg: dark ? color3.darker : color3.lighter,
        bg2: dark ? color3.darker : color3.lighter,
        border: dark ? color3.lighter : color3.darker,
        fg: dark ? color3.lightest : color3.darkest,
        muted: {
          fg: black2
        },
        accent: {
          fg: black2
        },
        link: {
          fg: black2
        },
        code: {
          bg: black2,
          fg: black2
        },
        skeleton: base.skeleton
      };
    }
    return {
      bg: dark ? color3.darkest : color3.lightest,
      bg2: dark ? color3.darkest : color3.lightest,
      border: dark ? color3.darker : color3.lighter,
      fg: dark ? color3.lighter : color3.darker,
      muted: {
        fg: black2
      },
      accent: {
        fg: black2
      },
      link: {
        fg: black2
      },
      code: {
        bg: black2,
        fg: black2
      },
      skeleton: base.skeleton
    };
  },
  button: (_ref7) => {
    let {
      base,
      mode,
      muted,
      solid
    } = _ref7;
    if (mode === "bleed") {
      return {
        ...muted,
        enabled: {
          bg: "transparent",
          bg2: "transparent",
          fg: muted.enabled.fg,
          border: "transparent",
          muted: {
            fg: black2
          },
          accent: {
            fg: black2
          },
          link: {
            fg: black2
          },
          code: {
            bg: black2,
            fg: black2
          },
          skeleton: base.skeleton
        },
        hovered: {
          bg: muted.enabled.bg,
          bg2: muted.enabled.bg,
          fg: muted.hovered.fg,
          border: "transparent",
          muted: {
            fg: black2
          },
          accent: {
            fg: black2
          },
          link: {
            fg: black2
          },
          code: {
            bg: black2,
            fg: black2
          },
          skeleton: base.skeleton
        }
      };
    }
    if (mode === "ghost")
      return {
        ...solid,
        enabled: muted.enabled
      };
    return solid;
  },
  card: (_ref8) => {
    let {
      base
    } = _ref8;
    return {
      bg: black2,
      bg2: black2,
      fg: black2,
      border: black2,
      muted: {
        fg: black2
      },
      accent: {
        fg: black2
      },
      link: {
        fg: black2
      },
      code: {
        bg: black2,
        fg: black2
      },
      skeleton: base.skeleton
    };
  },
  input: () => {
    return {
      bg: black2,
      fg: black2,
      border: black2,
      placeholder: black2
    };
  },
  selectable: (_ref9) => {
    let {
      muted,
      state,
      tone
    } = _ref9;
    return muted[tone][state];
  },
  spot: (_ref10) => {
    let {
      key: key2
    } = _ref10;
    return spots[key2];
  },
  syntax: () => ({
    atrule: black2,
    attrName: black2,
    attrValue: black2,
    attribute: black2,
    boolean: black2,
    builtin: black2,
    cdata: black2,
    char: black2,
    class: black2,
    className: black2,
    comment: black2,
    constant: black2,
    deleted: black2,
    doctype: black2,
    entity: black2,
    function: black2,
    hexcode: black2,
    id: black2,
    important: black2,
    inserted: black2,
    keyword: black2,
    number: black2,
    operator: black2,
    prolog: black2,
    property: black2,
    pseudoClass: black2,
    pseudoElement: black2,
    punctuation: black2,
    regex: black2,
    selector: black2,
    string: black2,
    symbol: black2,
    tag: black2,
    unit: black2,
    url: black2,
    variable: black2
  })
};
function createInputModes(opts, base, dark, solid, muted) {
  return {
    default: {
      enabled: opts.input({
        base,
        dark,
        mode: "default",
        state: "enabled",
        solid: solid.default,
        muted: muted.default
      }),
      disabled: opts.input({
        base,
        dark,
        mode: "default",
        state: "disabled",
        solid: solid.default,
        muted: muted.default
      }),
      hovered: opts.input({
        base,
        dark,
        mode: "default",
        state: "hovered",
        solid: solid.default,
        muted: muted.default
      }),
      readOnly: opts.input({
        base,
        dark,
        mode: "default",
        state: "readOnly",
        solid: solid.default,
        muted: muted.default
      })
    },
    invalid: {
      enabled: opts.input({
        base,
        dark,
        mode: "invalid",
        state: "enabled",
        solid: solid.default,
        muted: muted.default
      }),
      disabled: opts.input({
        base,
        dark,
        mode: "invalid",
        state: "disabled",
        solid: solid.default,
        muted: muted.default
      }),
      hovered: opts.input({
        base,
        dark,
        mode: "invalid",
        state: "hovered",
        solid: solid.default,
        muted: muted.default
      }),
      readOnly: opts.input({
        base,
        dark,
        mode: "invalid",
        state: "readOnly",
        solid: solid.default,
        muted: muted.default
      })
    }
  };
}
function createMutedTones(opts, base, dark, name) {
  return {
    default: {
      enabled: opts.muted({
        base,
        dark,
        tone: "default",
        name,
        state: "enabled"
      }),
      disabled: opts.muted({
        base,
        dark,
        tone: "default",
        name,
        state: "disabled"
      }),
      hovered: opts.muted({
        base,
        dark,
        tone: "default",
        name,
        state: "hovered"
      }),
      pressed: opts.muted({
        base,
        dark,
        tone: "default",
        name,
        state: "pressed"
      }),
      selected: opts.muted({
        base,
        dark,
        tone: "default",
        name,
        state: "selected"
      })
    },
    transparent: {
      enabled: opts.muted({
        base,
        dark,
        tone: "transparent",
        name,
        state: "enabled"
      }),
      disabled: opts.muted({
        base,
        dark,
        tone: "transparent",
        name,
        state: "disabled"
      }),
      hovered: opts.muted({
        base,
        dark,
        tone: "transparent",
        name,
        state: "hovered"
      }),
      pressed: opts.muted({
        base,
        dark,
        tone: "transparent",
        name,
        state: "pressed"
      }),
      selected: opts.muted({
        base,
        dark,
        tone: "transparent",
        name,
        state: "selected"
      })
    },
    primary: {
      enabled: opts.muted({
        base,
        dark,
        tone: "primary",
        name,
        state: "enabled"
      }),
      disabled: opts.muted({
        base,
        dark,
        tone: "primary",
        name,
        state: "disabled"
      }),
      hovered: opts.muted({
        base,
        dark,
        tone: "primary",
        name,
        state: "hovered"
      }),
      pressed: opts.muted({
        base,
        dark,
        tone: "primary",
        name,
        state: "pressed"
      }),
      selected: opts.muted({
        base,
        dark,
        tone: "primary",
        name,
        state: "selected"
      })
    },
    positive: {
      enabled: opts.muted({
        base,
        dark,
        tone: "positive",
        name,
        state: "enabled"
      }),
      disabled: opts.muted({
        base,
        dark,
        tone: "positive",
        name,
        state: "disabled"
      }),
      hovered: opts.muted({
        base,
        dark,
        tone: "positive",
        name,
        state: "hovered"
      }),
      pressed: opts.muted({
        base,
        dark,
        tone: "positive",
        name,
        state: "pressed"
      }),
      selected: opts.muted({
        base,
        dark,
        tone: "positive",
        name,
        state: "selected"
      })
    },
    caution: {
      enabled: opts.muted({
        base,
        dark,
        tone: "caution",
        name,
        state: "enabled"
      }),
      disabled: opts.muted({
        base,
        dark,
        tone: "caution",
        name,
        state: "disabled"
      }),
      hovered: opts.muted({
        base,
        dark,
        tone: "caution",
        name,
        state: "hovered"
      }),
      pressed: opts.muted({
        base,
        dark,
        tone: "caution",
        name,
        state: "pressed"
      }),
      selected: opts.muted({
        base,
        dark,
        tone: "caution",
        name,
        state: "selected"
      })
    },
    critical: {
      enabled: opts.muted({
        base,
        dark,
        tone: "critical",
        name,
        state: "enabled"
      }),
      disabled: opts.muted({
        base,
        dark,
        tone: "critical",
        name,
        state: "disabled"
      }),
      hovered: opts.muted({
        base,
        dark,
        tone: "critical",
        name,
        state: "hovered"
      }),
      pressed: opts.muted({
        base,
        dark,
        tone: "critical",
        name,
        state: "pressed"
      }),
      selected: opts.muted({
        base,
        dark,
        tone: "critical",
        name,
        state: "selected"
      })
    }
  };
}
function createSelectableTones(opts, base, dark, solid, muted) {
  return {
    default: _createSelectableStates(opts, base, dark, solid, muted, "default"),
    primary: _createSelectableStates(opts, base, dark, solid, muted, "primary"),
    positive: _createSelectableStates(opts, base, dark, solid, muted, "positive"),
    caution: _createSelectableStates(opts, base, dark, solid, muted, "caution"),
    critical: _createSelectableStates(opts, base, dark, solid, muted, "critical")
  };
}
function _createSelectableStates(opts, base, dark, solid, muted, tone) {
  return {
    enabled: opts.selectable({
      base,
      dark,
      solid,
      muted,
      state: "enabled",
      tone
    }),
    hovered: opts.selectable({
      base,
      dark,
      solid,
      muted,
      state: "hovered",
      tone
    }),
    pressed: opts.selectable({
      base,
      dark,
      solid,
      muted,
      state: "pressed",
      tone
    }),
    selected: opts.selectable({
      base,
      dark,
      solid,
      muted,
      state: "selected",
      tone
    }),
    disabled: opts.selectable({
      base,
      dark,
      solid,
      muted,
      state: "disabled",
      tone
    })
  };
}
function createSolidTones(opts, base, dark, name) {
  return {
    default: {
      enabled: opts.solid({
        base,
        dark,
        tone: "default",
        name,
        state: "enabled"
      }),
      disabled: opts.solid({
        base,
        dark,
        tone: "default",
        name,
        state: "disabled"
      }),
      hovered: opts.solid({
        base,
        dark,
        tone: "default",
        name,
        state: "hovered"
      }),
      pressed: opts.solid({
        base,
        dark,
        tone: "default",
        name,
        state: "pressed"
      }),
      selected: opts.solid({
        base,
        dark,
        tone: "default",
        name,
        state: "selected"
      })
    },
    transparent: {
      enabled: opts.solid({
        base,
        dark,
        tone: "transparent",
        name,
        state: "enabled"
      }),
      disabled: opts.solid({
        base,
        dark,
        tone: "transparent",
        name,
        state: "disabled"
      }),
      hovered: opts.solid({
        base,
        dark,
        tone: "transparent",
        name,
        state: "hovered"
      }),
      pressed: opts.solid({
        base,
        dark,
        tone: "transparent",
        name,
        state: "pressed"
      }),
      selected: opts.solid({
        base,
        dark,
        tone: "transparent",
        name,
        state: "selected"
      })
    },
    primary: {
      enabled: opts.solid({
        base,
        dark,
        tone: "primary",
        name,
        state: "enabled"
      }),
      disabled: opts.solid({
        base,
        dark,
        tone: "primary",
        name,
        state: "disabled"
      }),
      hovered: opts.solid({
        base,
        dark,
        tone: "primary",
        name,
        state: "hovered"
      }),
      pressed: opts.solid({
        base,
        dark,
        tone: "primary",
        name,
        state: "pressed"
      }),
      selected: opts.solid({
        base,
        dark,
        tone: "primary",
        name,
        state: "selected"
      })
    },
    positive: {
      enabled: opts.solid({
        base,
        dark,
        tone: "positive",
        name,
        state: "enabled"
      }),
      disabled: opts.solid({
        base,
        dark,
        tone: "positive",
        name,
        state: "disabled"
      }),
      hovered: opts.solid({
        base,
        dark,
        tone: "positive",
        name,
        state: "hovered"
      }),
      pressed: opts.solid({
        base,
        dark,
        tone: "positive",
        name,
        state: "pressed"
      }),
      selected: opts.solid({
        base,
        dark,
        tone: "positive",
        name,
        state: "selected"
      })
    },
    caution: {
      enabled: opts.solid({
        base,
        dark,
        tone: "caution",
        name,
        state: "enabled"
      }),
      disabled: opts.solid({
        base,
        dark,
        tone: "caution",
        name,
        state: "disabled"
      }),
      hovered: opts.solid({
        base,
        dark,
        tone: "caution",
        name,
        state: "hovered"
      }),
      pressed: opts.solid({
        base,
        dark,
        tone: "caution",
        name,
        state: "pressed"
      }),
      selected: opts.solid({
        base,
        dark,
        tone: "caution",
        name,
        state: "selected"
      })
    },
    critical: {
      enabled: opts.solid({
        base,
        dark,
        tone: "critical",
        name,
        state: "enabled"
      }),
      disabled: opts.solid({
        base,
        dark,
        tone: "critical",
        name,
        state: "disabled"
      }),
      hovered: opts.solid({
        base,
        dark,
        tone: "critical",
        name,
        state: "hovered"
      }),
      pressed: opts.solid({
        base,
        dark,
        tone: "critical",
        name,
        state: "pressed"
      }),
      selected: opts.solid({
        base,
        dark,
        tone: "critical",
        name,
        state: "selected"
      })
    }
  };
}
function createSpot(opts, base, dark) {
  return {
    gray: opts.spot({
      base,
      dark,
      key: "gray"
    }),
    blue: opts.spot({
      base,
      dark,
      key: "blue"
    }),
    purple: opts.spot({
      base,
      dark,
      key: "purple"
    }),
    magenta: opts.spot({
      base,
      dark,
      key: "magenta"
    }),
    red: opts.spot({
      base,
      dark,
      key: "red"
    }),
    orange: opts.spot({
      base,
      dark,
      key: "orange"
    }),
    yellow: opts.spot({
      base,
      dark,
      key: "yellow"
    }),
    green: opts.spot({
      base,
      dark,
      key: "green"
    }),
    cyan: opts.spot({
      base,
      dark,
      key: "cyan"
    })
  };
}
function createColorTheme() {
  let partialOpts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  const builders = {
    ...defaultOpts,
    ...partialOpts
  };
  return {
    light: _createColorScheme(builders, false),
    dark: _createColorScheme(builders, true)
  };
}
function _createColorScheme(opts, dark) {
  return {
    default: _createColor(opts, dark, "default"),
    transparent: _createColor(opts, dark, "transparent"),
    primary: _createColor(opts, dark, "primary"),
    positive: _createColor(opts, dark, "positive"),
    caution: _createColor(opts, dark, "caution"),
    critical: _createColor(opts, dark, "critical")
  };
}
function _createColor(opts, dark, name) {
  const base = opts.base({
    dark,
    name
  });
  const solid = createSolidTones(opts, base, dark, name);
  const muted = createMutedTones(opts, base, dark, name);
  return {
    base,
    button: createButtonModes(opts, base, dark, solid, muted),
    card: createCardStates(opts, base, dark, name, solid, muted),
    dark,
    input: createInputModes(opts, base, dark, solid, muted),
    selectable: createSelectableTones(opts, base, dark, solid, muted),
    spot: createSpot(opts, base, dark),
    syntax: opts.syntax({
      base,
      dark
    }),
    solid,
    muted
  };
}
function multiply(bg, fg) {
  const b = parseColor(bg);
  const s = parseColor(fg);
  const hex2 = rgbToHex(multiply$1(b, s));
  return hex2;
}
function screen(bg, fg) {
  const b = parseColor(bg);
  const s = parseColor(fg);
  const hex2 = rgbToHex(screen$1(b, s));
  return hex2;
}
var tones = {
  default: hues.gray,
  transparent: hues.gray,
  primary: hues.blue,
  positive: hues.green,
  caution: hues.yellow,
  critical: hues.red
};
var NEUTRAL_TONES = ["default", "transparent"];
var color2 = createColorTheme({
  base: (_ref11) => {
    let {
      dark,
      name
    } = _ref11;
    if (name === "default") {
      const tints2 = hues.gray;
      const skeletonFrom2 = dark ? tints2[900].hex : tints2[100].hex;
      return {
        fg: dark ? white.hex : black.hex,
        bg: dark ? black.hex : white.hex,
        border: tints2[dark ? 800 : 200].hex,
        focusRing: hues.blue[dark ? 500 : 500].hex,
        shadow: {
          outline: rgba2(tints2[500].hex, 0.4),
          umbra: dark ? rgba2(tints2[950].hex, 0.4) : rgba2(tints2[500].hex, 0.2),
          penumbra: dark ? rgba2(tints2[950].hex, 0.28) : rgba2(tints2[500].hex, 0.14),
          ambient: dark ? rgba2(tints2[950].hex, 0.24) : rgba2(tints2[500].hex, 0.12)
        },
        skeleton: {
          from: skeletonFrom2,
          to: rgba2(skeletonFrom2, 0.5)
        }
      };
    }
    if (name === "transparent") {
      const tints2 = tones.default;
      const skeletonFrom2 = tints2[dark ? 800 : 200].hex;
      return {
        fg: tints2[dark ? 100 : 900].hex,
        bg: tints2[dark ? 950 : 50].hex,
        border: tints2[dark ? 800 : 300].hex,
        focusRing: hues.blue[500].hex,
        shadow: {
          outline: rgba2(tints2[500].hex, 0.4),
          umbra: dark ? rgba2(tints2[900].hex, 0.4) : rgba2(tints2[500].hex, 0.2),
          penumbra: dark ? rgba2(tints2[900].hex, 0.28) : rgba2(tints2[500].hex, 0.14),
          ambient: dark ? rgba2(tints2[900].hex, 0.24) : rgba2(tints2[500].hex, 0.12)
        },
        skeleton: {
          from: skeletonFrom2,
          to: rgba2(skeletonFrom2, 0.5)
        }
      };
    }
    const tints = tones[name] || tones.default;
    const skeletonFrom = tints[dark ? 800 : 200].hex;
    return {
      fg: tints[dark ? 100 : 900].hex,
      bg: tints[dark ? 950 : 50].hex,
      border: tints[dark ? 800 : 200].hex,
      focusRing: tints[500].hex,
      shadow: {
        outline: rgba2(tints[500].hex, 0.4),
        umbra: dark ? rgba2(tints[900].hex, 0.4) : rgba2(tints[500].hex, 0.2),
        penumbra: dark ? rgba2(tints[900].hex, 0.28) : rgba2(tints[500].hex, 0.14),
        ambient: dark ? rgba2(tints[900].hex, 0.24) : rgba2(tints[500].hex, 0.12)
      },
      skeleton: {
        from: skeletonFrom,
        to: rgba2(skeletonFrom, 0.5)
      }
    };
  },
  solid: (_ref12) => {
    let {
      base,
      dark,
      name,
      state,
      tone
    } = _ref12;
    const mix2 = dark ? screen : multiply;
    const mix22 = dark ? multiply : screen;
    const defaultTints = tones[name] || tones.default;
    const isNeutral = NEUTRAL_TONES.includes(name) && NEUTRAL_TONES.includes(tone);
    let tints = tones[tone === "default" ? name : tone] || defaultTints;
    if (state === "disabled") {
      tints = defaultTints;
      const bg2 = mix2(base.bg, tints[dark ? 800 : 200].hex);
      const skeletonFrom2 = mix22(bg2, tints[dark ? 200 : 800].hex);
      return {
        bg: bg2,
        bg2: mix22(bg2, tints[dark ? 50 : 950].hex),
        border: mix2(base.bg, tints[dark ? 800 : 200].hex),
        fg: mix2(base.bg, dark ? black.hex : white.hex),
        muted: {
          fg: mix2(base.bg, tints[dark ? 950 : 50].hex)
        },
        accent: {
          fg: mix2(base.bg, tints[dark ? 950 : 50].hex)
        },
        link: {
          fg: mix2(base.bg, tints[dark ? 950 : 50].hex)
        },
        code: {
          bg: bg2,
          fg: mix2(base.bg, tints[dark ? 950 : 50].hex)
        },
        skeleton: {
          from: skeletonFrom2,
          to: rgba2(skeletonFrom2, 0.5)
        }
      };
    }
    if (state === "hovered") {
      const bg2 = mix2(base.bg, tints[dark ? 300 : 600].hex);
      const skeletonFrom2 = mix22(bg2, tints[dark ? 200 : 800].hex);
      return {
        bg: bg2,
        bg2: mix22(bg2, tints[dark ? 50 : 950].hex),
        border: mix2(base.bg, tints[dark ? 300 : 600].hex),
        fg: mix2(base.bg, dark ? black.hex : white.hex),
        muted: {
          fg: mix2(base.bg, tints[dark ? 800 : 200].hex)
        },
        accent: {
          fg: mix22(bg2, hues.red[dark ? 800 : 200].hex)
        },
        link: {
          fg: mix22(bg2, hues.blue[dark ? 800 : 200].hex)
        },
        code: {
          bg: mix2(bg2, tints[dark ? 950 : 50].hex),
          fg: mix2(base.bg, tints[dark ? 800 : 200].hex)
        },
        skeleton: {
          from: skeletonFrom2,
          to: rgba2(skeletonFrom2, 0.5)
        }
      };
    }
    if (state === "pressed") {
      const bg2 = mix2(base.bg, tints[dark ? 200 : 800].hex);
      const skeletonFrom2 = mix22(bg2, tints[dark ? 200 : 800].hex);
      return {
        bg: mix2(base.bg, tints[dark ? 200 : 800].hex),
        bg2: mix22(bg2, tints[dark ? 50 : 950].hex),
        border: mix2(base.bg, tints[dark ? 200 : 800].hex),
        fg: mix2(base.bg, dark ? black.hex : white.hex),
        muted: {
          fg: mix2(base.bg, tints[dark ? 800 : 200].hex)
        },
        accent: {
          fg: mix22(bg2, hues.red[dark ? 800 : 200].hex)
        },
        link: {
          fg: mix22(bg2, hues.blue[dark ? 800 : 200].hex)
        },
        code: {
          bg: mix2(bg2, tints[dark ? 950 : 50].hex),
          fg: mix2(base.bg, tints[dark ? 800 : 200].hex)
        },
        skeleton: {
          from: skeletonFrom2,
          to: rgba2(skeletonFrom2, 0.5)
        }
      };
    }
    if (state === "selected") {
      if (isNeutral) {
        tints = tones.primary;
      }
      const bg2 = mix2(base.bg, tints[dark ? 200 : 800].hex);
      const skeletonFrom2 = mix22(bg2, tints[dark ? 200 : 800].hex);
      return {
        bg: bg2,
        bg2: mix22(bg2, tints[dark ? 50 : 950].hex),
        border: mix2(base.bg, tints[dark ? 200 : 800].hex),
        fg: mix2(base.bg, dark ? black.hex : white.hex),
        muted: {
          fg: mix2(base.bg, tints[dark ? 800 : 200].hex)
        },
        accent: {
          fg: mix22(bg2, hues.red[dark ? 800 : 200].hex)
        },
        link: {
          fg: mix22(bg2, hues.blue[dark ? 800 : 200].hex)
        },
        code: {
          bg: mix2(bg2, tints[dark ? 950 : 50].hex),
          fg: mix2(base.bg, tints[dark ? 800 : 200].hex)
        },
        skeleton: {
          from: skeletonFrom2,
          to: rgba2(skeletonFrom2, 0.5)
        }
      };
    }
    const bg = mix2(base.bg, tints[dark ? 400 : 500].hex);
    const skeletonFrom = mix22(bg, tints[dark ? 200 : 800].hex);
    return {
      bg,
      bg2: mix22(bg, tints[dark ? 50 : 950].hex),
      border: mix2(base.bg, tints[dark ? 400 : 500].hex),
      fg: mix2(base.bg, dark ? black.hex : white.hex),
      muted: {
        fg: mix2(base.bg, tints[dark ? 900 : 100].hex)
      },
      accent: {
        fg: mix22(bg, hues.red[dark ? 900 : 100].hex)
      },
      link: {
        fg: mix22(bg, hues.blue[dark ? 900 : 100].hex)
      },
      code: {
        bg: mix2(bg, tints[dark ? 950 : 50].hex),
        fg: mix2(base.bg, tints[dark ? 900 : 100].hex)
      },
      skeleton: {
        from: skeletonFrom,
        to: rgba2(skeletonFrom, 0.5)
      }
    };
  },
  muted: (_ref13) => {
    let {
      base,
      dark,
      name,
      state,
      tone
    } = _ref13;
    const mix2 = dark ? screen : multiply;
    const defaultTints = tones[name] || tones.default;
    const isNeutral = NEUTRAL_TONES.includes(name) && NEUTRAL_TONES.includes(tone);
    let tints = tones[tone === "default" ? name : tone] || defaultTints;
    if (state === "disabled") {
      tints = defaultTints;
      const bg2 = base.bg;
      const skeletonFrom2 = mix2(bg2, tints[dark ? 900 : 100].hex);
      return {
        bg: bg2,
        bg2: mix2(bg2, tints[dark ? 950 : 50].hex),
        border: mix2(bg2, tints[dark ? 950 : 50].hex),
        fg: mix2(bg2, tints[dark ? 800 : 200].hex),
        muted: {
          fg: mix2(bg2, tints[dark ? 900 : 100].hex)
        },
        accent: {
          fg: mix2(bg2, tints[dark ? 900 : 100].hex)
        },
        link: {
          fg: mix2(bg2, tints[dark ? 900 : 100].hex)
        },
        code: {
          bg: bg2,
          fg: mix2(bg2, tints[dark ? 900 : 100].hex)
        },
        skeleton: {
          from: rgba2(skeletonFrom2, 0.5),
          to: rgba2(skeletonFrom2, 0.25)
        }
      };
    }
    if (state === "hovered") {
      const bg2 = mix2(base.bg, tints[dark ? 950 : 50].hex);
      const skeletonFrom2 = mix2(bg2, tints[dark ? 900 : 100].hex);
      return {
        bg: bg2,
        bg2: mix2(bg2, tints[dark ? 950 : 50].hex),
        border: mix2(bg2, tints[dark ? 900 : 100].hex),
        fg: mix2(base.bg, tints[dark ? 200 : 800].hex),
        muted: {
          fg: mix2(base.bg, tints[dark ? 400 : 600].hex)
        },
        accent: {
          fg: mix2(base.bg, hues.red[dark ? 400 : 500].hex)
        },
        link: {
          fg: mix2(base.bg, hues.blue[dark ? 400 : 600].hex)
        },
        code: {
          bg: mix2(bg2, tints[dark ? 950 : 50].hex),
          fg: mix2(base.bg, tints[dark ? 400 : 600].hex)
        },
        skeleton: {
          from: skeletonFrom2,
          to: rgba2(skeletonFrom2, 0.5)
        }
      };
    }
    if (state === "pressed") {
      if (isNeutral) {
        tints = tones.primary;
      }
      const bg2 = mix2(base.bg, tints[dark ? 900 : 100].hex);
      const skeletonFrom2 = mix2(bg2, tints[dark ? 900 : 100].hex);
      return {
        bg: bg2,
        bg2: mix2(bg2, tints[dark ? 950 : 50].hex),
        border: mix2(bg2, tints[dark ? 900 : 100].hex),
        fg: mix2(base.bg, tints[dark ? 200 : 800].hex),
        muted: {
          fg: mix2(base.bg, tints[dark ? 400 : 600].hex)
        },
        accent: {
          fg: mix2(bg2, hues.red[dark ? 400 : 500].hex)
        },
        link: {
          fg: mix2(bg2, hues.blue[dark ? 400 : 600].hex)
        },
        code: {
          bg: mix2(bg2, tints[dark ? 950 : 50].hex),
          fg: mix2(base.bg, tints[dark ? 400 : 600].hex)
        },
        skeleton: {
          from: skeletonFrom2,
          to: rgba2(skeletonFrom2, 0.5)
        }
      };
    }
    if (state === "selected") {
      if (isNeutral) {
        tints = tones.primary;
      }
      const bg2 = mix2(base.bg, tints[dark ? 900 : 100].hex);
      const skeletonFrom2 = mix2(bg2, tints[dark ? 900 : 100].hex);
      return {
        bg: bg2,
        bg2: mix2(bg2, tints[dark ? 950 : 50].hex),
        border: mix2(bg2, tints[dark ? 900 : 100].hex),
        fg: mix2(base.bg, tints[dark ? 200 : 800].hex),
        muted: {
          fg: mix2(base.bg, tints[dark ? 400 : 600].hex)
        },
        accent: {
          fg: mix2(bg2, hues.red[dark ? 400 : 500].hex)
        },
        link: {
          fg: mix2(bg2, hues.blue[dark ? 400 : 600].hex)
        },
        code: {
          bg: mix2(bg2, tints[dark ? 950 : 50].hex),
          fg: mix2(base.bg, tints[dark ? 400 : 600].hex)
        },
        skeleton: {
          from: skeletonFrom2,
          to: rgba2(skeletonFrom2, 0.5)
        }
      };
    }
    const bg = base.bg;
    const skeletonFrom = mix2(bg, tints[dark ? 900 : 100].hex);
    return {
      bg,
      bg2: mix2(bg, tints[dark ? 950 : 50].hex),
      border: mix2(bg, tints[dark ? 900 : 100].hex),
      fg: mix2(base.bg, tints[dark ? 300 : 700].hex),
      muted: {
        fg: mix2(base.bg, tints[dark ? 400 : 600].hex)
      },
      accent: {
        fg: mix2(base.bg, hues.red[dark ? 400 : 500].hex)
      },
      link: {
        fg: mix2(base.bg, hues.blue[dark ? 400 : 600].hex)
      },
      code: {
        bg: mix2(base.bg, tints[dark ? 950 : 50].hex),
        fg: mix2(base.bg, tints[dark ? 400 : 600].hex)
      },
      skeleton: {
        from: skeletonFrom,
        to: rgba2(skeletonFrom, 0.5)
      }
    };
  },
  button: (_ref14) => {
    let {
      base,
      mode,
      muted,
      solid
    } = _ref14;
    if (mode === "bleed") {
      return {
        enabled: {
          ...muted.enabled,
          border: muted.enabled.bg
        },
        hovered: {
          ...muted.hovered,
          border: muted.hovered.bg
        },
        pressed: {
          ...muted.pressed,
          border: muted.pressed.bg
        },
        selected: {
          ...muted.selected,
          border: muted.selected.bg
        },
        disabled: {
          ...muted.disabled,
          border: muted.disabled.bg
        }
      };
    }
    if (mode === "ghost") {
      return {
        ...solid,
        enabled: {
          ...muted.enabled,
          border: base.border
        },
        disabled: muted.disabled
      };
    }
    return solid;
  },
  card: (_ref15) => {
    let {
      base,
      dark,
      muted,
      name,
      solid,
      state
    } = _ref15;
    if (state === "hovered") {
      return muted[name].hovered;
    }
    if (state === "disabled") {
      return muted[name].disabled;
    }
    const isNeutral = NEUTRAL_TONES.includes(name);
    const tints = tones[name] || tones.default;
    const mix2 = dark ? screen : multiply;
    if (state === "pressed") {
      if (isNeutral) {
        return muted.primary.pressed;
      }
      return muted[name].pressed;
    }
    if (state === "selected") {
      if (isNeutral) {
        return solid.primary.enabled;
      }
      return solid[name].enabled;
    }
    const bg = base.bg;
    const skeletonFrom = mix2(base.bg, tints[dark ? 900 : 100].hex);
    return {
      bg,
      bg2: mix2(bg, tints[dark ? 950 : 50].hex),
      fg: base.fg,
      border: base.border,
      muted: {
        fg: mix2(base.bg, tints[dark ? 400 : 600].hex)
      },
      accent: {
        fg: mix2(base.bg, hues.red[dark ? 400 : 500].hex)
      },
      link: {
        fg: mix2(base.bg, hues.blue[dark ? 400 : 600].hex)
      },
      code: {
        bg: mix2(base.bg, tints[dark ? 950 : 50].hex),
        fg: tints[dark ? 400 : 600].hex
      },
      skeleton: {
        from: skeletonFrom,
        to: rgba2(skeletonFrom, 0.5)
      }
    };
  },
  input: (_ref16) => {
    let {
      base,
      dark,
      mode,
      state
    } = _ref16;
    const mix2 = dark ? screen : multiply;
    if (mode === "invalid") {
      const tints = tones.critical;
      return {
        bg: mix2(base.bg, tints[dark ? 950 : 50].hex),
        fg: mix2(base.bg, tints[dark ? 400 : 600].hex),
        border: mix2(base.bg, tints[dark ? 800 : 200].hex),
        placeholder: mix2(base.bg, tints[dark ? 600 : 400].hex)
      };
    }
    if (state === "hovered") {
      return {
        bg: base.bg,
        fg: base.fg,
        border: mix2(base.bg, hues.gray[dark ? 700 : 300].hex),
        placeholder: mix2(base.bg, hues.gray[dark ? 600 : 400].hex)
      };
    }
    if (state === "disabled") {
      return {
        bg: mix2(base.bg, hues.gray[dark ? 950 : 50].hex),
        fg: mix2(base.bg, hues.gray[dark ? 700 : 300].hex),
        border: mix2(base.bg, hues.gray[dark ? 900 : 100].hex),
        placeholder: mix2(base.bg, hues.gray[dark ? 800 : 200].hex)
      };
    }
    if (state === "readOnly") {
      return {
        bg: mix2(base.bg, hues.gray[dark ? 950 : 50].hex),
        fg: mix2(base.bg, hues.gray[dark ? 200 : 800].hex),
        border: mix2(base.bg, hues.gray[dark ? 800 : 200].hex),
        placeholder: mix2(base.bg, hues.gray[dark ? 600 : 400].hex)
      };
    }
    return {
      bg: base.bg,
      fg: base.fg,
      border: base.border,
      placeholder: mix2(base.bg, hues.gray[dark ? 600 : 400].hex)
    };
  },
  selectable: (_ref17) => {
    let {
      base,
      muted,
      tone,
      solid,
      state
    } = _ref17;
    if (state === "enabled") {
      return {
        ...muted[tone].enabled,
        bg: base.bg
      };
    }
    if (state === "pressed") {
      if (tone === "default") {
        return muted.primary.pressed;
      }
      return muted[tone].pressed;
    }
    if (state === "selected") {
      if (tone === "default") {
        return solid.primary.enabled;
      }
      return solid[tone].enabled;
    }
    if (state === "disabled") {
      return {
        ...muted[tone].disabled,
        bg: base.bg
      };
    }
    return muted[tone][state];
  },
  spot: (_ref18) => {
    let {
      base,
      dark,
      key: key2
    } = _ref18;
    const mix2 = dark ? screen : multiply;
    return mix2(base.bg, hues[key2][dark ? 400 : 500].hex);
  },
  syntax: (_ref19) => {
    let {
      base,
      dark
    } = _ref19;
    const mix2 = dark ? screen : multiply;
    const mainShade = dark ? 400 : 600;
    const secondaryShade = dark ? 600 : 400;
    return {
      atrule: mix2(base.bg, hues.purple[mainShade].hex),
      attrName: mix2(base.bg, hues.green[mainShade].hex),
      attrValue: mix2(base.bg, hues.yellow[mainShade].hex),
      attribute: mix2(base.bg, hues.yellow[mainShade].hex),
      boolean: mix2(base.bg, hues.purple[mainShade].hex),
      builtin: mix2(base.bg, hues.purple[mainShade].hex),
      cdata: mix2(base.bg, hues.yellow[mainShade].hex),
      char: mix2(base.bg, hues.yellow[mainShade].hex),
      class: mix2(base.bg, hues.orange[mainShade].hex),
      className: mix2(base.bg, hues.cyan[mainShade].hex),
      comment: mix2(base.bg, hues.gray[secondaryShade].hex),
      constant: mix2(base.bg, hues.purple[mainShade].hex),
      deleted: mix2(base.bg, hues.red[mainShade].hex),
      doctype: mix2(base.bg, hues.gray[secondaryShade].hex),
      entity: mix2(base.bg, hues.red[mainShade].hex),
      function: mix2(base.bg, hues.green[mainShade].hex),
      hexcode: mix2(base.bg, hues.blue[mainShade].hex),
      id: mix2(base.bg, hues.purple[mainShade].hex),
      important: mix2(base.bg, hues.purple[mainShade].hex),
      inserted: mix2(base.bg, hues.yellow[mainShade].hex),
      keyword: mix2(base.bg, hues.magenta[mainShade].hex),
      number: mix2(base.bg, hues.purple[mainShade].hex),
      operator: mix2(base.bg, hues.magenta[mainShade].hex),
      prolog: mix2(base.bg, hues.gray[secondaryShade].hex),
      property: mix2(base.bg, hues.blue[mainShade].hex),
      pseudoClass: mix2(base.bg, hues.yellow[mainShade].hex),
      pseudoElement: mix2(base.bg, hues.yellow[mainShade].hex),
      punctuation: mix2(base.bg, hues.gray[mainShade].hex),
      regex: mix2(base.bg, hues.blue[mainShade].hex),
      selector: mix2(base.bg, hues.red[mainShade].hex),
      string: mix2(base.bg, hues.yellow[mainShade].hex),
      symbol: mix2(base.bg, hues.purple[mainShade].hex),
      tag: mix2(base.bg, hues.red[mainShade].hex),
      unit: mix2(base.bg, hues.orange[mainShade].hex),
      url: mix2(base.bg, hues.red[mainShade].hex),
      variable: mix2(base.bg, hues.red[mainShade].hex)
    };
  }
});
var DEFAULT_THEME_LAYER = {
  dialog: {
    zOffset: 600
  },
  popover: {
    zOffset: 400
  },
  tooltip: {
    zOffset: 200
  }
};
function getGlobalScope() {
  if (typeof globalThis !== "undefined")
    return globalThis;
  if (typeof window !== "undefined")
    return window;
  if (typeof self !== "undefined")
    return self;
  if (typeof global !== "undefined")
    return global;
  throw new Error("@sanity/ui: could not locate global scope");
}
var globalScope = getGlobalScope();
var key$8 = Symbol.for("@sanity/ui/context/theme");
globalScope[key$8] = globalScope[key$8] || (0, import_react47.createContext)(null);
var ThemeContext = globalScope[key$8];
function ThemeProvider(props) {
  const parentTheme = (0, import_react47.useContext)(ThemeContext);
  const {
    children,
    scheme = (parentTheme == null ? void 0 : parentTheme.scheme) || "light",
    theme: themeProp = (parentTheme == null ? void 0 : parentTheme.theme) || null,
    tone = (parentTheme == null ? void 0 : parentTheme.tone) || "default"
  } = props;
  const theme = (0, import_react47.useMemo)(() => {
    if (!themeProp)
      return null;
    const {
      color: rootColor,
      layer: rootLayer,
      ...restTheme
    } = themeProp;
    const colorScheme = rootColor[scheme] || rootColor.light;
    const color3 = colorScheme[tone] || colorScheme.default;
    const layer = rootLayer || DEFAULT_THEME_LAYER;
    return {
      sanity: {
        ...restTheme,
        color: color3,
        layer
      }
    };
  }, [scheme, themeProp, tone]);
  const value = (0, import_react47.useMemo)(() => themeProp && {
    version: 0,
    theme: themeProp,
    scheme,
    tone
  }, [themeProp, scheme, tone]);
  if (!theme) {
    return (0, import_jsx_runtime2.jsx)("pre", {
      children: 'ThemeProvider: no "theme" property provided'
    });
  }
  return (0, import_jsx_runtime2.jsx)(ThemeContext.Provider, {
    value,
    children: (0, import_jsx_runtime2.jsx)(nt, {
      theme,
      children
    })
  });
}
function isRecord(value) {
  return Boolean(value && typeof value === "object");
}
function useRootTheme() {
  const value = (0, import_react47.useContext)(ThemeContext);
  if (!value) {
    throw new Error("useRootTheme(): missing context value");
  }
  if (!isRecord(value) || value.version !== 0) {
    throw new Error("useRootTheme(): the context value is not compatible");
  }
  return value;
}
function ThemeColorProvider(props) {
  const {
    children,
    scheme,
    tone
  } = props;
  const root = useRootTheme();
  return (0, import_jsx_runtime2.jsx)(ThemeProvider, {
    scheme: scheme || root.scheme,
    theme: root.theme,
    tone,
    children
  });
}
function useTheme() {
  return tt();
}
var MEDIA_STORE_CACHE = /* @__PURE__ */ new WeakMap();
function _getMediaQuery(media, index2) {
  if (index2 === 0) {
    return "screen and (max-width: ".concat(media[index2] - 1, "px)");
  }
  if (index2 === media.length) {
    return "screen and (min-width: ".concat(media[index2 - 1], "px)");
  }
  return "screen and (min-width: ".concat(media[index2 - 1], "px) and (max-width: ").concat(media[index2] - 1, "px)");
}
function _createMediaStore(media) {
  const mediaLen = media.length;
  let sizes;
  const getSizes = () => {
    if (!sizes) {
      sizes = [];
      for (let index2 = mediaLen; index2 > -1; index2 -= 1) {
        const mediaQuery = _getMediaQuery(media, index2);
        sizes.push({
          index: index2,
          mq: window.matchMedia(mediaQuery)
        });
      }
    }
    return sizes;
  };
  const getSnapshot = () => {
    for (const {
      index: index2,
      mq
    } of getSizes()) {
      if (mq.matches)
        return index2;
    }
    return 0;
  };
  const subscribe = (onStoreChange) => {
    const disposeFns = [];
    for (const {
      mq
    } of getSizes()) {
      const handleChange = () => {
        if (mq.matches)
          onStoreChange();
      };
      mq.addEventListener("change", handleChange);
      disposeFns.push(() => mq.removeEventListener("change", handleChange));
    }
    return () => {
      for (const disposeFn of disposeFns) {
        disposeFn();
      }
    };
  };
  return {
    getSnapshot,
    subscribe
  };
}
function getServerSnapshot$2() {
  return 0;
}
function useMediaIndex() {
  const theme = useTheme();
  const {
    media
  } = theme.sanity;
  let store = MEDIA_STORE_CACHE.get(media);
  if (!store) {
    store = _createMediaStore(media);
    MEDIA_STORE_CACHE.set(media, store);
  }
  return (0, import_react47.useSyncExternalStore)(store.subscribe, store.getSnapshot, getServerSnapshot$2);
}
var useIsomorphicEffect = typeof window !== "undefined" ? import_react47.useLayoutEffect : import_react47.useEffect;
function useForwardedRef(ref) {
  const innerRef = (0, import_react47.useRef)(null);
  useIsomorphicEffect(() => {
    if (!ref)
      return;
    if (typeof ref === "function") {
      ref(innerRef.current);
    } else {
      ref.current = innerRef.current;
    }
  });
  return innerRef;
}
function useCustomValidity(ref, customValidity) {
  (0, import_react47.useEffect)(() => {
    if (ref.current) {
      ref.current.setCustomValidity(customValidity || "");
    }
  }, [customValidity, ref]);
}
var BORDER_VALUE = "1px solid var(--card-border-color)";
function responsiveBorderStyle() {
  return [border, borderTop, borderRight, borderBottom, borderLeft];
}
function border(props) {
  const {
    theme
  } = props;
  const {
    media
  } = theme.sanity;
  return _responsive(media, props.$border, (value) => value ? {
    "&&": {
      border: BORDER_VALUE
    }
  } : {
    "&&": {
      border: 0
    }
  });
}
function borderTop(props) {
  const {
    theme
  } = props;
  const {
    media
  } = theme.sanity;
  return _responsive(media, props.$borderTop, (value) => value ? {
    "&&": {
      borderTop: BORDER_VALUE
    }
  } : {
    "&&": {
      borderTop: 0
    }
  });
}
function borderRight(props) {
  const {
    theme
  } = props;
  const {
    media
  } = theme.sanity;
  return _responsive(media, props.$borderRight, (value) => value ? {
    "&&": {
      borderRight: BORDER_VALUE
    }
  } : {
    "&&": {
      borderRight: 0
    }
  });
}
function borderBottom(props) {
  const {
    theme
  } = props;
  const {
    media
  } = theme.sanity;
  return _responsive(media, props.$borderBottom, (value) => value ? {
    "&&": {
      borderBottom: BORDER_VALUE
    }
  } : {
    "&&": {
      borderBottom: 0
    }
  });
}
function borderLeft(props) {
  const {
    theme
  } = props;
  const {
    media
  } = theme.sanity;
  return _responsive(media, props.$borderLeft, (value) => value ? {
    "&&": {
      borderLeft: BORDER_VALUE
    }
  } : {
    "&&": {
      borderLeft: 0
    }
  });
}
var BASE_STYLE$4 = {
  '&[data-as="ul"],&[data-as="ol"]': {
    listStyle: "none"
  }
};
var BOX_SIZING = {
  content: "content-box",
  border: "border-box"
};
var BOX_HEIGHT = {
  stretch: "stretch",
  fill: "100%"
};
function boxStyle() {
  return BASE_STYLE$4;
}
function responsiveBoxStyle() {
  return [responsiveBoxSizingStyle, responsiveBoxHeightStyle, responsiveBoxOverflowStyle, responsiveBoxDisplayStyle];
}
function responsiveBoxDisplayStyle(props) {
  const {
    theme
  } = props;
  const {
    media
  } = theme.sanity;
  return _responsive(media, props.$display, (display) => ({
    "&:not([hidden])": {
      display
    }
  }));
}
function responsiveBoxSizingStyle(props) {
  const {
    theme
  } = props;
  const {
    media
  } = theme.sanity;
  return _responsive(media, props.$sizing, (sizing) => ({
    boxSizing: BOX_SIZING[sizing]
  }));
}
function responsiveBoxHeightStyle(props) {
  const {
    theme
  } = props;
  const {
    media
  } = theme.sanity;
  return _responsive(media, props.$height, (height) => ({
    height: BOX_HEIGHT[height]
  }));
}
function responsiveBoxOverflowStyle(props) {
  const {
    theme
  } = props;
  const {
    media
  } = theme.sanity;
  return _responsive(media, props.$overflow, (overflow) => ({
    overflow
  }));
}
var BASE_STYLE$3 = {
  "&&:not([hidden])": {
    display: "flex"
  }
};
function responsiveFlexStyle() {
  return [BASE_STYLE$3, responsiveFlexAlignStyle, responsiveFlexGapStyle, responsiveFlexWrapStyle, responsiveFlexJustifyStyle, responsiveFlexDirectionStyle];
}
function responsiveFlexAlignStyle(props) {
  const {
    theme
  } = props;
  const {
    media
  } = theme.sanity;
  return _responsive(media, props.$align, (align) => {
    return {
      alignItems: align
    };
  });
}
function responsiveFlexGapStyle(props) {
  const {
    theme
  } = props;
  const {
    media,
    space
  } = theme.sanity;
  return _responsive(media, props.$gap, (gap) => ({
    gap: gap ? rem(space[gap]) : void 0
  }));
}
function responsiveFlexWrapStyle(props) {
  const {
    theme
  } = props;
  const {
    media
  } = theme.sanity;
  return _responsive(media, props.$wrap, (wrap2) => {
    return {
      flexWrap: wrap2
    };
  });
}
function responsiveFlexJustifyStyle(props) {
  const {
    theme
  } = props;
  const {
    media
  } = theme.sanity;
  return _responsive(media, props.$justify, (justify) => {
    return {
      justifyContent: justify
    };
  });
}
function responsiveFlexDirectionStyle(props) {
  const {
    theme
  } = props;
  const {
    media
  } = theme.sanity;
  return _responsive(media, props.$direction, (direction) => {
    return {
      flexDirection: direction
    };
  });
}
var BASE_STYLE$2 = {
  minWidth: 0,
  minHeight: 0
};
function flexItemStyle() {
  return [BASE_STYLE$2, responsiveFlexItemStyle];
}
function responsiveFlexItemStyle(props) {
  const {
    theme
  } = props;
  const {
    media
  } = theme.sanity;
  if (!props.$flex)
    return EMPTY_ARRAY;
  return _responsive(media, props.$flex, (flex) => ({
    flex
  }));
}
function focusRingBorderStyle(border2) {
  return "inset 0 0 0 ".concat(border2.width, "px ").concat(border2.color);
}
function focusRingStyle(opts) {
  const {
    base,
    border: border2,
    focusRing
  } = opts;
  const focusRingOutsetWidth = focusRing.offset + focusRing.width;
  const focusRingInsetWidth = 0 - focusRing.offset;
  const bgColor = base ? base.bg : "var(--card-bg-color)";
  return [focusRingInsetWidth > 0 && "inset 0 0 0 ".concat(focusRingInsetWidth, "px var(--card-focus-ring-color)"), border2 && focusRingBorderStyle(border2), focusRingInsetWidth < 0 && "0 0 0 ".concat(0 - focusRingInsetWidth, "px ").concat(bgColor), focusRingOutsetWidth > 0 && "0 0 0 ".concat(focusRingOutsetWidth, "px var(--card-focus-ring-color)")].filter(Boolean).join(",");
}
var GRID_CSS = {
  "&&:not([hidden])": {
    display: "grid"
  },
  '&[data-as="ul"],&[data-as="ol"]': {
    listStyle: "none"
  }
};
var GRID_AUTO_COLUMS = {
  auto: "auto",
  min: "min-content",
  max: "max-content",
  fr: "minmax(0, 1fr)"
};
var GRID_AUTO_ROWS = {
  auto: "auto",
  min: "min-content",
  max: "max-content",
  fr: "minmax(0, 1fr)"
};
function responsiveGridStyle() {
  return [GRID_CSS, responsiveGridAutoFlowStyle, responsiveGridAutoRowsStyle, responsiveGridAutoColsStyle, responsiveGridColumnsStyle, responsiveGridRowsStyle, responsiveGridGapStyle, responsiveGridGapXStyle, responsiveGridGapYStyle];
}
function responsiveGridAutoFlowStyle(props) {
  const {
    theme
  } = props;
  const {
    media
  } = theme.sanity;
  return _responsive(media, props.$autoFlow, (autoFlow) => ({
    gridAutoFlow: autoFlow
  }));
}
function responsiveGridAutoRowsStyle(props) {
  const {
    theme
  } = props;
  const {
    media
  } = theme.sanity;
  return _responsive(media, props.$autoRows, (autoRows) => ({
    gridAutoRows: autoRows && GRID_AUTO_ROWS[autoRows]
  }));
}
function responsiveGridAutoColsStyle(props) {
  const {
    theme
  } = props;
  const {
    media
  } = theme.sanity;
  return _responsive(media, props.$autoCols, (autoCols) => ({
    gridAutoColumns: autoCols && GRID_AUTO_COLUMS[autoCols]
  }));
}
function responsiveGridColumnsStyle(props) {
  const {
    theme
  } = props;
  const {
    media
  } = theme.sanity;
  return _responsive(media, props.$columns, (columns) => ({
    gridTemplateColumns: columns && "repeat(".concat(columns, ",minmax(0,1fr));")
  }));
}
function responsiveGridRowsStyle(props) {
  const {
    theme
  } = props;
  const {
    media
  } = theme.sanity;
  return _responsive(media, props.$rows, (rows) => ({
    gridTemplateRows: rows && "repeat(".concat(rows, ",minmax(0,1fr));")
  }));
}
function responsiveGridGapStyle(props) {
  const {
    theme
  } = props;
  const {
    media,
    space
  } = theme.sanity;
  return _responsive(media, props.$gap, (gap) => ({
    gridGap: gap ? rem(space[gap]) : void 0
  }));
}
function responsiveGridGapXStyle(props) {
  const {
    theme
  } = props;
  const {
    media,
    space
  } = theme.sanity;
  return _responsive(media, props.$gapX, (gapX) => ({
    columnGap: gapX ? rem(space[gapX]) : void 0
  }));
}
function responsiveGridGapYStyle(props) {
  const {
    theme
  } = props;
  const {
    media,
    space
  } = theme.sanity;
  return _responsive(media, props.$gapY, (gapY) => ({
    rowGap: gapY ? rem(space[gapY]) : void 0
  }));
}
function responsiveGridItemStyle() {
  return [responsiveGridItemRowStyle, responsiveGridItemRowStartStyle, responsiveGridItemRowEndStyle, responsiveGridItemColumnStyle, responsiveGridItemColumnStartStyle, responsiveGridItemColumnEndStyle];
}
var GRID_ITEM_ROW = {
  auto: "auto",
  full: "1 / -1"
};
var GRID_ITEM_COLUMN = {
  auto: "auto",
  full: "1 / -1"
};
function responsiveGridItemRowStyle(props) {
  const {
    theme
  } = props;
  const {
    media
  } = theme.sanity;
  return _responsive(media, props.$row, (row) => {
    if (typeof row === "number") {
      return {
        gridRow: "span ".concat(row, " / span ").concat(row)
      };
    }
    return {
      gridRow: GRID_ITEM_ROW[row]
    };
  });
}
function responsiveGridItemRowStartStyle(props) {
  const {
    theme
  } = props;
  const {
    media
  } = theme.sanity;
  return _responsive(media, props.$rowStart, (rowStart) => ({
    gridRowStart: rowStart
  }));
}
function responsiveGridItemRowEndStyle(props) {
  const {
    theme
  } = props;
  const {
    media
  } = theme.sanity;
  return _responsive(media, props.$rowEnd, (rowEnd) => ({
    gridRowEnd: rowEnd
  }));
}
function responsiveGridItemColumnStyle(props) {
  const {
    theme
  } = props;
  const {
    media
  } = theme.sanity;
  return _responsive(media, props.$column, (column) => {
    if (typeof column === "number") {
      return {
        gridColumn: "span ".concat(column, " / span ").concat(column)
      };
    }
    return {
      gridColumn: GRID_ITEM_COLUMN[column]
    };
  });
}
function responsiveGridItemColumnStartStyle(props) {
  const {
    theme
  } = props;
  const {
    media
  } = theme.sanity;
  return _responsive(media, props.$columnStart, (columnStart) => ({
    gridColumnStart: columnStart
  }));
}
function responsiveGridItemColumnEndStyle(props) {
  const {
    theme
  } = props;
  const {
    media
  } = theme.sanity;
  return _responsive(media, props.$columnEnd, (columnEnd) => ({
    gridColumnEnd: columnEnd
  }));
}
function responsiveInputPaddingStyle(props) {
  const {
    $fontSize,
    $iconLeft,
    $iconRight,
    $padding,
    $space,
    theme
  } = props;
  const {
    fonts,
    media,
    space: spaceScale
  } = theme.sanity;
  const len = Math.max($padding.length, $space.length, $fontSize.length);
  const _padding = [];
  const _space = [];
  const _fontSize = [];
  for (let i = 0; i < len; i += 1) {
    _fontSize[i] = $fontSize[i] === void 0 ? _fontSize[i - 1] : $fontSize[i];
    _padding[i] = $padding[i] === void 0 ? _padding[i - 1] : $padding[i];
    _space[i] = $space[i] === void 0 ? _space[i - 1] : $space[i];
  }
  return _responsive(media, _padding, (_, i) => {
    const size3 = fonts.text.sizes[_fontSize[i]] || fonts.text.sizes[2];
    const emSize = size3.lineHeight - size3.ascenderHeight - size3.descenderHeight;
    const p = spaceScale[_padding[i]];
    const s = spaceScale[_space[i]];
    const styles = {
      paddingTop: rem(p - size3.ascenderHeight),
      paddingRight: rem(p),
      paddingBottom: rem(p - size3.descenderHeight),
      paddingLeft: rem(p)
    };
    if ($iconRight)
      styles.paddingRight = rem(p + emSize + s);
    if ($iconLeft)
      styles.paddingLeft = rem(p + emSize + s);
    return styles;
  });
}
function responsiveInputPaddingIconRightStyle(props) {
  return responsiveInputPaddingStyle({
    ...props,
    $iconRight: true
  });
}
var __freeze$D = Object.freeze;
var __defProp$E = Object.defineProperty;
var __template$D = (cooked, raw) => __freeze$D(__defProp$E(cooked, "raw", {
  value: __freeze$D(raw || cooked.slice())
}));
var _a$D;
var _b$m;
var _c$d;
var ROOT_STYLE = ct(_a$D || (_a$D = __template$D(["\n  &:not([hidden]) {\n    display: flex;\n  }\n\n  align-items: center;\n"])));
function textInputRootStyle() {
  return ROOT_STYLE;
}
function textInputBaseStyle(props) {
  const {
    theme,
    $scheme,
    $tone,
    $weight
  } = props;
  const font = theme.sanity.fonts.text;
  const color3 = theme.sanity.color.input;
  return ct(_b$m || (_b$m = __template$D(["\n    appearance: none;\n    background: none;\n    border: 0;\n    border-radius: 0;\n    outline: none;\n    width: 100%;\n    box-sizing: border-box;\n    font-family: ", ";\n    font-weight: ", ";\n    margin: 0;\n    position: relative;\n    z-index: 1;\n    display: block;\n\n    /* NOTE: This is a hack to disable Chrome’s autofill styles */\n    &:-webkit-autofill,\n    &:-webkit-autofill:hover,\n    &:-webkit-autofill:focus,\n    &:-webkit-autofill:active {\n      -webkit-text-fill-color: var(--input-fg-color) !important;\n      transition: background-color 5000s;\n      transition-delay: 86400s /* 24h */;\n    }\n\n    /* &:is(textarea) */\n    &[data-as='textarea'] {\n      resize: none;\n    }\n\n    color: var(--input-fg-color);\n\n    &::placeholder {\n      color: var(--input-placeholder-color);\n    }\n\n    &[data-scheme='", "'][data-tone='", "'] {\n      --input-fg-color: ", ";\n      --input-placeholder-color: ", ";\n\n      /* enabled */\n      &:not(:invalid):not(:disabled):not(:read-only) {\n        --input-fg-color: ", ";\n        --input-placeholder-color: ", ";\n      }\n\n      /* disabled */\n      &:not(:invalid):disabled {\n        --input-fg-color: ", ";\n        --input-placeholder-color: ", ";\n      }\n\n      /* invalid */\n      &:invalid {\n        --input-fg-color: ", ";\n        --input-placeholder-color: ", ";\n      }\n\n      /* readOnly */\n      &:read-only {\n        --input-fg-color: ", ";\n        --input-placeholder-color: ", ";\n      }\n    }\n  "])), font.family, $weight && font.weights[$weight] || font.weights.regular, $scheme, $tone, color3.default.enabled.fg, color3.default.enabled.placeholder, color3.default.enabled.fg, color3.default.enabled.placeholder, color3.default.disabled.fg, color3.default.disabled.placeholder, color3.invalid.enabled.fg, color3.invalid.enabled.placeholder, color3.default.readOnly.fg, color3.default.readOnly.placeholder);
}
function textInputFontSizeStyle(props) {
  const {
    theme
  } = props;
  const {
    fonts,
    media
  } = theme.sanity;
  return _responsive(media, props.$fontSize, (sizeIndex) => {
    const size3 = fonts.text.sizes[sizeIndex] || fonts.text.sizes[2];
    return {
      fontSize: rem(size3.fontSize),
      lineHeight: size3.lineHeight / size3.fontSize
    };
  });
}
function textInputRepresentationStyle(props) {
  const {
    $hasPrefix,
    $hasSuffix,
    $scheme,
    $tone,
    theme
  } = props;
  const {
    focusRing,
    input
  } = theme.sanity;
  const color3 = theme.sanity.color.input;
  return ct(_c$d || (_c$d = __template$D(["\n    --input-box-shadow: none;\n\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    display: block;\n    pointer-events: none;\n    z-index: 0;\n\n    background-color: var(--card-bg-color);\n    box-shadow: var(--input-box-shadow);\n\n    border-top-left-radius: ", ";\n    border-bottom-left-radius: ", ";\n    border-top-right-radius: ", ";\n    border-bottom-right-radius: ", ";\n\n    &[data-scheme='", "'][data-tone='", "'] {\n      --card-bg-color: ", ";\n      --card-fg-color: ", ";\n\n      /* enabled */\n      *:not(:disabled) + &[data-border] {\n        --input-box-shadow: ", ";\n      }\n\n      /* invalid */\n      *:not(:disabled):invalid + & {\n        --card-bg-color: ", ";\n        --card-fg-color: ", ";\n\n        &[data-border] {\n          --input-box-shadow: ", ";\n        }\n      }\n\n      /* focused */\n      *:not(:disabled):focus + & {\n        &[data-border] {\n          --input-box-shadow: ", ";\n        }\n\n        &:not([data-border]) {\n          --input-box-shadow: ", ";\n        }\n      }\n\n      /* disabled */\n      *:disabled + & {\n        --card-bg-color: ", " !important;\n        --card-fg-color: ", " !important;\n\n        &[data-border] {\n          --input-box-shadow: ", ";\n        }\n      }\n\n      /* readOnly */\n      *:read-only + & {\n        --card-bg-color: ", " !important;\n        --card-fg-color: ", " !important;\n      }\n\n      /* hovered */\n      @media (hover: hover) {\n        *:not(:disabled):not(:read-only):not(:invalid):hover + & {\n          --card-bg-color: ", ";\n          --card-fg-color: ", ";\n        }\n\n        *:not(:disabled):not(:read-only):not(:invalid):not(:focus):hover + &[data-border] {\n          --input-box-shadow: ", ";\n        }\n      }\n    }\n  "])), $hasPrefix ? 0 : void 0, $hasPrefix ? 0 : void 0, $hasSuffix ? 0 : void 0, $hasSuffix ? 0 : void 0, $scheme, $tone, color3.default.enabled.bg, color3.default.enabled.fg, focusRingBorderStyle({
    color: color3.default.enabled.border,
    width: input.border.width
  }), color3.invalid.enabled.bg, color3.invalid.enabled.fg, focusRingBorderStyle({
    color: color3.invalid.enabled.border,
    width: input.border.width
  }), focusRingStyle({
    border: {
      color: color3.default.enabled.border,
      width: input.border.width
    },
    focusRing
  }), focusRingStyle({
    focusRing
  }), color3.default.disabled.bg, color3.default.disabled.fg, focusRingBorderStyle({
    color: color3.default.disabled.border,
    width: input.border.width
  }), color3.default.readOnly.bg, color3.default.readOnly.fg, color3.default.hovered.bg, color3.default.hovered.fg, focusRingBorderStyle({
    color: color3.default.hovered.border,
    width: input.border.width
  }));
}
function responsiveMarginStyle(props) {
  const {
    theme
  } = props;
  return [_getResponsiveSpace(theme, ["margin"], props.$margin), _getResponsiveSpace(theme, ["marginLeft", "marginRight"], props.$marginX), _getResponsiveSpace(theme, ["marginTop", "marginBottom"], props.$marginY), _getResponsiveSpace(theme, ["marginTop"], props.$marginTop), _getResponsiveSpace(theme, ["marginRight"], props.$marginRight), _getResponsiveSpace(theme, ["marginBottom"], props.$marginBottom), _getResponsiveSpace(theme, ["marginLeft"], props.$marginLeft)].filter(Boolean);
}
function responsivePaddingStyle(props) {
  const {
    theme
  } = props;
  return [_getResponsiveSpace(theme, ["padding"], props.$padding), _getResponsiveSpace(theme, ["paddingLeft", "paddingRight"], props.$paddingX), _getResponsiveSpace(theme, ["paddingTop", "paddingBottom"], props.$paddingY), _getResponsiveSpace(theme, ["paddingTop"], props.$paddingTop), _getResponsiveSpace(theme, ["paddingRight"], props.$paddingRight), _getResponsiveSpace(theme, ["paddingBottom"], props.$paddingBottom), _getResponsiveSpace(theme, ["paddingLeft"], props.$paddingLeft)].filter(Boolean);
}
function responsiveRadiusStyle(props) {
  const {
    theme
  } = props;
  const {
    media,
    radius
  } = theme.sanity;
  return _responsive(media, props.$radius, (radiusIndex) => ({
    borderRadius: rem(radius[radiusIndex])
  }));
}
function toBoxShadow(shadow, color3) {
  return "".concat(shadow.map(rem).join(" "), " ").concat(color3);
}
function shadowStyle(shadow) {
  if (!shadow)
    return EMPTY_RECORD;
  const outline = "0 0 0 ".concat(rem(1), " var(--card-shadow-outline-color)");
  const umbra = toBoxShadow(shadow.umbra, "var(--card-shadow-umbra-color)");
  const penumbra = toBoxShadow(shadow.penumbra, "var(--card-shadow-penumbra-color)");
  const ambient = toBoxShadow(shadow.ambient, "var(--card-shadow-ambient-color)");
  return {
    boxShadow: "".concat(outline, ", ").concat(umbra, ", ").concat(penumbra, ", ").concat(ambient)
  };
}
function responsiveShadowStyle(props) {
  const {
    theme
  } = props;
  const {
    media,
    shadows
  } = theme.sanity;
  return _responsive(media, props.$shadow, (shadow) => shadowStyle(shadows[shadow]));
}
var __freeze$C = Object.freeze;
var __defProp$D = Object.defineProperty;
var __template$C = (cooked, raw) => __freeze$C(__defProp$D(cooked, "raw", {
  value: __freeze$C(raw || cooked.slice())
}));
var _a$C;
var _b$l;
var _c$c;
function textBaseStyle(props) {
  const {
    $accent,
    $muted,
    theme
  } = props;
  const {
    weights
  } = theme.sanity.fonts.text;
  return ct(_c$c || (_c$c = __template$C(["\n    color: var(--card-fg-color);\n\n    ", "\n\n    ", "\n\n    & code {\n      font-family: ", ";\n      border-radius: 1px;\n      background-color: var(--card-code-bg-color);\n      color: var(--card-code-fg-color);\n    }\n\n    & a {\n      text-decoration: none;\n      border-radius: 1px;\n      color: var(--card-link-color);\n      outline: none;\n\n      @media (hover: hover) {\n        &:hover {\n          text-decoration: underline;\n        }\n      }\n\n      &:focus {\n        box-shadow:\n          0 0 0 1px var(--card-bg-color),\n          0 0 0 3px var(--card-focus-ring-color);\n      }\n\n      &:focus:not(:focus-visible) {\n        box-shadow: none;\n      }\n    }\n\n    & strong {\n      font-weight: ", ";\n    }\n\n    & svg {\n      /* Certain popular CSS libraries changes the defaults for SVG display */\n      /* Make sure SVGs are rendered as inline elements */\n      display: inline;\n    }\n\n    & [data-sanity-icon] {\n      vertical-align: baseline;\n    }\n  "])), $accent && ct(_a$C || (_a$C = __template$C(["\n      color: var(--card-accent-fg-color);\n    "]))), $muted && ct(_b$l || (_b$l = __template$C(["\n      color: var(--card-muted-fg-color);\n    "]))), theme.sanity.fonts.code.family, weights.bold);
}
var __freeze$B = Object.freeze;
var __defProp$C = Object.defineProperty;
var __template$B = (cooked, raw) => __freeze$B(__defProp$C(cooked, "raw", {
  value: __freeze$B(raw || cooked.slice())
}));
var _a$B;
var Root$E = pt.div(responsiveTextFont, responsiveTextAlignStyle, textBaseStyle);
var SpanWithTextOverflow$2 = pt.span(_a$B || (_a$B = __template$B(["\n  display: block;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  overflow: clip;\n"])));
var Text = (0, import_react47.forwardRef)(function Text2(props, ref) {
  const {
    accent = false,
    align,
    children: childrenProp,
    muted = false,
    size: size3 = 2,
    textOverflow,
    weight,
    ...restProps
  } = props;
  let children = childrenProp;
  if (textOverflow === "ellipsis") {
    children = (0, import_jsx_runtime2.jsx)(SpanWithTextOverflow$2, {
      children
    });
  }
  return (0, import_jsx_runtime2.jsx)(Root$E, {
    "data-ui": "Text",
    ...restProps,
    $accent: accent,
    $align: useArrayProp(align),
    $muted: muted,
    ref,
    $size: useArrayProp(size3),
    $weight: weight,
    children: (0, import_jsx_runtime2.jsx)("span", {
      children
    })
  });
});
var avatarStyle = {
  root: avatarRootStyle,
  arrow: avatarArrowStyle,
  bgStroke: avatarBgStrokeStyle,
  stroke: avatarStrokeStyle,
  initials: avatarInitialsStyle
};
function avatarArrowStyle() {
  return {
    position: "absolute",
    boxSizing: "border-box",
    zIndex: 0,
    opacity: 0,
    transition: "all 0.2s linear",
    transform: "rotate(-90deg) translate3d(0, 6px, 0)",
    left: 0,
    right: 0,
    top: 0,
    bottom: 0,
    "& > svg": {
      width: "11px",
      height: "7px",
      position: "absolute",
      top: "-5px",
      left: "50%",
      transform: "translateX(-6px)",
      // @ts-expect-error -- TODO wait for CSSObject types to be fixed in `styled-components` itself
      "&:not([hidden])": {
        display: "block"
      }
    },
    "[data-arrow-position='inside'] > &": {
      transform: "rotate(-90deg) translate3d(0, 6px, 0)",
      opacity: 0
    },
    "[data-arrow-position='top'] > &": {
      opacity: 1,
      transform: "rotate(0deg)"
    },
    "[data-arrow-position='bottom'] > &": {
      opacity: 1,
      transform: "rotate(-180deg)"
    }
  };
}
function avatarRootStyle(props) {
  const {
    $color,
    theme
  } = props;
  const {
    focusRing
  } = theme.sanity;
  return {
    backgroundColor: $color,
    position: "relative",
    boxSizing: "border-box",
    userSelect: "none",
    boxShadow: "0 0 0 1px var(--card-bg-color)",
    '&[data-status="inactive"]': {
      opacity: 0.5
    },
    "&>svg": {
      // @ts-expect-error -- TODO wait for CSSObject types to be fixed in `styled-components` itself
      "&:not([hidden])": {
        display: "block"
      }
    },
    /* &:is(button) */
    '&[data-as="button"]': {
      WebkitFontSmoothing: "inherit",
      appearance: "none",
      margin: 0,
      padding: 0,
      border: 0,
      font: "inherit",
      color: "inherit",
      outline: "none",
      // @ts-expect-error -- TODO wait for CSSObject types to be fixed in `styled-components` itself
      "&:focus": {
        boxShadow: focusRingStyle({
          focusRing
        })
      },
      "&:focus:not(:focus-visible)": {
        boxShadow: "none"
      }
    }
  };
}
function responsiveAvatarSizeStyle(props) {
  const {
    theme
  } = props;
  const {
    avatar,
    media
  } = theme.sanity;
  return _responsive(media, props.$size, (size3) => {
    const avatarSize = avatar.sizes[size3] || avatar.sizes[0];
    return {
      width: rem(avatarSize.size),
      height: rem(avatarSize.size),
      borderRadius: rem(avatarSize.size / 2),
      "&>svg": {
        width: rem(avatarSize.size),
        height: rem(avatarSize.size),
        borderRadius: rem(avatarSize.size / 2)
      }
    };
  });
}
function avatarInitialsStyle(props) {
  const {
    theme
  } = props;
  const {
    base
  } = theme.sanity.color;
  return {
    width: "100%",
    height: "100%",
    color: base.fg,
    alignItems: "center",
    justifyContent: "center",
    textTransform: "uppercase",
    textAlign: "center",
    borderRadius: "50%",
    "&:not([hidden])": {
      display: "flex"
    }
  };
}
function avatarBgStrokeStyle() {
  return {
    strokeWidth: "4px",
    stroke: "var(--card-bg-color)"
  };
}
function avatarStrokeStyle() {
  return {
    strokeWidth: "3px",
    '[data-status="editing"] &': {
      strokeDasharray: "2 4",
      strokeLinecap: "round"
    }
  };
}
var Root$D = pt.div(responsiveAvatarSizeStyle, avatarStyle.root);
var Arrow = pt.div(avatarStyle.arrow);
var BgStroke = pt.ellipse(avatarStyle.bgStroke);
var Stroke = pt.ellipse(avatarStyle.stroke);
var Initials = pt.div(avatarStyle.initials);
var Avatar = (0, import_react47.forwardRef)(function Avatar2(props, ref) {
  const {
    as: asProp,
    color: colorKey = "gray",
    src,
    title,
    initials,
    onImageLoadError,
    arrowPosition: arrowPositionProp,
    animateArrowFrom,
    status = "online",
    size: sizeProp = 0,
    ...restProps
  } = props;
  const as = import_react_is.default.isValidElementType(asProp) ? asProp : "div";
  const size3 = useArrayProp(sizeProp);
  const theme = useTheme();
  const color3 = theme.sanity.color.spot[colorKey] || theme.sanity.color.spot.gray;
  const avatarSize = theme.sanity.avatar.sizes[size3[0]] || theme.sanity.avatar.sizes[0];
  const _sizeRem = avatarSize.size;
  const _radius = _sizeRem / 2;
  const elementId = (0, import_react47.useId)();
  const [arrowPosition, setArrowPosition] = (0, import_react47.useState)(animateArrowFrom || arrowPositionProp || "inside");
  const [imageFailed, setImageFailed] = (0, import_react47.useState)(false);
  const imageId = "avatar-image-".concat(elementId);
  (0, import_react47.useEffect)(() => {
    if (arrowPosition === arrowPositionProp)
      return void 0;
    const raf = requestAnimationFrame(() => setArrowPosition(arrowPositionProp));
    return () => cancelAnimationFrame(raf);
  }, [arrowPosition, arrowPositionProp]);
  (0, import_react47.useEffect)(() => {
    if (src)
      setImageFailed(false);
  }, [src]);
  const handleImageError = (0, import_react47.useCallback)(() => {
    setImageFailed(true);
    if (onImageLoadError) {
      onImageLoadError(new Error("Avatar: the image failed to load"));
    }
  }, [onImageLoadError]);
  const initialsSize = (0, import_react47.useMemo)(() => size3.map((s) => s === 0 ? 0 : s + 1), [size3]);
  return (0, import_jsx_runtime2.jsxs)(Root$D, {
    as,
    "data-as": typeof as === "string" ? as : void 0,
    "data-ui": "Avatar",
    ...restProps,
    $size: size3,
    $color: color3,
    "aria-label": title,
    "data-arrow-position": arrowPosition,
    "data-status": status,
    ref,
    title,
    children: [(0, import_jsx_runtime2.jsx)(Arrow, {
      children: (0, import_jsx_runtime2.jsx)("svg", {
        width: "11",
        height: "7",
        viewBox: "0 0 11 7",
        fill: "none",
        children: (0, import_jsx_runtime2.jsx)("path", {
          d: "M6.67948 1.50115L11 7L0 7L4.32052 1.50115C4.92109 0.736796 6.07891 0.736795 6.67948 1.50115Z",
          fill: color3
        })
      })
    }), !imageFailed && src && (0, import_jsx_runtime2.jsxs)("svg", {
      viewBox: "0 0 ".concat(_sizeRem, " ").concat(_sizeRem),
      fill: "none",
      children: [(0, import_jsx_runtime2.jsx)("defs", {
        children: (0, import_jsx_runtime2.jsx)("pattern", {
          id: imageId,
          patternContentUnits: "objectBoundingBox",
          width: "1",
          height: "1",
          children: (0, import_jsx_runtime2.jsx)("image", {
            href: src,
            width: "1",
            height: "1",
            onError: handleImageError
          })
        })
      }), (0, import_jsx_runtime2.jsx)("circle", {
        cx: _radius,
        cy: _radius,
        r: _radius,
        fill: "url(#".concat(imageId, ")")
      }), (0, import_jsx_runtime2.jsx)(BgStroke, {
        cx: _radius,
        cy: _radius,
        rx: _radius,
        ry: _radius,
        vectorEffect: "non-scaling-stroke"
      }), (0, import_jsx_runtime2.jsx)(Stroke, {
        cx: _radius,
        cy: _radius,
        rx: _radius,
        ry: _radius,
        stroke: color3,
        vectorEffect: "non-scaling-stroke"
      })]
    }), (imageFailed || !src) && initials && (0, import_jsx_runtime2.jsx)(import_jsx_runtime2.Fragment, {
      children: (0, import_jsx_runtime2.jsx)(Initials, {
        children: (0, import_jsx_runtime2.jsx)(Text, {
          as: "span",
          size: initialsSize,
          children: (0, import_jsx_runtime2.jsx)("strong", {
            children: initials
          })
        })
      })
    })]
  });
});
var __freeze$A = Object.freeze;
var __defProp$B = Object.defineProperty;
var __template$A = (cooked, raw) => __freeze$A(__defProp$B(cooked, "raw", {
  value: __freeze$A(raw || cooked.slice())
}));
var _a$A;
function _responsiveAvatarCounterSizeStyle(props) {
  const {
    theme
  } = props;
  const {
    avatar,
    media
  } = theme.sanity;
  return _responsive(media, props.$size, (size3) => {
    const avatarSize = avatar.sizes[size3];
    if (!avatarSize)
      return EMPTY_RECORD;
    return {
      borderRadius: rem(avatarSize.size / 2),
      minWidth: rem(avatarSize.size),
      height: rem(avatarSize.size)
    };
  });
}
function _avatarCounterBaseStyle(props) {
  const {
    theme
  } = props;
  return ct(_a$A || (_a$A = __template$A(["\n    align-items: center;\n    justify-content: center;\n    box-sizing: border-box;\n    user-select: none;\n    color: inherit;\n    color: var(--card-fg-color);\n    background: var(--card-bg-color);\n    box-shadow:\n      0 0 0 1px var(--card-bg-color),\n      inset 0 0 0 1.5px var(--card-hairline-hard-color);\n    padding: 0 ", ";\n\n    &:not([hidden]) {\n      display: flex;\n    }\n  "])), rem(theme.sanity.space[2]));
}
var Root$C = pt.div(_responsiveAvatarCounterSizeStyle, _avatarCounterBaseStyle);
var AvatarCounter = (0, import_react47.forwardRef)(function AvatarCounter2(props, ref) {
  const {
    count,
    size: sizeProp = 0
  } = props;
  const size3 = useArrayProp(sizeProp);
  const counterSize = (0, import_react47.useMemo)(() => size3.map((s) => s === 0 ? 0 : s + 1), [size3]);
  return (0, import_jsx_runtime2.jsx)(Root$C, {
    $size: size3,
    "data-ui": "AvatarCounter",
    ref,
    children: (0, import_jsx_runtime2.jsx)(Text, {
      as: "span",
      size: counterSize,
      children: (0, import_jsx_runtime2.jsx)("strong", {
        children: count
      })
    })
  });
});
function childrenToElementArray(children) {
  const childrenArray = Array.isArray(children) ? children : [children];
  return childrenArray.filter((node) => (0, import_react_is.isElement)(node) || (0, import_react_is.isFragment)(node) || typeof node === "string");
}
var __freeze$z = Object.freeze;
var __defProp$A = Object.defineProperty;
var __template$z = (cooked, raw) => __freeze$z(__defProp$A(cooked, "raw", {
  value: __freeze$z(raw || cooked.slice())
}));
var _a$z;
var BASE_STYLES = ct(_a$z || (_a$z = __template$z(["\n  white-space: nowrap;\n\n  & > div {\n    vertical-align: top;\n\n    &:not([hidden]) {\n      display: inline-block;\n    }\n  }\n"])));
function avatarStackStyle() {
  return BASE_STYLES;
}
function responsiveAvatarStackSizeStyle(props) {
  const {
    theme
  } = props;
  const {
    avatar,
    media
  } = theme.sanity;
  return _responsive(media, props.$size, (size3) => {
    const avatarSize = avatar.sizes[size3];
    if (!avatarSize)
      return EMPTY_RECORD;
    return {
      "& > div + div": {
        marginLeft: rem(avatarSize.distance)
      }
    };
  });
}
var Root$B = pt.div(responsiveAvatarStackSizeStyle, avatarStackStyle);
var AvatarStack = (0, import_react47.forwardRef)(function AvatarStack2(props, ref) {
  const {
    children: childrenProp,
    maxLength: maxLengthProp = 4,
    size: sizeProp = 0,
    ...restProps
  } = props;
  const children = childrenToElementArray(childrenProp).filter((child) => typeof child !== "string");
  const maxLength = Math.max(maxLengthProp, 0);
  const size3 = useArrayProp(sizeProp);
  const len = children.length;
  const visibleCount = maxLength - 1;
  const extraCount = len - visibleCount;
  const visibleChildren = extraCount > 1 ? children.slice(extraCount, len) : children;
  return (0, import_jsx_runtime2.jsxs)(Root$B, {
    "data-ui": "AvatarStack",
    ...restProps,
    ref,
    $size: size3,
    children: [len === 0 && (0, import_jsx_runtime2.jsx)("div", {
      children: (0, import_jsx_runtime2.jsx)(AvatarCounter, {
        count: len
      })
    }), len !== 0 && extraCount > 1 && (0, import_jsx_runtime2.jsx)("div", {
      children: (0, import_jsx_runtime2.jsx)(AvatarCounter, {
        count: extraCount,
        size: size3
      })
    }), visibleChildren.map((child, childIndex) => (0, import_jsx_runtime2.jsx)("div", {
      children: (0, import_react47.cloneElement)(child, {
        size: size3
      })
    }, String(childIndex)))]
  });
});
var Root$A = pt.div(boxStyle, flexItemStyle, responsiveBoxStyle, responsiveGridItemStyle, responsiveMarginStyle, responsivePaddingStyle);
var Box = (0, import_react47.forwardRef)(function Box2(props, ref) {
  const {
    as: asProp = "div",
    column,
    columnStart,
    columnEnd,
    display = "block",
    flex,
    height,
    margin = 0,
    marginX,
    marginY,
    marginTop,
    marginRight,
    marginBottom,
    marginLeft,
    overflow,
    padding = 0,
    paddingX,
    paddingY,
    paddingTop,
    paddingRight,
    paddingBottom,
    paddingLeft,
    row,
    rowStart,
    rowEnd,
    sizing,
    ...restProps
  } = props;
  return (0, import_jsx_runtime2.jsx)(Root$A, {
    "data-as": typeof asProp === "string" ? asProp : void 0,
    "data-ui": "Box",
    ...restProps,
    $column: useArrayProp(column),
    $columnStart: useArrayProp(columnStart),
    $columnEnd: useArrayProp(columnEnd),
    $display: useArrayProp(display),
    $flex: useArrayProp(flex),
    $height: useArrayProp(height),
    $margin: useArrayProp(margin),
    $marginX: useArrayProp(marginX),
    $marginY: useArrayProp(marginY),
    $marginTop: useArrayProp(marginTop),
    $marginRight: useArrayProp(marginRight),
    $marginBottom: useArrayProp(marginBottom),
    $marginLeft: useArrayProp(marginLeft),
    $overflow: useArrayProp(overflow),
    $padding: useArrayProp(padding),
    $paddingX: useArrayProp(paddingX),
    $paddingY: useArrayProp(paddingY),
    $paddingTop: useArrayProp(paddingTop),
    $paddingRight: useArrayProp(paddingRight),
    $paddingBottom: useArrayProp(paddingBottom),
    $paddingLeft: useArrayProp(paddingLeft),
    $row: useArrayProp(row),
    $rowStart: useArrayProp(rowStart),
    $rowEnd: useArrayProp(rowEnd),
    $sizing: useArrayProp(sizing),
    as: asProp,
    ref,
    children: props.children
  });
});
var __freeze$y = Object.freeze;
var __defProp$z = Object.defineProperty;
var __template$y = (cooked, raw) => __freeze$y(__defProp$z(cooked, "raw", {
  value: __freeze$y(raw || cooked.slice())
}));
var _a$y;
var _b$k;
var _c$b;
function labelBaseStyle(props) {
  const {
    $accent,
    $muted,
    theme
  } = props;
  const {
    fonts
  } = theme.sanity;
  return ct(_c$b || (_c$b = __template$y(["\n    text-transform: uppercase;\n\n    ", "\n\n    ", "\n\n    & code {\n      font-family: ", ";\n      border-radius: 1px;\n    }\n\n    & a {\n      text-decoration: none;\n      border-radius: 1px;\n    }\n\n    & svg {\n      /* Certain popular CSS libraries changes the defaults for SVG display */\n      /* Make sure SVGs are rendered as inline elements */\n      display: inline;\n    }\n\n    & [data-sanity-icon] {\n      vertical-align: baseline;\n    }\n  "])), $accent && ct(_a$y || (_a$y = __template$y(["\n      color: var(--card-accent-fg-color);\n    "]))), $muted && ct(_b$k || (_b$k = __template$y(["\n      color: var(--card-muted-fg-color);\n    "]))), fonts.code.family);
}
var __freeze$x = Object.freeze;
var __defProp$y = Object.defineProperty;
var __template$x = (cooked, raw) => __freeze$x(__defProp$y(cooked, "raw", {
  value: __freeze$x(raw || cooked.slice())
}));
var _a$x;
var Root$z = pt.div(responsiveLabelFont, responsiveTextAlignStyle, labelBaseStyle);
var SpanWithTextOverflow$1 = pt.span(_a$x || (_a$x = __template$x(["\n  display: block;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  overflow: clip;\n"])));
var Label = (0, import_react47.forwardRef)(function Label2(props, ref) {
  const {
    accent,
    align,
    children: childrenProp,
    muted = false,
    size: size3 = 2,
    textOverflow,
    weight,
    ...restProps
  } = props;
  let children = childrenProp;
  if (textOverflow === "ellipsis") {
    children = (0, import_jsx_runtime2.jsx)(SpanWithTextOverflow$1, {
      children
    });
  } else {
    children = (0, import_jsx_runtime2.jsx)("span", {
      children
    });
  }
  return (0, import_jsx_runtime2.jsx)(Root$z, {
    "data-ui": "Label",
    ...restProps,
    $accent: accent,
    $align: useArrayProp(align),
    $muted: muted,
    $size: useArrayProp(size3),
    $weight: weight,
    ref,
    children
  });
});
function badgeStyle(props) {
  const {
    $mode,
    $tone,
    theme
  } = props;
  const palette = theme.sanity.color[$mode === "outline" ? "muted" : "solid"];
  const color3 = palette[$tone] || palette.default;
  return {
    backgroundColor: color3.enabled.bg,
    color: color3.enabled.fg,
    boxShadow: "inset 0 0 0 1px ".concat(color3.enabled.border),
    cursor: "default",
    "&:not([hidden])": {
      display: "inline-block"
    }
  };
}
var Root$y = pt(Box)(responsiveRadiusStyle, badgeStyle);
var Badge = (0, import_react47.forwardRef)(function Badge2(props, ref) {
  const {
    children,
    fontSize: fontSize2,
    mode = "default",
    padding = 1,
    radius = 2,
    tone = "default",
    ...restProps
  } = props;
  return (0, import_jsx_runtime2.jsx)(Root$y, {
    "data-ui": "Badge",
    ...restProps,
    $mode: mode,
    $tone: tone,
    $radius: useArrayProp(radius),
    padding: useArrayProp(padding),
    ref,
    children: (0, import_jsx_runtime2.jsx)(Label, {
      size: fontSize2,
      children
    })
  });
});
var Root$x = pt(Box)(flexItemStyle, responsiveFlexStyle);
var Flex = (0, import_react47.forwardRef)(function Flex2(props, ref) {
  const {
    align,
    as,
    direction = "row",
    gap,
    justify,
    wrap: wrap2,
    ...restProps
  } = props;
  return (
    // @ts-expect-error -- some dollar prefixed typings aren't inferred correctly https://github.com/styled-components/styled-components/issues/4062
    (0, import_jsx_runtime2.jsx)(Root$x, {
      "data-ui": "Flex",
      ...restProps,
      $align: useArrayProp(align),
      $direction: useArrayProp(direction),
      $gap: useArrayProp(gap),
      $justify: useArrayProp(justify),
      $wrap: useArrayProp(wrap2),
      forwardedAs: as,
      ref
    })
  );
});
var __freeze$w = Object.freeze;
var __defProp$x = Object.defineProperty;
var __template$w = (cooked, raw) => __freeze$w(__defProp$x(cooked, "raw", {
  value: __freeze$w(raw || cooked.slice())
}));
var _a$w;
var _b$j;
var rotate$1 = ft(_a$w || (_a$w = __template$w(["\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(360deg);\n  }\n"])));
var Root$w = pt(Text)(_b$j || (_b$j = __template$w(["\n  & > span > svg {\n    animation: ", " 500ms linear infinite;\n  }\n"])), rotate$1);
var Spinner = (0, import_react47.forwardRef)(function Spinner2(props, ref) {
  return (0, import_jsx_runtime2.jsx)(Root$w, {
    "data-ui": "Spinner",
    ...props,
    ref,
    children: (0, import_jsx_runtime2.jsx)(SpinnerIcon, {})
  });
});
function _colorVarsStyle(base, color3) {
  let checkered = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  var _a3, _b2, _c2, _d2, _e2, _f2, _g2, _h;
  return {
    // Base
    // @todo: rename to "--base-"?
    "--card-shadow-outline-color": base.shadow.outline,
    "--card-shadow-umbra-color": base.shadow.umbra,
    "--card-shadow-penumbra-color": base.shadow.penumbra,
    "--card-shadow-ambient-color": base.shadow.ambient,
    "--card-focus-ring-color": base.focusRing,
    // Card
    "--card-bg-color": color3.bg,
    "--card-bg-image": checkered ? "repeating-conic-gradient(".concat(color3.bg, " 0% 25%, ").concat(color3.bg2 || color3.bg, " 0% 50%)") : void 0,
    "--card-fg-color": color3.fg,
    "--card-border-color": color3.border,
    "--card-muted-fg-color": (_a3 = color3.muted) == null ? void 0 : _a3.fg,
    "--card-accent-fg-color": (_b2 = color3.accent) == null ? void 0 : _b2.fg,
    "--card-link-fg-color": (_c2 = color3.link) == null ? void 0 : _c2.fg,
    "--card-code-bg-color": (_d2 = color3.code) == null ? void 0 : _d2.bg,
    "--card-code-fg-color": (_e2 = color3.code) == null ? void 0 : _e2.fg,
    "--card-skeleton-color-from": (_f2 = color3.skeleton) == null ? void 0 : _f2.from,
    "--card-skeleton-color-to": (_g2 = color3.skeleton) == null ? void 0 : _g2.to,
    // @todo: deprecate
    "--card-link-color": (_h = color3.link) == null ? void 0 : _h.fg,
    "--card-hairline-soft-color": color3.border,
    "--card-hairline-hard-color": color3.border
  };
}
var __freeze$v = Object.freeze;
var __defProp$w = Object.defineProperty;
var __template$v = (cooked, raw) => __freeze$v(__defProp$w(cooked, "raw", {
  value: __freeze$v(raw || cooked.slice())
}));
var _a$v;
function buttonBaseStyles() {
  return ct(_a$v || (_a$v = __template$v(["\n    -webkit-font-smoothing: inherit;\n    appearance: none;\n    display: inline-flex;\n    align-items: center;\n    font: inherit;\n    border: 0;\n    outline: none;\n    user-select: none;\n    text-decoration: none;\n    border: 0;\n    box-sizing: border-box;\n    padding: 0;\n    margin: 0;\n    white-space: nowrap;\n    text-align: left;\n    position: relative;\n\n    & > span {\n      display: block;\n      flex: 1;\n      min-width: 0;\n      border-radius: inherit;\n    }\n\n    &::-moz-focus-inner {\n      border: 0;\n      padding: 0;\n    }\n  "])));
}
var buttonTheme = {
  border: {
    width: 1
  }
};
function buttonColorStyles(props) {
  var _a22, _b2;
  const {
    $mode,
    theme
  } = props;
  const {
    focusRing
  } = theme.sanity;
  const base = theme.sanity.color.base;
  const mode = theme.sanity.color.button[$mode] || theme.sanity.color.button.default;
  const color3 = mode[props.$tone] || mode.default;
  const border2 = {
    width: buttonTheme.border.width,
    color: "var(--card-border-color)"
  };
  return [_colorVarsStyle(base, color3.enabled), {
    backgroundColor: "var(--card-bg-color)",
    color: "var(--card-fg-color)",
    boxShadow: focusRingBorderStyle(border2),
    '&:disabled, &[data-disabled="true"]': _colorVarsStyle(base, color3.disabled),
    "&:not([data-disabled='true'])": {
      "&:focus": {
        boxShadow: focusRingStyle({
          base,
          border: border2,
          focusRing
        })
      },
      "&:focus:not(:focus-visible)": {
        boxShadow: focusRingBorderStyle(border2)
      },
      "@media (hover: hover)": {
        "&:hover": _colorVarsStyle(base, color3.hovered),
        "&:active": _colorVarsStyle(base, color3.pressed),
        "&[data-hovered]": _colorVarsStyle(base, color3.hovered)
      },
      "&[data-selected]": _colorVarsStyle(base, color3.pressed)
    }
  }, (_b2 = (_a22 = theme.sanity.styles) == null ? void 0 : _a22.button) == null ? void 0 : _b2.root].filter(Boolean);
}
var __freeze$u = Object.freeze;
var __defProp$v = Object.defineProperty;
var __template$u = (cooked, raw) => __freeze$u(__defProp$v(cooked, "raw", {
  value: __freeze$u(raw || cooked.slice())
}));
var _a$u;
var Root$v = pt.button(responsiveRadiusStyle, buttonBaseStyles, buttonColorStyles);
var LoadingBox = pt.div(_a$u || (_a$u = __template$u(["\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: var(--card-bg-color);\n  border-radius: inherit;\n  z-index: 1;\n  box-shadow: inherit;\n"])));
var Button = (0, import_react47.forwardRef)(function Button2(props, ref) {
  const {
    children,
    disabled,
    fontSize: fontSize2,
    icon,
    iconRight,
    justify: justifyProp = "center",
    loading,
    mode = "default",
    padding: paddingProp = 3,
    paddingX: paddingXProp,
    paddingY: paddingYProp,
    paddingTop: paddingTopProp,
    paddingBottom: paddingBottomProp,
    paddingLeft: paddingLeftProp,
    paddingRight: paddingRightProp,
    radius: radiusProp = 2,
    selected,
    space: spaceProp = 3,
    text,
    textAlign,
    tone = "default",
    type = "button",
    ...restProps
  } = props;
  const justify = useArrayProp(justifyProp);
  const padding = useArrayProp(paddingProp);
  const paddingX = useArrayProp(paddingXProp);
  const paddingY = useArrayProp(paddingYProp);
  const paddingTop = useArrayProp(paddingTopProp);
  const paddingBottom = useArrayProp(paddingBottomProp);
  const paddingLeft = useArrayProp(paddingLeftProp);
  const paddingRight = useArrayProp(paddingRightProp);
  const radius = useArrayProp(radiusProp);
  const space = useArrayProp(spaceProp);
  const theme = useTheme();
  const boxProps = (0, import_react47.useMemo)(() => ({
    // flex: 1,
    padding,
    paddingX,
    paddingY,
    paddingTop,
    paddingBottom,
    paddingLeft,
    paddingRight
  }), [padding, paddingX, paddingY, paddingTop, paddingBottom, paddingLeft, paddingRight]);
  return (0, import_jsx_runtime2.jsxs)(Root$v, {
    "data-ui": "Button",
    ...restProps,
    $mode: mode,
    $radius: radius,
    $tone: tone,
    "data-disabled": Boolean(loading || disabled),
    "data-selected": selected ? "" : void 0,
    disabled: Boolean(loading || disabled),
    ref,
    type,
    children: [Boolean(loading) && (0, import_jsx_runtime2.jsx)(LoadingBox, {
      children: (0, import_jsx_runtime2.jsx)(Spinner, {})
    }), (icon || text || iconRight) && (0, import_jsx_runtime2.jsx)(Box, {
      as: "span",
      ...boxProps,
      children: (0, import_jsx_runtime2.jsxs)(Flex, {
        as: "span",
        justify,
        children: [icon && (0, import_jsx_runtime2.jsxs)(Text, {
          size: fontSize2,
          children: [(0, import_react47.isValidElement)(icon) && icon, (0, import_react_is.isValidElementType)(icon) && (0, import_react47.createElement)(icon)]
        }), text && (0, import_jsx_runtime2.jsx)(Box, {
          flex: iconRight ? 1 : void 0,
          marginLeft: icon ? space : void 0,
          marginRight: iconRight ? space : void 0,
          children: (0, import_jsx_runtime2.jsx)(Text, {
            align: textAlign,
            size: fontSize2,
            textOverflow: "ellipsis",
            weight: theme.sanity.button.textWeight,
            children: text
          })
        }), iconRight && (0, import_jsx_runtime2.jsxs)(Text, {
          size: fontSize2,
          children: [(0, import_react47.isValidElement)(iconRight) && iconRight, (0, import_react_is.isValidElementType)(iconRight) && (0, import_react47.createElement)(iconRight)]
        })]
      })
    }), children && (0, import_jsx_runtime2.jsx)(Box, {
      as: "span",
      ...boxProps,
      children
    })]
  });
});
var __freeze$t = Object.freeze;
var __defProp$u = Object.defineProperty;
var __template$t = (cooked, raw) => __freeze$t(__defProp$u(cooked, "raw", {
  value: __freeze$t(raw || cooked.slice())
}));
var _a$t;
var _b$i;
var _c$a;
function cardStyle(props) {
  return [cardBaseStyle(props), cardColorStyle(props)];
}
function cardBaseStyle(props) {
  const {
    $checkered,
    theme
  } = props;
  const space = theme.sanity.space;
  return ct(_b$i || (_b$i = __template$t(["\n    ", "\n\n    &[data-as='button'] {\n      -webkit-font-smoothing: inherit;\n      appearance: none;\n      outline: none;\n      font: inherit;\n      text-align: inherit;\n      border: 0;\n      width: -webkit-fill-available;\n      width: stretch;\n    }\n\n    /* &:is(a) */\n    &[data-as='a'] {\n      outline: none;\n      text-decoration: none;\n    }\n\n    /* &:is(pre) */\n    &[data-as='pre'] {\n      font: inherit;\n    }\n  "])), $checkered && ct(_a$t || (_a$t = __template$t(["\n      background-size: ", "px ", "px;\n      background-position: 50% 50%;\n      background-image: var(--card-bg-image);\n    "])), space[3], space[3]));
}
function cardColorStyle(props) {
  var _a22, _b2;
  const {
    $checkered,
    $focusRing,
    theme
  } = props;
  const {
    focusRing
  } = theme.sanity;
  const {
    base,
    card,
    dark
  } = theme.sanity.color;
  const border2 = {
    width: 0,
    color: "var(--card-border-color)"
  };
  return ct(_c$a || (_c$a = __template$t(["\n    color-scheme: ", ";\n\n    ", "\n\n    background-color: var(--card-bg-color);\n    color: var(--card-fg-color);\n\n    /* &:is(button) */\n    &[data-as='button'] {\n      --card-focus-ring-box-shadow: none;\n\n      cursor: default;\n      box-shadow: var(--card-focus-ring-box-shadow);\n\n      &:disabled {\n        ", "\n      }\n\n      &:not(:disabled) {\n        &[data-pressed] {\n          ", "\n        }\n\n        &[data-selected] {\n          ", "\n        }\n\n        @media (hover: hover) {\n          &:not([data-pressed]):not([data-selected]) {\n            &[data-hovered],\n            &:hover {\n              ", "\n            }\n\n            &:active {\n              ", "\n            }\n          }\n        }\n\n        &:focus {\n          --card-focus-ring-box-shadow: ", ";\n        }\n\n        &:focus:not(:focus-visible) {\n          --card-focus-ring-box-shadow: ", ";\n        }\n      }\n    }\n\n    /* &:is(a) */\n    &[data-as='a'] {\n      cursor: pointer;\n      box-shadow: var(--card-focus-ring-box-shadow);\n\n      &[data-disabled] {\n        ", "\n      }\n\n      &:not([data-disabled]) {\n        &[data-pressed] {\n          ", "\n        }\n\n        &[data-selected] {\n          ", "\n        }\n\n        @media (hover: hover) {\n          &:not([data-pressed]):not([data-selected]) {\n            &[data-hovered],\n            &:hover {\n              ", "\n            }\n\n            &:active {\n              ", "\n            }\n          }\n        }\n\n        &:focus {\n          --card-focus-ring-box-shadow: ", ";\n        }\n\n        &:focus:not(:focus-visible) {\n          --card-focus-ring-box-shadow: ", ";\n        }\n      }\n    }\n\n    ", "\n  "])), dark ? "dark" : "light", _colorVarsStyle(base, card.enabled, $checkered), _colorVarsStyle(base, card.disabled, $checkered), _colorVarsStyle(base, card.pressed, $checkered), _colorVarsStyle(base, card.selected, $checkered), _colorVarsStyle(base, card.hovered, $checkered), _colorVarsStyle(base, card.pressed, $checkered), $focusRing ? focusRingStyle({
    base,
    border: border2,
    focusRing
  }) : void 0, $focusRing ? focusRingBorderStyle(border2) : void 0, _colorVarsStyle(base, card.disabled, $checkered), _colorVarsStyle(base, card.pressed, $checkered), _colorVarsStyle(base, card.selected, $checkered), _colorVarsStyle(base, card.hovered, $checkered), _colorVarsStyle(base, card.pressed, $checkered), $focusRing ? focusRingStyle({
    base,
    border: border2,
    focusRing
  }) : void 0, $focusRing ? focusRingBorderStyle(border2) : void 0, (_b2 = (_a22 = theme.sanity.styles) == null ? void 0 : _a22.card) == null ? void 0 : _b2.root);
}
var Root$u = pt(Box)(responsiveBorderStyle, responsiveRadiusStyle, responsiveShadowStyle, cardStyle);
var Card = (0, import_react47.forwardRef)(function Card2(props, ref) {
  const {
    __unstable_checkered: checkered = false,
    __unstable_focusRing: focusRing = false,
    as: asProp,
    border: border2,
    borderTop: borderTop2,
    borderRight: borderRight2,
    borderBottom: borderBottom2,
    borderLeft: borderLeft2,
    pressed,
    radius = 0,
    scheme,
    selected,
    shadow,
    tone: toneProp = "default",
    ...restProps
  } = props;
  const as = (0, import_react_is.isValidElementType)(asProp) ? asProp : "div";
  const rootTheme = useRootTheme();
  const tone = toneProp === "inherit" ? rootTheme.tone : toneProp;
  return (0, import_jsx_runtime2.jsx)(ThemeColorProvider, {
    scheme,
    tone,
    children: (0, import_jsx_runtime2.jsx)(Root$u, {
      "data-as": typeof as === "string" ? as : void 0,
      "data-scheme": rootTheme.scheme,
      "data-ui": "Card",
      "data-tone": tone,
      ...restProps,
      $border: useArrayProp(border2),
      $borderTop: useArrayProp(borderTop2),
      $borderRight: useArrayProp(borderRight2),
      $borderBottom: useArrayProp(borderBottom2),
      $borderLeft: useArrayProp(borderLeft2),
      $checkered: checkered,
      $focusRing: focusRing,
      $radius: useArrayProp(radius),
      $shadow: useArrayProp(shadow),
      $tone: tone,
      "data-checkered": checkered ? "" : void 0,
      "data-pressed": pressed ? "" : void 0,
      "data-selected": selected ? "" : void 0,
      forwardedAs: as,
      ref,
      selected
    })
  });
});
var __freeze$s = Object.freeze;
var __defProp$t = Object.defineProperty;
var __template$s = (cooked, raw) => __freeze$s(__defProp$t(cooked, "raw", {
  value: __freeze$s(raw || cooked.slice())
}));
var _a$s;
var _b$h;
function checkboxBaseStyles() {
  return ct(_a$s || (_a$s = __template$s(["\n    position: relative;\n    display: inline-block;\n  "])));
}
function inputElementStyles(props) {
  const {
    theme
  } = props;
  const color3 = theme.sanity.color.input;
  const {
    focusRing,
    input,
    radius
  } = theme.sanity;
  return ct(_b$h || (_b$h = __template$s(["\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    outline: none;\n    opacity: 0;\n    z-index: 1;\n    padding: 0;\n    margin: 0;\n\n    & + span {\n      position: relative;\n      display: block;\n      height: ", ";\n      width: ", ";\n      box-sizing: border-box;\n      box-shadow: ", ";\n      border-radius: ", ";\n      line-height: 1;\n      background-color: ", ";\n\n      & > svg {\n        display: block;\n        position: absolute;\n        opacity: 0;\n        height: 100%;\n        width: 100%;\n\n        & > path {\n          vector-effect: non-scaling-stroke;\n          stroke-width: 2 !important;\n        }\n      }\n    }\n\n    &:not(:disabled):focus + span {\n      box-shadow: ", ";\n    }\n\n    &:not(:disabled):focus:not(:focus-visible) + span {\n      box-shadow: ", ";\n    }\n\n    &:checked + span > svg:first-child {\n      opacity: 1;\n    }\n\n    &[data-read-only] + span {\n      background-color: ", ";\n      box-shadow: ", ";\n      color: ", ";\n    }\n\n    &:not([data-read-only]):disabled + span {\n      background-color: ", ";\n      box-shadow: ", ";\n      color: ", ";\n    }\n\n    &:indeterminate + span > svg:last-child {\n      opacity: 1;\n    }\n  "])), rem(input.checkbox.size), rem(input.checkbox.size), focusRingBorderStyle({
    color: color3.default.enabled.border,
    width: input.border.width
  }), rem(radius[2]), color3.default.enabled.bg, focusRingStyle({
    border: {
      width: input.border.width,
      color: color3.default.enabled.border
    },
    focusRing
  }), focusRingBorderStyle({
    color: color3.default.enabled.border,
    width: input.border.width
  }), color3.default.readOnly.bg, focusRingBorderStyle({
    width: input.border.width,
    color: color3.default.readOnly.border
  }), color3.default.readOnly.fg, color3.default.disabled.bg, focusRingBorderStyle({
    width: input.border.width,
    color: color3.default.disabled.border
  }), color3.default.disabled.fg);
}
var Root$t = pt.div(checkboxBaseStyles);
var Input$5 = pt.input(inputElementStyles);
var Checkbox = (0, import_react47.forwardRef)(function Checkbox2(props, forwardedRef) {
  const {
    checked,
    className,
    disabled,
    indeterminate,
    customValidity,
    readOnly,
    style,
    ...restProps
  } = props;
  const ref = useForwardedRef(forwardedRef);
  useCustomValidity(ref, customValidity);
  (0, import_react47.useEffect)(() => {
    if (ref.current) {
      ref.current.indeterminate = indeterminate || false;
    }
  }, [indeterminate, ref]);
  return (0, import_jsx_runtime2.jsxs)(Root$t, {
    className,
    "data-ui": "Checkbox",
    style,
    children: [(0, import_jsx_runtime2.jsx)(Input$5, {
      "data-read-only": !disabled && readOnly ? "" : void 0,
      ...restProps,
      checked,
      disabled: disabled || readOnly,
      type: "checkbox",
      readOnly,
      ref
    }), (0, import_jsx_runtime2.jsxs)("span", {
      children: [(0, import_jsx_runtime2.jsx)(CheckmarkIcon, {}), (0, import_jsx_runtime2.jsx)(RemoveIcon, {})]
    })]
  });
});
var __freeze$r = Object.freeze;
var __defProp$s = Object.defineProperty;
var __template$r = (cooked, raw) => __freeze$r(__defProp$s(cooked, "raw", {
  value: __freeze$r(raw || cooked.slice())
}));
var _a$r;
function codeSyntaxHighlightingStyle(_ref20) {
  let {
    theme
  } = _ref20;
  const color3 = theme.sanity.color.syntax;
  return {
    "&.atrule": {
      color: color3.atrule
    },
    "&.attr-name": {
      color: color3.attrName
    },
    "&.attr-value": {
      color: color3.attrValue
    },
    "&.attribute": {
      color: color3.attribute
    },
    "&.boolean": {
      color: color3.boolean
    },
    "&.builtin": {
      color: color3.builtin
    },
    "&.cdata": {
      color: color3.cdata
    },
    "&.char": {
      color: color3.char
    },
    "&.class": {
      color: color3.class
    },
    "&.class-name": {
      color: color3.className
    },
    "&.comment": {
      color: color3.comment
    },
    "&.constant": {
      color: color3.constant
    },
    "&.deleted": {
      color: color3.deleted
    },
    "&.doctype": {
      color: color3.doctype
    },
    "&.entity": {
      color: color3.entity
    },
    "&.function": {
      color: color3.function
    },
    "&.hexcode": {
      color: color3.hexcode
    },
    "&.id": {
      color: color3.id
    },
    "&.important": {
      color: color3.important
    },
    "&.inserted": {
      color: color3.inserted
    },
    "&.keyword": {
      color: color3.keyword
    },
    "&.number": {
      color: color3.number
    },
    "&.operator": {
      color: color3.operator
    },
    "&.prolog": {
      color: color3.prolog
    },
    "&.property": {
      color: color3.property
    },
    "&.pseudo-class": {
      color: color3.pseudoClass
    },
    "&.pseudo-element": {
      color: color3.pseudoElement
    },
    "&.punctuation": {
      color: color3.punctuation
    },
    "&.regex": {
      color: color3.regex
    },
    "&.selector": {
      color: color3.selector
    },
    "&.string": {
      color: color3.string
    },
    "&.symbol": {
      color: color3.symbol
    },
    "&.tag": {
      color: color3.tag
    },
    "&.unit": {
      color: color3.unit
    },
    "&.url": {
      color: color3.url
    },
    "&.variable": {
      color: color3.variable
    }
  };
}
function codeBaseStyle() {
  return ct(_a$r || (_a$r = __template$r(["\n    color: var(--card-code-fg-color);\n\n    & code {\n      font-family: inherit;\n\n      &.refractor .token {\n        ", "\n      }\n    }\n\n    & a {\n      color: inherit;\n      text-decoration: underline;\n      border-radius: 1px;\n    }\n\n    & svg {\n      /* Certain popular CSS libraries changes the defaults for SVG display */\n      /* Make sure SVGs are rendered as inline elements */\n      display: inline;\n    }\n\n    & [data-sanity-icon] {\n      vertical-align: baseline;\n    }\n  "])), codeSyntaxHighlightingStyle);
}
var Root$s = pt.pre(codeBaseStyle, responsiveCodeFontStyle);
var Code = (0, import_react47.forwardRef)(function Code2(props, ref) {
  const {
    children,
    language: languageProp,
    size: size3 = 2,
    weight,
    ...restProps
  } = props;
  const language = typeof languageProp === "string" ? languageProp : void 0;
  const registered = language ? import_react_refractor.default.hasLanguage(language) : false;
  return (0, import_jsx_runtime2.jsxs)(Root$s, {
    "data-ui": "Code",
    ...restProps,
    $size: useArrayProp(size3),
    $weight: weight,
    ref,
    children: [!(language && registered) && (0, import_jsx_runtime2.jsx)("code", {
      children
    }), language && registered && (0, import_jsx_runtime2.jsx)(import_react_refractor.default, {
      inline: true,
      language,
      value: String(children)
    })]
  });
});
var BASE_STYLE$1 = {
  width: "100%",
  margin: "0 auto"
};
function containerBaseStyle() {
  return BASE_STYLE$1;
}
function responsiveContainerWidthStyle(props) {
  const {
    theme
  } = props;
  const {
    container,
    media
  } = theme.sanity;
  return _responsive(media, props.$width, (val) => ({
    maxWidth: val === "auto" ? "none" : rem(container[val])
  }));
}
var Root$r = pt(Box)(containerBaseStyle, responsiveContainerWidthStyle);
var Container = (0, import_react47.forwardRef)(function Container2(props, ref) {
  const {
    as,
    width = 2,
    ...restProps
  } = props;
  return (0, import_jsx_runtime2.jsx)(Root$r, {
    "data-ui": "Container",
    ...restProps,
    $width: useArrayProp(width),
    forwardedAs: as,
    ref
  });
});
var Root$q = pt(Box)(responsiveGridStyle);
var Grid = (0, import_react47.forwardRef)(function Grid2(props, ref) {
  const {
    as,
    autoRows,
    autoCols,
    autoFlow,
    columns,
    gap,
    gapX,
    gapY,
    rows,
    children,
    ...restProps
  } = props;
  return (0, import_jsx_runtime2.jsx)(Root$q, {
    "data-as": typeof as === "string" ? as : void 0,
    "data-ui": "Grid",
    ...restProps,
    $autoRows: useArrayProp(autoRows),
    $autoCols: useArrayProp(autoCols),
    $autoFlow: useArrayProp(autoFlow),
    $columns: useArrayProp(columns),
    $gap: useArrayProp(gap),
    $gapX: useArrayProp(gapX),
    $gapY: useArrayProp(gapY),
    $rows: useArrayProp(rows),
    forwardedAs: as,
    ref,
    children
  });
});
var __freeze$q = Object.freeze;
var __defProp$r = Object.defineProperty;
var __template$q = (cooked, raw) => __freeze$q(__defProp$r(cooked, "raw", {
  value: __freeze$q(raw || cooked.slice())
}));
var _a$q;
var _b$g;
var _c$9;
function headingBaseStyle(props) {
  const {
    $accent,
    $muted,
    theme
  } = props;
  return ct(_c$9 || (_c$9 = __template$q(["\n    ", "\n\n    ", "\n\n    & code {\n      font-family: ", ";\n      border-radius: 1px;\n    }\n\n    & a {\n      text-decoration: none;\n      border-radius: 1px;\n      color: var(--card-link-color);\n      outline: none;\n\n      @media (hover: hover) {\n        &:hover {\n          text-decoration: underline;\n        }\n      }\n\n      &:focus {\n        box-shadow:\n          0 0 0 1px var(--card-bg-color),\n          0 0 0 3px var(--card-focus-ring-color);\n      }\n\n      &:focus:not(:focus-visible) {\n        box-shadow: none;\n      }\n    }\n\n    & svg {\n      /* Certain popular CSS libraries changes the defaults for SVG display */\n      /* Make sure SVGs are rendered as inline elements */\n      display: inline;\n    }\n\n    & [data-sanity-icon] {\n      vertical-align: baseline;\n    }\n  "])), $accent && ct(_a$q || (_a$q = __template$q(["\n      color: var(--card-accent-fg-color);\n    "]))), $muted && ct(_b$g || (_b$g = __template$q(["\n      color: var(--card-muted-fg-color);\n    "]))), theme.sanity.fonts.code.family);
}
var __freeze$p = Object.freeze;
var __defProp$q = Object.defineProperty;
var __template$p = (cooked, raw) => __freeze$p(__defProp$q(cooked, "raw", {
  value: __freeze$p(raw || cooked.slice())
}));
var _a$p;
var Root$p = pt.div(headingBaseStyle, responsiveTextAlignStyle, responsiveHeadingFont);
var SpanWithTextOverflow = pt.span(_a$p || (_a$p = __template$p(["\n  display: block;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  overflow: clip;\n"])));
var Heading = (0, import_react47.forwardRef)(function Heading2(props, ref) {
  const {
    accent = false,
    align,
    children: childrenProp,
    muted = false,
    size: size3 = 2,
    textOverflow,
    weight,
    ...restProps
  } = props;
  let children = childrenProp;
  if (textOverflow === "ellipsis") {
    children = (0, import_jsx_runtime2.jsx)(SpanWithTextOverflow, {
      children
    });
  }
  return (0, import_jsx_runtime2.jsx)(Root$p, {
    "data-ui": "Heading",
    ...restProps,
    $accent: accent,
    $align: useArrayProp(align),
    $muted: muted,
    $size: useArrayProp(size3),
    $weight: weight,
    ref,
    children: (0, import_jsx_runtime2.jsx)("span", {
      children
    })
  });
});
function inlineBaseStyle() {
  return {
    lineHeight: 0,
    "&&:not([hidden])": {
      display: "block"
    },
    "& > div": {
      display: "inline-block",
      verticalAlign: "middle"
    }
  };
}
function inlineSpaceStyle(props) {
  const {
    theme
  } = props;
  return _responsive(theme.sanity.media, props.$space, (spaceIndex) => {
    const space = rem(theme.sanity.space[spaceIndex]);
    return {
      margin: "-".concat(space, " 0 0 -").concat(space),
      "& > div": {
        padding: "".concat(space, " 0 0 ").concat(space)
      }
    };
  });
}
var Root$o = pt(Box)(inlineBaseStyle, inlineSpaceStyle);
var Inline = (0, import_react47.forwardRef)(function Inline2(props, ref) {
  const {
    as,
    children: childrenProp,
    space,
    ...restProps
  } = props;
  const children = (0, import_react47.useMemo)(() => childrenToElementArray(childrenProp).filter(Boolean).map((child, idx) => (0, import_jsx_runtime2.jsx)("div", {
    children: child
  }, idx)), [childrenProp]);
  return (0, import_jsx_runtime2.jsx)(Root$o, {
    "data-ui": "Inline",
    ...restProps,
    $space: useArrayProp(space),
    forwardedAs: as,
    ref,
    children
  });
});
var __freeze$o = Object.freeze;
var __defProp$p = Object.defineProperty;
var __template$o = (cooked, raw) => __freeze$o(__defProp$p(cooked, "raw", {
  value: __freeze$o(raw || cooked.slice())
}));
var _a$o;
function kbdStyle() {
  return ct(_a$o || (_a$o = __template$o(["\n    background: var(--card-bg-color);\n    font: inherit;\n    box-shadow: inset 0 0 0 1px var(--card-hairline-hard-color);\n\n    &:not([hidden]) {\n      display: inline-block;\n    }\n  "])));
}
var Root$n = pt.kbd(responsiveRadiusStyle, kbdStyle);
var KBD = (0, import_react47.forwardRef)(function KBD2(props, ref) {
  const {
    children,
    fontSize: fontSize2 = 1,
    padding = 1,
    radius = 2,
    ...restProps
  } = props;
  return (0, import_jsx_runtime2.jsx)(Root$n, {
    "data-ui": "KBD",
    ...restProps,
    $radius: useArrayProp(radius),
    ref,
    children: (0, import_jsx_runtime2.jsx)(Box, {
      as: "span",
      padding,
      children: (0, import_jsx_runtime2.jsx)(Code, {
        as: "span",
        muted: true,
        size: fontSize2,
        children
      })
    })
  });
});
var key$7 = Symbol.for("@sanity/ui/context/boundaryElement");
globalScope[key$7] = globalScope[key$7] || (0, import_react47.createContext)(null);
var BoundaryElementContext = globalScope[key$7];
var DEFAULT_VALUE = {
  version: 0,
  element: null
};
function useBoundaryElement() {
  const value = (0, import_react47.useContext)(BoundaryElementContext);
  if (value && (!isRecord(value) || value.version !== 0)) {
    throw new Error("useBoundaryElement(): the context value is not compatible");
  }
  return value || DEFAULT_VALUE;
}
function findMaxBreakpoints(media, width) {
  const ret = [];
  for (let i = 0; i < media.length; i += 1) {
    const bp = media[i];
    if (bp > width) {
      ret.push(i);
    }
  }
  return ret;
}
function findMinBreakpoints(media, width) {
  const ret = [];
  for (let i = 0; i < media.length; i += 1) {
    const bp = media[i];
    if (bp <= width) {
      ret.push(i);
    }
  }
  return ret;
}
var ElementQuery = (0, import_react47.forwardRef)(function ElementQuery2(props, ref) {
  const theme = useTheme();
  const {
    children,
    media = theme.sanity.media,
    ...restProps
  } = props;
  const forwardedRef = useForwardedRef(ref);
  const [element, setElement] = (0, import_react47.useState)(null);
  const elementSize = useElementSize(element);
  const width = (0, import_react47.useMemo)(() => {
    var _a3;
    return (_a3 = elementSize == null ? void 0 : elementSize.border.width) != null ? _a3 : window.innerWidth;
  }, [elementSize]);
  const max = (0, import_react47.useMemo)(() => findMaxBreakpoints(media, width), [media, width]);
  const min = (0, import_react47.useMemo)(() => findMinBreakpoints(media, width), [media, width]);
  const setRef = (0, import_react47.useCallback)((el) => {
    forwardedRef.current = el;
    setElement(el);
  }, [forwardedRef]);
  return (0, import_jsx_runtime2.jsx)("div", {
    "data-ui": "ElementQuery",
    ...restProps,
    "data-eq-max": max.length ? max.join(" ") : void 0,
    "data-eq-min": min.length ? min.join(" ") : void 0,
    ref: setRef,
    children
  });
});
function getLayerContext(contextValue) {
  if (!isRecord(contextValue) || contextValue.version !== 0) {
    throw new Error("the context value is not compatible");
  }
  if (!contextValue) {
    throw new Error("components using `useLayer()` should be wrapped in a <LayerProvider>.");
  }
  if (contextValue.version === 0) {
    return contextValue;
  }
  throw new Error("could not get layer context");
}
var key$6 = Symbol.for("@sanity/ui/context/layer");
globalScope[key$6] = globalScope[key$6] || (0, import_react47.createContext)(null);
var LayerContext = globalScope[key$6];
function useLayer() {
  const value = (0, import_react47.useContext)(LayerContext);
  if (!value) {
    throw new Error("useLayer(): missing context value");
  }
  try {
    return getLayerContext(value);
  } catch (err) {
    if (err instanceof Error) {
      throw new Error("useLayer(): ".concat(err.message));
    } else {
      throw new Error("useLayer(): ".concat(err));
    }
  }
}
function _raf(fn) {
  const frameId = requestAnimationFrame(fn);
  return () => {
    cancelAnimationFrame(frameId);
  };
}
function _isEnterToClickElement(element) {
  return isHTMLAnchorElement(element) || isHTMLButtonElement(element);
}
function isHTMLElement(node) {
  return node instanceof Node && node.nodeType === Node.ELEMENT_NODE;
}
function isHTMLAnchorElement(element) {
  return isHTMLElement(element) && element.nodeName === "A";
}
function isHTMLInputElement(element) {
  return isHTMLElement(element) && element.nodeName === "INPUT";
}
function isHTMLButtonElement(element) {
  return isHTMLElement(element) && element.nodeName === "BUTTON";
}
function isHTMLSelectElement(element) {
  return isHTMLElement(element) && element.nodeName === "SELECT";
}
function isHTMLTextAreaElement(element) {
  return isHTMLElement(element) && element.nodeName === "TEXTAREA";
}
function containsOrEqualsElement(element, node) {
  return element.contains(node) || element === node;
}
function _hasFocus(element) {
  return Boolean(document.activeElement) && element.contains(document.activeElement);
}
function isFocusable(element) {
  if (element.tabIndex > 0 || element.tabIndex === 0 && element.getAttribute("tabIndex") !== null) {
    return true;
  }
  if (isHTMLAnchorElement(element)) {
    return Boolean(element.href) && element.rel !== "ignore";
  }
  if (isHTMLInputElement(element)) {
    return element.type !== "hidden" && element.type !== "file" && !element.disabled;
  }
  if (isHTMLButtonElement(element) || isHTMLSelectElement(element) || isHTMLTextAreaElement(element)) {
    return !element.disabled;
  }
  return false;
}
function attemptFocus(element) {
  if (!isFocusable(element)) {
    return false;
  }
  try {
    element.focus();
  } catch (_) {
  }
  return document.activeElement === element;
}
function focusFirstDescendant(element) {
  for (let i = 0; i < element.childNodes.length; i++) {
    const child = element.childNodes[i];
    if (isHTMLElement(child) && (attemptFocus(child) || focusFirstDescendant(child))) {
      return true;
    }
  }
  return false;
}
function focusLastDescendant(element) {
  for (let i = element.childNodes.length - 1; i >= 0; i--) {
    const child = element.childNodes[i];
    if (isHTMLElement(child) && (attemptFocus(child) || focusLastDescendant(child))) {
      return true;
    }
  }
  return false;
}
function _isScrollable(el) {
  if (!(el instanceof Element))
    return false;
  const style = window.getComputedStyle(el);
  return style.overflowX.includes("auto") || style.overflowX.includes("scroll") || style.overflowY.includes("auto") || style.overflowY.includes("scroll");
}
function LayerProvider(props) {
  var _a3;
  const {
    children,
    zOffset: zOffsetProp = 0
  } = props;
  const parentContextValue = (0, import_react47.useContext)(LayerContext);
  const parent = parentContextValue && getLayerContext(parentContextValue);
  const parentRegisterChild = parent == null ? void 0 : parent.registerChild;
  const parentLevel = (_a3 = parent == null ? void 0 : parent.level) != null ? _a3 : 0;
  const level = parentLevel + 1;
  const zOffset = useArrayProp(zOffsetProp);
  const maxMediaIndex = zOffset.length - 1;
  const mediaIndex = Math.min(useMediaIndex(), maxMediaIndex);
  const zIndex = parent ? parent.zIndex + zOffset[mediaIndex] : zOffset[mediaIndex];
  const [, setChildLayers] = (0, import_react47.useState)({});
  const [size3, setSize] = (0, import_react47.useState)(0);
  const isTopLayer = size3 === 0;
  const registerChild = (0, import_react47.useCallback)((childLevel) => {
    const parentDispose = parentRegisterChild == null ? void 0 : parentRegisterChild(childLevel);
    if (childLevel !== void 0) {
      setChildLayers((state) => {
        var _a22;
        const prevLen = (_a22 = state[childLevel]) != null ? _a22 : 0;
        const nextState = {
          ...state,
          [childLevel]: prevLen + 1
        };
        setSize(Object.keys(nextState).length);
        return nextState;
      });
    } else {
      setSize((v) => v + 1);
    }
    return () => {
      if (childLevel !== void 0) {
        setChildLayers((state) => {
          const nextState = {
            ...state
          };
          if (nextState[childLevel] === 1) {
            delete nextState[childLevel];
            setSize(Object.keys(nextState).length);
          } else {
            nextState[childLevel] -= 1;
          }
          return nextState;
        });
      } else {
        setSize((v) => v - 1);
      }
      parentDispose == null ? void 0 : parentDispose();
    };
  }, [parentRegisterChild]);
  (0, import_react47.useEffect)(() => parentRegisterChild == null ? void 0 : parentRegisterChild(level), [level, parentRegisterChild]);
  const value = (0, import_react47.useMemo)(() => ({
    version: 0,
    isTopLayer,
    level,
    registerChild,
    size: size3,
    zIndex
  }), [isTopLayer, level, registerChild, size3, zIndex]);
  return (0, import_jsx_runtime2.jsx)(LayerContext.Provider, {
    value,
    children
  });
}
var Root$m = pt.div({
  position: "relative"
});
var LayerChildren = (0, import_react47.forwardRef)(function LayerChildren2(props, ref) {
  const {
    children,
    onActivate,
    onFocus,
    style = EMPTY_RECORD,
    ...restProps
  } = props;
  const {
    zIndex,
    isTopLayer
  } = useLayer();
  const lastFocusedRef = (0, import_react47.useRef)(null);
  const forwardedRef = useForwardedRef(ref);
  const isTopLayerRef = (0, import_react47.useRef)(isTopLayer);
  (0, import_react47.useEffect)(() => {
    const becameTopLayer = isTopLayerRef.current !== isTopLayer && isTopLayer;
    if (becameTopLayer) {
      onActivate == null ? void 0 : onActivate({
        activeElement: lastFocusedRef.current
      });
    }
    isTopLayerRef.current = isTopLayer;
  }, [isTopLayer, onActivate]);
  const handleFocus = (0, import_react47.useCallback)((event) => {
    onFocus == null ? void 0 : onFocus(event);
    const rootElement = forwardedRef.current;
    const target = document.activeElement;
    if (!isTopLayer || !rootElement || !target)
      return;
    if (isHTMLElement(target) && containsOrEqualsElement(rootElement, target)) {
      lastFocusedRef.current = target;
    }
  }, [forwardedRef, isTopLayer, onFocus]);
  return (0, import_jsx_runtime2.jsx)(Root$m, {
    ...restProps,
    "data-ui": "Layer",
    onFocus: handleFocus,
    ref: forwardedRef,
    style: {
      ...style,
      zIndex
    },
    children
  });
});
var Layer = (0, import_react47.forwardRef)(function Layer2(props, ref) {
  const {
    children,
    zOffset = 1,
    ...restProps
  } = props;
  return (0, import_jsx_runtime2.jsx)(LayerProvider, {
    zOffset,
    children: (0, import_jsx_runtime2.jsx)(LayerChildren, {
      ...restProps,
      ref,
      children
    })
  });
});
var key$5 = Symbol.for("@sanity/ui/context/portal");
var elementKey = Symbol.for("@sanity/ui/context/portal/element");
globalScope[elementKey] = null;
var defaultContextValue = {
  version: 0,
  boundaryElement: null,
  get element() {
    if (typeof document === "undefined") {
      return null;
    }
    if (globalScope[elementKey]) {
      return globalScope[elementKey];
    }
    globalScope[elementKey] = document.createElement("div");
    globalScope[elementKey].setAttribute("data-portal", "");
    document.body.appendChild(globalScope[elementKey]);
    return globalScope[elementKey];
  }
};
globalScope[key$5] = globalScope[key$5] || (0, import_react47.createContext)(defaultContextValue);
var PortalContext = globalScope[key$5];
function usePortal() {
  const value = (0, import_react47.useContext)(PortalContext);
  if (!value) {
    throw new Error("usePortal(): missing context value");
  }
  if (!isRecord(value) || value.version !== 0) {
    throw new Error("usePortal(): the context value is not compatible");
  }
  return value;
}
function Portal(props) {
  var _a3;
  const {
    children,
    __unstable_name: name
  } = props;
  const portal = usePortal();
  const portalElement = (name ? portal.elements && portal.elements[name] : portal.element) || ((_a3 = portal.elements) == null ? void 0 : _a3.default);
  if (!portalElement) {
    return null;
  }
  return (0, import_react_dom2.createPortal)(children, portalElement);
}
var __freeze$n = Object.freeze;
var __defProp$n = Object.defineProperty;
var __template$n = (cooked, raw) => __freeze$n(__defProp$n(cooked, "raw", {
  value: __freeze$n(raw || cooked.slice())
}));
var _a$n;
var Root$l = pt.div(_a$n || (_a$n = __template$n(["\n  display: block;\n  width: 0;\n  height: 0;\n  position: absolute;\n  overflow: hidden;\n  overflow: clip;\n"])));
var SrOnly = (0, import_react47.forwardRef)(function SrOnly2(props, ref) {
  const {
    as,
    children
  } = props;
  return (0, import_jsx_runtime2.jsx)(Root$l, {
    "aria-hidden": true,
    as,
    "data-ui": "SrOnly",
    ref,
    children
  });
});
var __freeze$m = Object.freeze;
var __defProp$m = Object.defineProperty;
var __template$m = (cooked, raw) => __freeze$m(__defProp$m(cooked, "raw", {
  value: __freeze$m(raw || cooked.slice())
}));
var _a$m;
var _b$f;
var Root$k = pt.div(_a$m || (_a$m = __template$m(["\n  position: relative;\n"])));
var ItemWrapper = pt.div(_b$f || (_b$f = __template$m(["\n  position: absolute;\n  left: 0;\n  right: 0;\n"])));
var VirtualList = (0, import_react47.forwardRef)(function VirtualList2(props, ref) {
  const {
    as = "div",
    gap = 0,
    getItemKey,
    items = [],
    onChange,
    renderItem,
    ...restProps
  } = props;
  const {
    space
  } = useTheme().sanity;
  const forwardedRef = useForwardedRef(ref);
  const wrapperRef = (0, import_react47.useRef)(null);
  const [scrollTop, setScrollTop] = (0, import_react47.useState)(0);
  const [scrollHeight, setScrollHeight] = (0, import_react47.useState)(0);
  const [itemHeight, setItemHeight] = (0, import_react47.useState)(-1);
  (0, import_react47.useEffect)(() => {
    if (!wrapperRef.current)
      return;
    const firstElement = wrapperRef.current.firstChild;
    if (firstElement instanceof HTMLElement) {
      setItemHeight(firstElement.offsetHeight);
    }
  }, [renderItem]);
  (0, import_react47.useEffect)(() => {
    if (!forwardedRef.current)
      return;
    let _scrollEl = forwardedRef.current.parentNode;
    while (_scrollEl && !_isScrollable(_scrollEl)) {
      _scrollEl = _scrollEl.parentNode;
    }
    if (_scrollEl) {
      const scrollEl = _scrollEl;
      if (!(scrollEl instanceof HTMLElement))
        return;
      const handleScroll2 = () => {
        setScrollTop(scrollEl.scrollTop);
      };
      scrollEl.addEventListener("scroll", handleScroll2, {
        passive: true
      });
      const ro = new _ResizeObserver((entries) => {
        setScrollHeight(entries[0].contentRect.height);
      });
      ro.observe(scrollEl);
      handleScroll2();
      return () => {
        scrollEl.removeEventListener("scroll", handleScroll2);
        ro.unobserve(scrollEl);
        ro.disconnect();
      };
    }
    const handleScroll = () => {
      setScrollTop(window.scrollY);
    };
    const handleResize = () => {
      setScrollHeight(window.innerHeight);
    };
    window.addEventListener("scroll", handleScroll, {
      passive: true
    });
    window.addEventListener("resize", handleResize);
    setScrollHeight(window.innerHeight);
    handleScroll();
    return () => {
      window.removeEventListener("scroll", handleScroll);
      window.removeEventListener("resize", handleResize);
    };
  }, [forwardedRef]);
  const len = items.length;
  const height = itemHeight ? len * (itemHeight + space[gap]) - space[gap] : 0;
  const fromIndex = height ? Math.max(Math.floor(scrollTop / height * len) - 2, 0) : 0;
  const toIndex = height ? Math.ceil((scrollTop + scrollHeight) / height * len) + 1 : 0;
  (0, import_react47.useEffect)(() => {
    if (!onChange)
      return;
    onChange({
      fromIndex,
      gap: space[gap],
      itemHeight,
      scrollHeight,
      scrollTop,
      toIndex
    });
  }, [fromIndex, gap, itemHeight, onChange, scrollHeight, scrollTop, space, toIndex]);
  const children = (0, import_react47.useMemo)(() => {
    if (!renderItem || items.length === 0)
      return null;
    if (itemHeight === -1) {
      return [(0, import_jsx_runtime2.jsx)(ItemWrapper, {
        children: renderItem(items[0])
      }, 0)];
    }
    return items.slice(fromIndex, toIndex).map((item, _itemIndex) => {
      const itemIndex = fromIndex + _itemIndex;
      const node = renderItem(item);
      const key2 = getItemKey ? getItemKey(item, itemIndex) : itemIndex;
      return (0, import_jsx_runtime2.jsx)(ItemWrapper, {
        style: {
          top: itemIndex * (itemHeight + space[gap])
        },
        children: node
      }, key2);
    });
  }, [fromIndex, gap, getItemKey, itemHeight, items, renderItem, space, toIndex]);
  const wrapperStyle = (0, import_react47.useMemo)(() => ({
    height
  }), [height]);
  return (0, import_jsx_runtime2.jsx)(Root$k, {
    as,
    "data-ui": "VirtualList",
    ...restProps,
    ref: forwardedRef,
    children: (0, import_jsx_runtime2.jsx)("div", {
      ref: wrapperRef,
      style: wrapperStyle,
      children
    })
  });
});
var DEFAULT_POPOVER_DISTANCE = 4;
var DEFAULT_POPOVER_PADDING = 4;
var DEFAULT_POPOVER_ARROW_WIDTH = 27;
var DEFAULT_POPOVER_ARROW_HEIGHT = 11;
var DEFAULT_POPOVER_MARGINS = [0, 0, 0, 0];
var DEFAULT_FALLBACK_PLACEMENTS$1 = {
  top: ["bottom", "left", "right"],
  "top-start": ["bottom-start", "left-start", "right-start"],
  "top-end": ["bottom-end", "left-end", "right-end"],
  bottom: ["top", "left", "right"],
  "bottom-start": ["top-start", "left-start", "right-start"],
  "bottom-end": ["top-end", "left-end", "right-end"],
  left: ["right", "top", "bottom"],
  "left-start": ["right-start", "top-start", "bottom-start"],
  "left-end": ["right-end", "top-end", "bottom-end"],
  right: ["left", "top", "bottom"],
  "right-start": ["left-start", "top-start", "bottom-start"],
  "right-end": ["left-end", "top-end", "bottom-end"]
};
function size2(options) {
  const {
    apply,
    margins,
    padding = 0
  } = options;
  return {
    name: "@sanity/ui/size",
    async fn(args) {
      const {
        elements,
        placement,
        platform: platform2,
        rects
      } = args;
      const {
        floating,
        reference
      } = rects;
      const overflow = await detectOverflow(args, {
        altBoundary: true,
        boundary: options.boundaryElement || void 0,
        elementContext: "floating",
        padding,
        rootBoundary: "viewport"
      });
      let maxWidth = Infinity;
      let maxHeight = Infinity;
      const floatingW = floating.width;
      const floatingH = floating.height;
      if (placement.includes("top")) {
        maxWidth = floatingW - (overflow.left + overflow.right);
        maxHeight = floatingH - overflow.top;
      }
      if (placement.includes("right")) {
        maxWidth = floatingW - overflow.right;
        maxHeight = floatingH - (overflow.top + overflow.bottom);
      }
      if (placement.includes("bottom")) {
        maxWidth = floatingW - (overflow.left + overflow.right);
        maxHeight = floatingH - overflow.bottom;
      }
      if (placement.includes("left")) {
        maxWidth = floatingW - overflow.left;
        maxHeight = floatingH - (overflow.top + overflow.bottom);
      }
      apply({
        availableWidth: maxWidth - margins[1] - margins[3],
        availableHeight: maxHeight - margins[0] - margins[2],
        elements,
        referenceWidth: reference.width - margins[1] - margins[3]
      });
      const nextDimensions = await platform2.getDimensions(elements.floating);
      const targetH = nextDimensions.height;
      const targetW = nextDimensions.width;
      if (floatingW !== targetW || floatingH !== targetH) {
        return {
          reset: {
            rects: true
          }
        };
      }
      return {};
    }
  };
}
function calcCurrentWidth(params) {
  const {
    mediaIndex,
    theme,
    width
  } = params;
  const w = width[mediaIndex];
  const currentWidth = w === void 0 ? width[width.length - 1] : w;
  return typeof currentWidth === "number" ? theme.sanity.container[currentWidth] : void 0;
}
function calcMaxWidth(params) {
  const {
    boundaryWidth,
    currentWidth
  } = params;
  if (currentWidth === void 0 && boundaryWidth === void 0) {
    return void 0;
  }
  return Math.min(currentWidth != null ? currentWidth : Infinity, (boundaryWidth || Infinity) - DEFAULT_POPOVER_PADDING * 2);
}
var __freeze$l = Object.freeze;
var __defProp$l = Object.defineProperty;
var __template$l = (cooked, raw) => __freeze$l(__defProp$l(cooked, "raw", {
  value: __freeze$l(raw || cooked.slice())
}));
var _a$l;
var _b$e;
var _c$8;
var Root$j = pt.div(_a$l || (_a$l = __template$l(["\n  position: absolute;\n  pointer-events: none;\n  width: ", "px;\n  height: ", "px;\n  fill: none;\n\n  :empty + & {\n    display: none;\n  }\n\n  & > svg {\n    display: block;\n    transform-origin: ", "px ", "px;\n  }\n\n  [data-placement^='top'] > & {\n    bottom: -", "px;\n  }\n\n  [data-placement^='right'] > & {\n    left: -", "px;\n\n    & > svg {\n      transform: rotate(90deg);\n    }\n  }\n\n  [data-placement^='left'] > & {\n    right: -", "px;\n\n    & > svg {\n      transform: rotate(-90deg);\n    }\n  }\n\n  [data-placement^='bottom'] > & {\n    top: -", "px;\n\n    & > svg {\n      transform: rotate(180deg);\n    }\n  }\n"])), DEFAULT_POPOVER_ARROW_WIDTH, DEFAULT_POPOVER_ARROW_WIDTH, DEFAULT_POPOVER_ARROW_WIDTH / 2, DEFAULT_POPOVER_ARROW_WIDTH / 2, DEFAULT_POPOVER_ARROW_WIDTH, DEFAULT_POPOVER_ARROW_WIDTH, DEFAULT_POPOVER_ARROW_WIDTH, DEFAULT_POPOVER_ARROW_WIDTH);
var BorderPath = pt.path(_b$e || (_b$e = __template$l(["\n  fill: var(--card-shadow-outline-color);\n"])));
var ShapePath = pt.path(_c$8 || (_c$8 = __template$l(["\n  fill: var(--card-bg-color);\n"])));
var PopoverArrow = (0, import_react47.forwardRef)(function PopoverArrow2(props, ref) {
  return (0, import_jsx_runtime2.jsx)(Root$j, {
    "data-ui": "Popover__arrow",
    ...props,
    ref,
    children: (0, import_jsx_runtime2.jsxs)("svg", {
      width: DEFAULT_POPOVER_ARROW_WIDTH,
      height: DEFAULT_POPOVER_ARROW_HEIGHT,
      viewBox: "0 0 27 11",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      children: [(0, import_jsx_runtime2.jsx)(BorderPath, {
        d: "M1.18708 1C3.29803 1.0011 5.29585 1.95479 6.62414 3.59561L11.1683 9.20895C12.369 10.6922 14.631 10.6922 15.8317 9.20894L20.3759 3.59561C21.7042 1.95478 23.702 1.0011 25.8129 1H21.9436C21.0533 1.49255 20.2545 2.15618 19.5986 2.96641L15.0545 8.57975C14.254 9.56855 12.746 9.56855 11.9455 8.57975L7.40139 2.96642C6.74548 2.15618 5.94673 1.49255 5.05643 1H1.18708Z"
      }), (0, import_jsx_runtime2.jsx)(ShapePath, {
        d: "M1.18342 0C3.59749 0 5.88246 1.0901 7.40138 2.96642L11.9455 8.57975C12.746 9.56855 14.254 9.56855 15.0545 8.57975L19.5986 2.96641C21.1175 1.0901 23.4025 0 25.8166 0H27H0H1.18342Z"
      })]
    })
  });
});
var Root$i = pt(Card)({
  "&:not([hidden])": {
    display: "flex"
  },
  flexDirection: "column",
  width: "max-content",
  minWidth: "min-content"
});
var PopoverCard = (0, import_react47.memo)((0, import_react47.forwardRef)(function PopoverCard2(props, ref) {
  const {
    __unstable_margins: marginsProp,
    arrow: arrow3,
    arrowRef,
    arrowX,
    arrowY,
    children,
    padding,
    placement,
    overflow,
    radius,
    scheme,
    shadow,
    strategy,
    style,
    tone,
    width,
    x: xProp,
    y: yProp,
    ...restProps
  } = props;
  const {
    zIndex
  } = useLayer();
  const margins = (0, import_react47.useMemo)(() => marginsProp || DEFAULT_POPOVER_MARGINS, [marginsProp]);
  const x = (xProp != null ? xProp : 0) + margins[3];
  const y = (yProp != null ? yProp : 0) + margins[0];
  const rootStyle2 = (0, import_react47.useMemo)(() => ({
    position: strategy,
    top: y,
    left: x,
    width,
    zIndex,
    ...style
  }), [strategy, style, width, x, y, zIndex]);
  const staticSide = placement && FLOATING_STATIC_SIDES[placement.split("-")[0]];
  const arrowStyle = (0, import_react47.useMemo)(() => {
    const style2 = {
      left: arrowX !== null ? arrowX : void 0,
      top: arrowY !== null ? arrowY : void 0,
      right: void 0,
      bottom: void 0
    };
    if (staticSide)
      style2[staticSide] = 0 - DEFAULT_POPOVER_ARROW_WIDTH;
    return style2;
  }, [arrowX, arrowY, staticSide]);
  return (0, import_jsx_runtime2.jsxs)(Root$i, {
    "data-ui": "Popover",
    ...restProps,
    "data-placement": placement,
    radius,
    ref,
    scheme,
    shadow,
    sizing: "border",
    style: rootStyle2,
    tone,
    children: [(0, import_jsx_runtime2.jsx)(Flex, {
      "data-ui": "Popover__wrapper",
      direction: "column",
      flex: 1,
      overflow,
      children: (0, import_jsx_runtime2.jsx)(Flex, {
        direction: "column",
        flex: 1,
        padding,
        children
      })
    }), arrow3 && (0, import_jsx_runtime2.jsx)(PopoverArrow, {
      ref: arrowRef,
      style: arrowStyle
    })]
  });
}));
PopoverCard.displayName = "PopoverCard";
var Popover = (0, import_react47.memo)((0, import_react47.forwardRef)(function Popover2(props, ref) {
  var _a3, _b2, _c2, _d2, _e2, _f2, _g2, _h, _i;
  const theme = useTheme();
  const boundaryElementContext = useBoundaryElement();
  const {
    __unstable_margins: margins = DEFAULT_POPOVER_MARGINS,
    arrow: arrowProp = true,
    boundaryElement = boundaryElementContext.element,
    children: childProp,
    constrainSize = false,
    content,
    disabled,
    fallbackPlacements = (_b2 = props.fallbackPlacements) != null ? _b2 : DEFAULT_FALLBACK_PLACEMENTS$1[(_a3 = props.placement) != null ? _a3 : "bottom"],
    matchReferenceWidth,
    floatingBoundary = (_c2 = props.boundaryElement) != null ? _c2 : boundaryElementContext.element,
    open,
    overflow = "hidden",
    padding: paddingProp,
    placement: placementProp = "bottom",
    portal,
    preventOverflow = true,
    radius: radiusProp = 3,
    referenceBoundary = (_d2 = props.boundaryElement) != null ? _d2 : boundaryElementContext.element,
    referenceElement,
    scheme,
    shadow: shadowProp = 3,
    tone = "inherit",
    width: widthProp = "auto",
    zOffset: zOffsetProp = (_e2 = theme.sanity.layer) == null ? void 0 : _e2.popover.zOffset,
    updateRef,
    ...restProps
  } = props;
  const boundarySize = (_f2 = useElementSize(boundaryElement)) == null ? void 0 : _f2.border;
  const padding = useArrayProp(paddingProp);
  const radius = useArrayProp(radiusProp);
  const shadow = useArrayProp(shadowProp);
  const widthArrayProp = useArrayProp(widthProp);
  const zOffset = useArrayProp(zOffsetProp);
  const forwardedRef = useForwardedRef(ref);
  const arrowRef = (0, import_react47.useRef)(null);
  const rootBoundary = "viewport";
  const mediaIndex = useMediaIndex();
  const boundaryWidth = constrainSize || preventOverflow ? boundarySize == null ? void 0 : boundarySize.width : void 0;
  const width = calcCurrentWidth({
    mediaIndex,
    theme,
    width: widthArrayProp
  });
  const widthRef = (0, import_react47.useRef)(width);
  (0, import_react47.useEffect)(() => {
    widthRef.current = width;
  }, [width]);
  const maxWidth = calcMaxWidth({
    boundaryWidth,
    currentWidth: width
  });
  const maxWidthRef = (0, import_react47.useRef)(maxWidth);
  (0, import_react47.useEffect)(() => {
    maxWidthRef.current = maxWidth;
  }, [maxWidth]);
  const referenceWidthRef = (0, import_react47.useRef)();
  (0, import_react47.useEffect)(() => {
    const floatingElement = forwardedRef.current;
    if (!open || !floatingElement)
      return;
    const referenceWidth = referenceWidthRef.current;
    if (matchReferenceWidth) {
      if (referenceWidth !== void 0) {
        floatingElement.style.width = "".concat(referenceWidth, "px");
      }
    } else if (width !== void 0) {
      floatingElement.style.width = "".concat(width, "px");
    }
    if (typeof maxWidth === "number") {
      floatingElement.style.maxWidth = "".concat(maxWidth, "px");
    }
  }, [width, forwardedRef, matchReferenceWidth, maxWidth, open]);
  const middleware = (0, import_react47.useMemo)(() => {
    const ret = [];
    if (constrainSize || preventOverflow) {
      ret.push(flip({
        boundary: floatingBoundary || void 0,
        fallbackPlacements,
        padding: DEFAULT_POPOVER_PADDING,
        rootBoundary
      }));
    }
    ret.push(offset({
      mainAxis: arrowProp ? DEFAULT_POPOVER_DISTANCE : 0
    }));
    if (constrainSize || matchReferenceWidth) {
      ret.push(size2({
        apply(_ref21) {
          let {
            availableWidth,
            availableHeight,
            elements,
            referenceWidth
          } = _ref21;
          referenceWidthRef.current = referenceWidth;
          const _currentWidth = widthRef.current;
          const _maxWidth = maxWidthRef.current;
          if (matchReferenceWidth) {
            elements.floating.style.width = "".concat(referenceWidth, "px");
          } else if (_currentWidth !== void 0) {
            elements.floating.style.width = "".concat(_currentWidth, "px");
          }
          if (constrainSize) {
            elements.floating.style.maxWidth = "".concat(Math.min(availableWidth, _maxWidth != null ? _maxWidth : Infinity), "px");
            elements.floating.style.maxHeight = "".concat(availableHeight, "px");
          }
        },
        boundaryElement: floatingBoundary || void 0,
        constrainSize,
        margins,
        matchReferenceWidth,
        padding: DEFAULT_POPOVER_PADDING
      }));
    }
    if (preventOverflow) {
      ret.push(shift({
        boundary: floatingBoundary || void 0,
        rootBoundary,
        padding: DEFAULT_POPOVER_PADDING
      }));
    }
    if (arrowProp) {
      ret.push(arrow2({
        element: arrowRef,
        padding: DEFAULT_POPOVER_PADDING
      }));
    }
    ret.push(hide({
      boundary: referenceBoundary || void 0,
      padding: DEFAULT_POPOVER_PADDING,
      strategy: "referenceHidden"
    }));
    return ret;
  }, [arrowProp, constrainSize, fallbackPlacements, floatingBoundary, margins, matchReferenceWidth, preventOverflow, referenceBoundary]);
  const {
    x,
    y,
    middlewareData,
    placement,
    refs,
    strategy,
    update
  } = useFloating({
    middleware,
    placement: placementProp,
    whileElementsMounted: autoUpdate
  });
  const referenceHidden = (_g2 = middlewareData.hide) == null ? void 0 : _g2.referenceHidden;
  const arrowX = (_h = middlewareData.arrow) == null ? void 0 : _h.x;
  const arrowY = (_i = middlewareData.arrow) == null ? void 0 : _i.y;
  const setArrow = (0, import_react47.useCallback)((arrowEl) => {
    arrowRef.current = arrowEl;
  }, []);
  const setFloating = (0, import_react47.useCallback)((node) => {
    forwardedRef.current = node;
    refs.setFloating(node);
  }, [forwardedRef, refs]);
  const setReference = (0, import_react47.useCallback)((node) => {
    refs.setReference(node);
    const childRef = childProp == null ? void 0 : childProp.ref;
    if (typeof childRef === "function") {
      childRef(node);
    } else if (childRef) {
      childRef.current = node;
    }
  }, [childProp, refs]);
  const child = (0, import_react47.useMemo)(() => {
    if (!childProp || referenceElement)
      return null;
    return (0, import_react47.cloneElement)(childProp, {
      ref: setReference
    });
  }, [childProp, referenceElement, setReference]);
  (0, import_react47.useEffect)(() => {
    if (updateRef) {
      if (typeof updateRef === "function") {
        updateRef(update);
      } else if (updateRef) {
        updateRef.current = update;
      }
    }
  }, [update, updateRef]);
  (0, import_react47.useEffect)(() => {
    refs.setReference(referenceElement || null);
  }, [referenceElement, refs]);
  if (disabled) {
    return childProp || (0, import_jsx_runtime2.jsx)(import_jsx_runtime2.Fragment, {});
  }
  const popover = (0, import_jsx_runtime2.jsx)(LayerProvider, {
    zOffset,
    children: (0, import_jsx_runtime2.jsx)(PopoverCard, {
      ...restProps,
      __unstable_margins: margins,
      arrow: arrowProp,
      arrowRef: setArrow,
      arrowX,
      arrowY,
      hidden: referenceHidden,
      overflow,
      padding,
      placement,
      radius,
      ref: setFloating,
      scheme,
      shadow,
      strategy,
      tone,
      width: matchReferenceWidth ? referenceWidthRef.current : width,
      x,
      y,
      children: content
    })
  });
  return (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, {
    children: [open && (0, import_jsx_runtime2.jsx)(import_jsx_runtime2.Fragment, {
      children: portal ? (0, import_jsx_runtime2.jsx)(Portal, {
        __unstable_name: typeof portal === "string" ? portal : void 0,
        children: popover
      }) : popover
    }), child]
  });
}));
Popover.displayName = "Popover";
var __freeze$k = Object.freeze;
var __defProp$k = Object.defineProperty;
var __template$k = (cooked, raw) => __freeze$k(__defProp$k(cooked, "raw", {
  value: __freeze$k(raw || cooked.slice())
}));
var _a$k;
var _b$d;
function radioBaseStyle() {
  return ct(_a$k || (_a$k = __template$k(["\n    position: relative;\n\n    &:not([hidden]) {\n      display: inline-block;\n    }\n\n    &[data-read-only] {\n      outline: 1px solid red;\n    }\n  "])));
}
function inputElementStyle(props) {
  const {
    theme
  } = props;
  const {
    focusRing,
    input
  } = theme.sanity;
  const color3 = theme.sanity.color.input;
  const dist = (input.radio.size - input.radio.markSize) / 2;
  return ct(_b$d || (_b$d = __template$k(["\n    appearance: none;\n    position: absolute;\n    top: 0;\n    left: 0;\n    opacity: 0;\n    height: 100%;\n    width: 100%;\n    outline: none;\n    z-index: 1;\n    padding: 0;\n    margin: 0;\n    border-radius: ", ";\n    border: none;\n\n    /* enabled */\n    & + span {\n      display: block;\n      position: relative;\n      height: ", ";\n      width: ", ";\n      border-radius: ", ";\n      background: ", ";\n      box-shadow: ", ";\n\n      &::after {\n        content: '';\n        position: absolute;\n        top: ", ";\n        left: ", ";\n        height: ", ";\n        width: ", ";\n        border-radius: ", ";\n        background: ", ";\n        opacity: 0;\n      }\n    }\n\n    /* focused */\n    &:not(:disabled):focus + span {\n      box-shadow: ", ";\n    }\n\n    &:not(:disabled):focus:not(:focus-visible) + span {\n      box-shadow: ", ";\n    }\n\n    &:checked + span::after {\n      opacity: 1;\n    }\n\n    /* read only */\n    &[data-read-only] + span {\n      box-shadow: 0 0 0 1px ", ";\n      background: ", ";\n\n      &::after {\n        background: ", ";\n      }\n    }\n\n    /* disabled */\n    &:not([data-read-only]):disabled + span {\n      box-shadow: 0 0 0 1px ", ";\n      background: ", ";\n\n      &::after {\n        background: ", ";\n      }\n    }\n  "])), rem(input.radio.size / 2), rem(input.radio.size), rem(input.radio.size), rem(input.radio.size / 2), color3.default.enabled.bg, focusRingBorderStyle({
    color: color3.default.enabled.border,
    width: input.border.width
  }), rem(dist), rem(dist), rem(input.radio.markSize), rem(input.radio.markSize), rem(input.radio.markSize / 2), color3.default.enabled.fg, focusRingStyle({
    border: {
      width: input.border.width,
      color: color3.default.enabled.border
    },
    focusRing
  }), focusRingBorderStyle({
    color: color3.default.enabled.border,
    width: input.border.width
  }), color3.default.readOnly.border, color3.default.readOnly.bg, color3.default.readOnly.fg, color3.default.disabled.border, color3.default.disabled.bg, color3.default.disabled.fg);
}
var Root$h = pt.div(radioBaseStyle);
var Input$4 = pt.input(inputElementStyle);
var Radio = (0, import_react47.forwardRef)(function Radio2(props, forwardedRef) {
  const {
    className,
    disabled,
    style,
    customValidity,
    readOnly,
    ...restProps
  } = props;
  const ref = useForwardedRef(forwardedRef);
  useCustomValidity(ref, customValidity);
  return (0, import_jsx_runtime2.jsxs)(Root$h, {
    className,
    "data-ui": "Radio",
    style,
    children: [(0, import_jsx_runtime2.jsx)(Input$4, {
      "data-read-only": !disabled && readOnly ? "" : void 0,
      ...restProps,
      disabled: disabled || readOnly,
      readOnly,
      ref,
      type: "radio"
    }), (0, import_jsx_runtime2.jsx)("span", {})]
  });
});
var __freeze$j = Object.freeze;
var __defProp$j = Object.defineProperty;
var __template$j = (cooked, raw) => __freeze$j(__defProp$j(cooked, "raw", {
  value: __freeze$j(raw || cooked.slice())
}));
var _a$j;
var _b$c;
var _c$7;
var _d$5;
function rootStyle() {
  return ct(_a$j || (_a$j = __template$j(["\n    position: relative;\n    width: -webkit-fill-available;\n    width: stretch;\n\n    &:not([hidden]) {\n      display: inline-block;\n    }\n  "])));
}
function inputBaseStyle(props) {
  const {
    theme
  } = props;
  const font = theme.sanity.fonts.text;
  return ct(_b$c || (_b$c = __template$j(["\n    -webkit-font-smoothing: antialiased;\n    appearance: none;\n    border: 0;\n    font-family: ", ";\n    color: inherit;\n    width: 100%;\n    outline: none;\n    margin: 0;\n\n    &:disabled {\n      opacity: 1;\n    }\n  "])), font.family);
}
function inputColorStyle(props) {
  const {
    theme
  } = props;
  const {
    focusRing,
    input
  } = theme.sanity;
  const color3 = theme.sanity.color.input;
  return ct(_c$7 || (_c$7 = __template$j(["\n    /* enabled */\n    background-color: ", ";\n    color: ", ";\n    box-shadow: ", ";\n\n    /* hovered */\n    @media (hover: hover) {\n      &:not(:disabled):hover {\n        background-color: ", ";\n        color: ", ";\n        box-shadow: ", ";\n      }\n    }\n\n    /* focused */\n    &:not(:disabled):focus {\n      box-shadow: ", ";\n    }\n\n    /* read-only */\n    &[data-read-only] {\n      background-color: ", ";\n      color: ", ";\n      box-shadow: ", ";\n    }\n\n    /* disabled */\n    &:not([data-read-only]):disabled {\n      background-color: ", ";\n      color: ", ";\n      box-shadow: ", ";\n    }\n  "])), color3.default.enabled.bg, color3.default.enabled.fg, focusRingBorderStyle({
    color: color3.default.enabled.border,
    width: input.border.width
  }), color3.default.hovered.bg, color3.default.hovered.fg, focusRingBorderStyle({
    color: color3.default.hovered.border,
    width: input.border.width
  }), focusRingStyle({
    border: {
      width: input.border.width,
      color: color3.default.enabled.border
    },
    focusRing
  }), color3.default.readOnly.bg, color3.default.readOnly.fg, focusRingBorderStyle({
    color: color3.default.readOnly.border,
    width: input.border.width
  }), color3.default.disabled.bg, color3.default.disabled.fg, focusRingBorderStyle({
    color: color3.default.disabled.border,
    width: input.border.width
  }));
}
function textSize(size3) {
  return {
    fontSize: rem(size3.fontSize),
    lineHeight: rem(size3.lineHeight)
  };
}
function inputTextSizeStyle(props) {
  const {
    theme,
    $fontSize
  } = props;
  const {
    sizes
  } = theme.sanity.fonts.text;
  return _responsive(theme.sanity.media, $fontSize, (sizeIndex) => textSize(sizes[sizeIndex] || sizes[2]));
}
function inputStyle() {
  return [responsiveRadiusStyle, inputBaseStyle, inputColorStyle, inputTextSizeStyle, responsiveInputPaddingIconRightStyle];
}
function iconBoxStyle(props) {
  const {
    theme
  } = props;
  const color3 = theme.sanity.color.input;
  return ct(_d$5 || (_d$5 = __template$j(["\n    pointer-events: none;\n    position: absolute;\n    top: 0;\n    right: 0;\n\n    /* enabled */\n    --card-fg-color: ", ";\n\n    /* hover */\n    @media (hover: hover) {\n      select:not(disabled):not(:read-only):hover + && {\n        --card-fg-color: ", ";\n      }\n    }\n\n    /* disabled */\n    select:disabled + && {\n      --card-fg-color: ", ";\n    }\n\n    /* read-only */\n    select[data-read-only] + && {\n      --card-fg-color: ", ";\n    }\n  "])), color3.default.enabled.fg, color3.default.hovered.fg, color3.default.disabled.fg, color3.default.readOnly.fg);
}
var selectStyle = {
  root: rootStyle,
  input: inputStyle,
  iconBox: iconBoxStyle
};
var Root$g = pt.div(selectStyle.root);
var Input$3 = pt.select(selectStyle.input);
var IconBox = pt(Box)(selectStyle.iconBox);
var Select = (0, import_react47.forwardRef)(function Select2(props, forwardedRef) {
  const {
    children,
    customValidity,
    disabled,
    fontSize: fontSize2 = 2,
    padding = 3,
    radius = 1,
    readOnly,
    space = 3,
    ...restProps
  } = props;
  const ref = useForwardedRef(forwardedRef);
  useCustomValidity(ref, customValidity);
  return (0, import_jsx_runtime2.jsxs)(Root$g, {
    "data-ui": "Select",
    children: [(0, import_jsx_runtime2.jsx)(Input$3, {
      "data-read-only": !disabled && readOnly ? "" : void 0,
      "data-ui": "Select",
      ...restProps,
      $fontSize: useArrayProp(fontSize2),
      $padding: useArrayProp(padding),
      $radius: useArrayProp(radius),
      $space: useArrayProp(space),
      disabled: disabled || readOnly,
      ref,
      children
    }), (0, import_jsx_runtime2.jsx)(IconBox, {
      padding,
      children: (0, import_jsx_runtime2.jsx)(Text, {
        size: fontSize2,
        children: (0, import_jsx_runtime2.jsx)(SelectIcon, {})
      })
    })]
  });
});
var BASE_STYLE = {
  "&&:not([hidden])": {
    display: "grid"
  },
  '&[data-as="ul"],&[data-as="ol"]': {
    listStyle: "none"
  },
  gridTemplateColumns: "minmax(0, 1fr)",
  gridAutoRows: "min-content"
};
function stackBaseStyle() {
  return BASE_STYLE;
}
function responsiveStackSpaceStyle(props) {
  const {
    theme
  } = props;
  const {
    media,
    space
  } = theme.sanity;
  return _responsive(media, props.$space, (spaceIndex) => ({
    gridGap: rem(space[spaceIndex])
  }));
}
var Root$f = pt(Box)(stackBaseStyle, responsiveStackSpaceStyle);
var Stack = (0, import_react47.forwardRef)(function Stack2(props, ref) {
  const {
    as,
    space,
    ...restProps
  } = props;
  return (0, import_jsx_runtime2.jsx)(Root$f, {
    "data-as": typeof as === "string" ? as : void 0,
    "data-ui": "Stack",
    ...restProps,
    $space: useArrayProp(space),
    forwardedAs: as,
    ref
  });
});
var __freeze$i = Object.freeze;
var __defProp$i = Object.defineProperty;
var __template$i = (cooked, raw) => __freeze$i(__defProp$i(cooked, "raw", {
  value: __freeze$i(raw || cooked.slice())
}));
var _a$i;
var _b$b;
var _c$6;
var _d$4;
var _e$2;
var _f$2;
var _g;
function switchBaseStyles() {
  return ct(_a$i || (_a$i = __template$i(["\n    position: relative;\n    &:not([hidden]) {\n      display: inline-block;\n    }\n  "])));
}
function switchInputStyles() {
  return ct(_b$b || (_b$b = __template$i(["\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    opacity: 0;\n    height: 100%;\n    width: 100%;\n    outline: none;\n    padding: 0;\n    margin: 0;\n\n    /* Place the input element above the representation element */\n    z-index: 1;\n  "])));
}
function switchRepresentationStyles(props) {
  const {
    theme
  } = props;
  const {
    focusRing,
    input
  } = theme.sanity;
  const color3 = theme.sanity.color.button.default;
  return ct(_c$6 || (_c$6 = __template$i(["\n    --switch-bg-color: ", ";\n    --switch-fg-color: ", ";\n    --switch-box-shadow: none;\n\n    &:not([hidden]) {\n      display: block;\n    }\n    position: relative;\n    width: ", ";\n    height: ", ";\n    border-radius: ", ";\n\n    /* Make sure it’s not possible to interact with the wrapper element */\n    pointer-events: none;\n\n    &:after {\n      content: '';\n      display: block;\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      z-index: 1;\n      box-shadow: var(--switch-box-shadow);\n      border-radius: inherit;\n    }\n\n    /* Focus styles */\n    input:focus + && {\n      --switch-box-shadow: ", ";\n    }\n\n    input:focus:not(:focus-visible) + && {\n      --switch-box-shadow: none;\n    }\n\n    input:checked + && {\n      --switch-bg-color: ", ";\n      --switch-fg-color: ", ";\n    }\n\n    @media (hover: hover) {\n      input:not(:disabled):hover + && {\n        --switch-bg-color: ", ";\n        --switch-fg-color: ", ";\n      }\n\n      input:not(:disabled):checked:hover + && {\n        --switch-bg-color: ", ";\n        --switch-fg-color: ", ";\n      }\n    }\n\n    input:not([data-read-only]):disabled + && {\n      --switch-bg-color: ", ";\n      --switch-fg-color: ", ";\n    }\n  "])), color3.default.enabled.bg, color3.default.enabled.fg, rem(input.switch.width), rem(input.switch.height), rem(input.switch.height / 2), focusRingStyle({
    focusRing
  }), color3.positive.enabled.bg, color3.positive.enabled.fg, color3.default.hovered.bg, color3.default.hovered.fg, color3.positive.hovered.bg, color3.positive.hovered.fg, color3.default.disabled.bg, color3.default.disabled.fg);
}
function switchTrackStyles(props) {
  const {
    theme
  } = props;
  const {
    input
  } = theme.sanity;
  return ct(_d$4 || (_d$4 = __template$i(["\n    &:not([hidden]) {\n      display: block;\n    }\n    background-color: var(--switch-bg-color);\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: ", ";\n    height: ", ";\n    border-radius: ", ";\n  "])), rem(input.switch.width), rem(input.switch.height), rem(input.switch.height / 2));
}
function switchThumbStyles(props) {
  const {
    $indeterminate,
    theme
  } = props;
  const {
    input
  } = theme.sanity;
  const trackWidth = input.switch.width;
  const trackHeight = input.switch.height;
  const trackPadding = input.switch.padding;
  const size3 = trackHeight - input.switch.padding * 2;
  const checkedOffset = trackWidth - trackPadding * 2 - size3;
  const indeterminateOffset = trackWidth / 2 - size3 / 2 - trackPadding;
  const checked = $indeterminate !== true && props.$checked === true;
  return ct(_g || (_g = __template$i(["\n    &:not([hidden]) {\n      display: block;\n    }\n    position: absolute;\n    left: ", ";\n    top: ", ";\n    height: ", ";\n    width: ", ";\n    border-radius: ", ";\n    transition-property: transform;\n    transition-duration: ", "ms;\n    transition-timing-function: ", ";\n    background: var(--switch-fg-color);\n    transform: translate3d(0, 0, 0);\n\n    ", "\n\n    ", "\n  "])), rem(trackPadding), rem(trackPadding), rem(size3), rem(size3), rem(size3 / 2), input.switch.transitionDurationMs, input.switch.transitionTimingFunction, checked && ct(_e$2 || (_e$2 = __template$i(["\n      transform: translate3d(", "px, 0, 0);\n    "])), checkedOffset), $indeterminate && ct(_f$2 || (_f$2 = __template$i(["\n      transform: translate3d(", "px, 0, 0);\n    "])), indeterminateOffset));
}
var Root$e = pt.span(switchBaseStyles);
var Input$2 = pt.input(switchInputStyles);
var Representation = pt.span(switchRepresentationStyles);
var Track = pt.span(switchTrackStyles);
var Thumb = pt.span(switchThumbStyles);
var Switch = (0, import_react47.forwardRef)(function Switch2(props, forwardedRef) {
  const {
    checked,
    className,
    disabled,
    indeterminate,
    readOnly,
    style,
    ...restProps
  } = props;
  const ref = useForwardedRef(forwardedRef);
  (0, import_react47.useEffect)(() => {
    if (ref.current) {
      ref.current.indeterminate = indeterminate || false;
    }
  }, [indeterminate, ref]);
  return (0, import_jsx_runtime2.jsxs)(Root$e, {
    className,
    "data-ui": "Switch",
    style,
    children: [(0, import_jsx_runtime2.jsx)(Input$2, {
      "data-read-only": !disabled && readOnly ? "" : void 0,
      ...restProps,
      checked: indeterminate !== true && checked,
      disabled: disabled || readOnly,
      type: "checkbox",
      ref
    }), (0, import_jsx_runtime2.jsxs)(Representation, {
      "aria-hidden": true,
      "data-name": "representation",
      children: [(0, import_jsx_runtime2.jsx)(Track, {}), (0, import_jsx_runtime2.jsx)(Thumb, {
        $checked: checked,
        $indeterminate: indeterminate
      })]
    })]
  });
});
var __freeze$h = Object.freeze;
var __defProp$h = Object.defineProperty;
var __template$h = (cooked, raw) => __freeze$h(__defProp$h(cooked, "raw", {
  value: __freeze$h(raw || cooked.slice())
}));
var _a$h;
var Root$d = pt.span(textInputRootStyle);
var InputRoot$1 = pt.span(_a$h || (_a$h = __template$h(["\n  flex: 1;\n  min-width: 0;\n  display: block;\n  position: relative;\n"])));
var Input$1 = pt.textarea(responsiveInputPaddingStyle, textInputBaseStyle, textInputFontSizeStyle);
var Presentation$1 = pt.div(responsiveRadiusStyle, textInputRepresentationStyle);
var TextArea = (0, import_react47.forwardRef)(function TextArea2(props, forwardedRef) {
  const {
    border: border2 = true,
    customValidity,
    disabled = false,
    fontSize: fontSize2 = 2,
    padding = 3,
    radius = 1,
    weight,
    ...restProps
  } = props;
  const ref = useForwardedRef(forwardedRef);
  const rootTheme = useRootTheme();
  useCustomValidity(ref, customValidity);
  return (0, import_jsx_runtime2.jsx)(Root$d, {
    "data-ui": "TextArea",
    children: (0, import_jsx_runtime2.jsxs)(InputRoot$1, {
      children: [(0, import_jsx_runtime2.jsx)(Input$1, {
        "data-as": "textarea",
        "data-scheme": rootTheme.scheme,
        "data-tone": rootTheme.tone,
        ...restProps,
        $fontSize: useArrayProp(fontSize2),
        $padding: useArrayProp(padding),
        $scheme: rootTheme.scheme,
        $space: useArrayProp(0),
        $tone: rootTheme.tone,
        $weight: weight,
        disabled,
        ref
      }), (0, import_jsx_runtime2.jsx)(Presentation$1, {
        $radius: useArrayProp(radius),
        $scheme: rootTheme.scheme,
        $tone: rootTheme.tone,
        "data-border": border2 ? "" : void 0,
        "data-scheme": rootTheme.scheme,
        "data-tone": rootTheme.tone
      })]
    })
  });
});
var __freeze$g = Object.freeze;
var __defProp$g = Object.defineProperty;
var __template$g = (cooked, raw) => __freeze$g(__defProp$g(cooked, "raw", {
  value: __freeze$g(raw || cooked.slice())
}));
var _a$g;
var _b$a;
var _c$5;
var _d$3;
var _e$1;
var _f$1;
var CLEAR_BUTTON_BOX_STYLE = {
  zIndex: 2
};
var Root$c = pt(Card).attrs({
  forwardedAs: "span"
})(textInputRootStyle);
var InputRoot = pt.span(_a$g || (_a$g = __template$g(["\n  flex: 1;\n  min-width: 0;\n  display: block;\n  position: relative;\n"])));
var Prefix = pt(Card).attrs({
  forwardedAs: "span"
})(_b$a || (_b$a = __template$g(["\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n\n  & > span {\n    display: block;\n    margin: -1px;\n  }\n"])));
var Suffix = pt(Card).attrs({
  forwardedAs: "span"
})(_c$5 || (_c$5 = __template$g(["\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n\n  & > span {\n    display: block;\n    margin: -1px;\n  }\n"])));
var Input = pt.input(responsiveInputPaddingStyle, textInputBaseStyle, textInputFontSizeStyle);
var Presentation = pt.span(responsiveRadiusStyle, textInputRepresentationStyle);
var LeftBox = pt(Box)(_d$3 || (_d$3 = __template$g(["\n  position: absolute;\n  top: 0;\n  left: 0;\n"])));
var RightBox = pt(Box)(_e$1 || (_e$1 = __template$g(["\n  position: absolute;\n  top: 0;\n  right: 0;\n"])));
var RightCard = pt(Card)(_f$1 || (_f$1 = __template$g(["\n  background-color: transparent;\n  position: absolute;\n  top: 0;\n  right: 0;\n"])));
var TextInputClearButton = pt(Button)({
  "&:not([hidden])": {
    display: "block"
  }
});
var TextInput = (0, import_react47.forwardRef)(function TextInput2(props, forwardedRef) {
  const {
    border: border2 = true,
    clearButton,
    disabled = false,
    fontSize: fontSizeProp = 2,
    icon,
    iconRight,
    onClear,
    padding: paddingProp = 3,
    prefix,
    radius: radiusProp = 1,
    readOnly,
    space: spaceProp = 3,
    suffix,
    customValidity,
    type = "text",
    weight,
    ...restProps
  } = props;
  const ref = useForwardedRef(forwardedRef);
  const rootTheme = useRootTheme();
  const fontSize2 = useArrayProp(fontSizeProp);
  const padding = useArrayProp(paddingProp);
  const radius = useArrayProp(radiusProp);
  const space = useArrayProp(spaceProp);
  const $hasClearButton = Boolean(clearButton);
  const $hasIcon = Boolean(icon);
  const $hasIconRight = Boolean(iconRight);
  const $hasSuffix = Boolean(suffix);
  const $hasPrefix = Boolean(prefix);
  useCustomValidity(ref, customValidity);
  const handleClearMouseDown = (0, import_react47.useCallback)((event) => {
    event.preventDefault();
    event.stopPropagation();
  }, []);
  const handleClearClick = (0, import_react47.useCallback)((event) => {
    var _a22;
    event.preventDefault();
    event.stopPropagation();
    if (onClear)
      onClear();
    (_a22 = ref.current) == null ? void 0 : _a22.focus();
  }, [onClear, ref]);
  const prefixNode = (0, import_react47.useMemo)(() => prefix && (0, import_jsx_runtime2.jsx)(Prefix, {
    borderTop: true,
    borderLeft: true,
    borderBottom: true,
    radius,
    sizing: "border",
    tone: "inherit",
    children: (0, import_jsx_runtime2.jsx)("span", {
      children: prefix
    })
  }), [prefix, radius]);
  const presentationNode = (0, import_react47.useMemo)(() => (0, import_jsx_runtime2.jsxs)(Presentation, {
    $hasPrefix,
    $hasSuffix,
    $radius: radius,
    $scheme: rootTheme.scheme,
    $tone: rootTheme.tone,
    "data-border": border2 ? "" : void 0,
    "data-scheme": rootTheme.scheme,
    "data-tone": rootTheme.tone,
    children: [icon && (0, import_jsx_runtime2.jsx)(LeftBox, {
      padding,
      children: (0, import_jsx_runtime2.jsxs)(Text, {
        size: fontSize2,
        children: [(0, import_react47.isValidElement)(icon) && icon, (0, import_react_is.isValidElementType)(icon) && (0, import_react47.createElement)(icon)]
      })
    }), !$hasClearButton && iconRight && (0, import_jsx_runtime2.jsx)(RightBox, {
      padding,
      children: (0, import_jsx_runtime2.jsxs)(Text, {
        size: fontSize2,
        children: [(0, import_react47.isValidElement)(iconRight) && iconRight, (0, import_react_is.isValidElementType)(iconRight) && (0, import_react47.createElement)(iconRight)]
      })
    })]
  }), [border2, fontSize2, icon, iconRight, padding, radius, rootTheme, $hasClearButton, $hasPrefix, $hasSuffix]);
  const clearButtonBoxPadding = (0, import_react47.useMemo)(() => padding.map((v) => {
    if (v === 0)
      return 0;
    if (v === 1)
      return 1;
    if (v === 2)
      return 1;
    return v - 2;
  }), [padding]);
  const clearButtonPadding = (0, import_react47.useMemo)(() => padding.map((v) => {
    if (v === 0)
      return 0;
    if (v === 1)
      return 0;
    if (v === 2)
      return 1;
    return v - 1;
  }), [padding]);
  const clearButtonProps = (0, import_react47.useMemo)(() => typeof clearButton === "object" ? clearButton : EMPTY_RECORD, [clearButton]);
  const clearButtonNode = (0, import_react47.useMemo)(() => !disabled && !readOnly && clearButton && (0, import_jsx_runtime2.jsx)(RightCard, {
    forwardedAs: "span",
    padding: clearButtonBoxPadding,
    style: CLEAR_BUTTON_BOX_STYLE,
    tone: customValidity ? "critical" : "inherit",
    children: (0, import_jsx_runtime2.jsx)(TextInputClearButton, {
      "aria-label": "Clear",
      "data-qa": "clear-button",
      fontSize: fontSize2,
      icon: CloseIcon,
      mode: "bleed",
      padding: clearButtonPadding,
      radius,
      ...clearButtonProps,
      onClick: handleClearClick,
      onMouseDown: handleClearMouseDown
    })
  }), [clearButton, clearButtonBoxPadding, clearButtonPadding, clearButtonProps, customValidity, disabled, fontSize2, handleClearClick, handleClearMouseDown, radius, readOnly]);
  const suffixNode = (0, import_react47.useMemo)(() => suffix && (0, import_jsx_runtime2.jsx)(Suffix, {
    borderTop: true,
    borderRight: true,
    borderBottom: true,
    radius,
    sizing: "border",
    tone: "inherit",
    children: (0, import_jsx_runtime2.jsx)("span", {
      children: suffix
    })
  }), [radius, suffix]);
  return (0, import_jsx_runtime2.jsxs)(Root$c, {
    "data-ui": "TextInput",
    tone: rootTheme.tone,
    children: [prefixNode, (0, import_jsx_runtime2.jsxs)(InputRoot, {
      children: [(0, import_jsx_runtime2.jsx)(Input, {
        "data-as": "input",
        "data-scheme": rootTheme.scheme,
        "data-tone": rootTheme.tone,
        ...restProps,
        $fontSize: fontSize2,
        $iconLeft: $hasIcon,
        $iconRight: $hasIconRight || $hasClearButton,
        $padding: padding,
        $scheme: rootTheme.scheme,
        $space: space,
        $tone: rootTheme.tone,
        $weight: weight,
        disabled,
        readOnly,
        ref,
        type
      }), presentationNode, clearButtonNode]
    }), suffixNode]
  });
});
function useDelayedState(initialState) {
  const [state, setState] = (0, import_react47.useState)(initialState);
  const delayedAction = (0, import_react47.useRef)();
  const onStateChange = (0, import_react47.useCallback)((nextState, delay2) => {
    const action = () => {
      setState(nextState);
    };
    if (delayedAction.current) {
      clearTimeout(delayedAction.current);
      delayedAction.current = void 0;
    }
    if (!delay2)
      return action();
    delayedAction.current = setTimeout(action, delay2);
  }, []);
  return [state, onStateChange];
}
var DEFAULT_TOOLTIP_PADDING = 4;
var DEFAULT_FALLBACK_PLACEMENTS = {
  top: ["bottom", "left", "right"],
  "top-start": ["bottom-start", "left-start", "right-start"],
  "top-end": ["bottom-end", "left-end", "right-end"],
  bottom: ["top", "left", "right"],
  "bottom-start": ["top-start", "left-start", "right-start"],
  "bottom-end": ["top-end", "left-end", "right-end"],
  left: ["right", "top", "bottom"],
  "left-start": ["right-start", "top-start", "bottom-start"],
  "left-end": ["right-end", "top-end", "bottom-end"],
  right: ["left", "top", "bottom"],
  "right-start": ["left-start", "top-start", "bottom-start"],
  "right-end": ["left-end", "top-end", "bottom-end"]
};
var __freeze$f = Object.freeze;
var __defProp$f = Object.defineProperty;
var __template$f = (cooked, raw) => __freeze$f(__defProp$f(cooked, "raw", {
  value: __freeze$f(raw || cooked.slice())
}));
var _a$f;
var _b$9;
var _c$4;
var Root$b = pt.div(_a$f || (_a$f = __template$f(["\n  position: absolute;\n  pointer-events: none;\n  width: 15px;\n  height: 15px;\n  fill: none;\n\n  :empty + & {\n    display: none;\n  }\n\n  & > svg {\n    display: block;\n    transform-origin: 7.5px 7.5px;\n  }\n\n  /* position: absolute;\n  width: 15px;\n  height: 15px;\n  fill: none;\n\n  :empty + & {\n    display: none;\n  }\n\n  & > svg {\n    &:not([hidden]) {\n      display: block;\n    }\n    transform-origin: 7.5px 7.5px;\n  } */\n\n  [data-placement^='top'] > & {\n    bottom: -27px;\n  }\n\n  [data-placement^='right'] > & {\n    left: -27px;\n\n    & > svg {\n      transform: rotate(90deg);\n    }\n  }\n\n  [data-placement^='left'] > & {\n    right: -27px;\n\n    & > svg {\n      transform: rotate(-90deg);\n    }\n  }\n\n  [data-placement^='bottom'] > & {\n    top: -27px;\n\n    & > svg {\n      transform: rotate(180deg);\n    }\n  }\n"])));
var Border = pt.path(_b$9 || (_b$9 = __template$f(["\n  fill: var(--card-shadow-outline-color);\n"])));
var Shape = pt.path(_c$4 || (_c$4 = __template$f(["\n  fill: var(--card-bg-color);\n"])));
var TooltipArrow = (0, import_react47.forwardRef)(function TooltipArrow2(props, ref) {
  const {
    ...restProps
  } = props;
  return (0, import_jsx_runtime2.jsx)(Root$b, {
    "data-ui": "Tooltip__arrow",
    ...restProps,
    ref,
    children: (0, import_jsx_runtime2.jsxs)("svg", {
      width: "15",
      height: "15",
      viewBox: "0 0 15 15",
      children: [(0, import_jsx_runtime2.jsx)(Border, {
        d: "M11.5266 1C11.032 1.32802 10.5837 1.73105 10.1995 2.20057L9.04792 3.6081C8.24771 4.58614 6.7523 4.58614 5.95209 3.6081L4.80047 2.20057C4.41632 1.73105 3.96796 1.32802 3.47341 1H0.156727C1.65639 1 3.07687 1.67313 4.02651 2.83381L5.17813 4.24134C6.37844 5.70839 8.62156 5.70839 9.82187 4.24134L10.9735 2.83381C11.9231 1.67313 13.3436 1 14.8433 1H11.5266Z"
      }), (0, import_jsx_runtime2.jsx)(Shape, {
        d: "M0.156725 0C1.95632 0 3.66089 0.80776 4.80047 2.20057L5.95209 3.6081C6.75229 4.58614 8.24771 4.58614 9.04791 3.6081L10.1995 2.20057C11.3391 0.80776 13.0437 0 14.8433 0H15H0H0.156725Z"
      })]
    })
  });
});
var key$4 = Symbol.for("@sanity/ui/context/tooltipDelayGroup");
globalScope[key$4] = globalScope[key$4] || (0, import_react47.createContext)(null);
var TooltipDelayGroupContext = globalScope[key$4];
function useTooltipDelayGroup() {
  const value = (0, import_react47.useContext)(TooltipDelayGroupContext);
  return value;
}
var __freeze$e = Object.freeze;
var __defProp$e = Object.defineProperty;
var __template$e = (cooked, raw) => __freeze$e(__defProp$e(cooked, "raw", {
  value: __freeze$e(raw || cooked.slice())
}));
var _a$e;
var Root$a = pt(Layer)(_a$e || (_a$e = __template$e(["\n  pointer-events: none;\n  max-width: ", "px;\n"])), (_ref22) => {
  let {
    $maxWidth
  } = _ref22;
  return $maxWidth;
});
var Tooltip = (0, import_react47.forwardRef)(function Tooltip2(props, ref) {
  var _a22, _b2, _c2, _d2, _e2, _f2;
  const boundaryElementContext = useBoundaryElement();
  const theme = useTheme();
  const {
    boundaryElement = boundaryElementContext == null ? void 0 : boundaryElementContext.element,
    children: childProp,
    content,
    disabled,
    fallbackPlacements: fallbackPlacementsProp = (_b2 = props.fallbackPlacements) != null ? _b2 : DEFAULT_FALLBACK_PLACEMENTS[(_a22 = props.placement) != null ? _a22 : "bottom"],
    padding,
    placement: placementProp = "bottom",
    portal: portalProp,
    scheme,
    shadow = 2,
    zOffset = (_c2 = theme.sanity.layer) == null ? void 0 : _c2.tooltip.zOffset,
    delay: delay2,
    ...restProps
  } = props;
  const fallbackPlacements = useArrayProp(fallbackPlacementsProp);
  const forwardedRef = useForwardedRef(ref);
  const [referenceElement, setReferenceElement] = (0, import_react47.useState)(null);
  const arrowRef = (0, import_react47.useRef)(null);
  const rootBoundary = "viewport";
  const portal = usePortal();
  const portalElement = typeof portalProp === "string" ? ((_d2 = portal.elements) == null ? void 0 : _d2[portalProp]) || null : portal.element;
  const tooltipWidth = (0, import_react47.useMemo)(() => {
    const availableWidths = [...boundaryElement ? [boundaryElement.offsetWidth] : [], (portalElement == null ? void 0 : portalElement.offsetWidth) || document.body.offsetWidth];
    return Math.min(...availableWidths) - DEFAULT_TOOLTIP_PADDING * 2;
  }, [boundaryElement, portalElement == null ? void 0 : portalElement.offsetWidth]);
  const middleware = (0, import_react47.useMemo)(() => {
    const ret = [];
    ret.push(flip({
      boundary: boundaryElement || void 0,
      fallbackPlacements,
      padding: DEFAULT_TOOLTIP_PADDING,
      rootBoundary
    }));
    ret.push(offset({
      mainAxis: 3
    }));
    ret.push(shift({
      boundary: boundaryElement || void 0,
      rootBoundary,
      padding: DEFAULT_TOOLTIP_PADDING
    }));
    ret.push(arrow2({
      element: arrowRef,
      padding: 2
    }));
    return ret;
  }, [boundaryElement, fallbackPlacements]);
  const {
    floatingStyles,
    placement,
    middlewareData,
    refs,
    update
  } = useFloating({
    middleware,
    placement: placementProp,
    whileElementsMounted: autoUpdate
  });
  const staticSide = placement && FLOATING_STATIC_SIDES[placement.split("-")[0]];
  const arrowX = (_e2 = middlewareData.arrow) == null ? void 0 : _e2.x;
  const arrowY = (_f2 = middlewareData.arrow) == null ? void 0 : _f2.y;
  const arrowStyle = (0, import_react47.useMemo)(() => {
    const style = {
      left: arrowX !== null ? arrowX : void 0,
      top: arrowY !== null ? arrowY : void 0,
      right: void 0,
      bottom: void 0
    };
    if (staticSide)
      style[staticSide] = -15;
    return style;
  }, [arrowX, arrowY, staticSide]);
  const tooltipId = (0, import_react47.useId)();
  const [isOpen, setIsOpen] = useDelayedState(false);
  const delayGroupContext = useTooltipDelayGroup();
  const showTooltip = isOpen || (delayGroupContext == null ? void 0 : delayGroupContext.openTooltipId) === tooltipId;
  const isInsideGroup = delayGroupContext !== null;
  const openDelayProp = typeof delay2 === "number" ? delay2 : (delay2 == null ? void 0 : delay2.open) || 0;
  const closeDelayProp = typeof delay2 === "number" ? delay2 : (delay2 == null ? void 0 : delay2.close) || 0;
  const openDelay = isInsideGroup ? delayGroupContext.openDelay : openDelayProp;
  const closeDelay = isInsideGroup ? delayGroupContext.closeDelay : closeDelayProp;
  const handleIsOpenChange = (0, import_react47.useCallback)((open, immediate) => {
    if (isInsideGroup) {
      if (open) {
        const groupedOpenDelay = immediate ? 0 : openDelay;
        delayGroupContext.setIsGroupActive(open, groupedOpenDelay);
        delayGroupContext.setOpenTooltipId(tooltipId, groupedOpenDelay);
      } else {
        const minimumGroupDeactivateDelay = 200;
        const groupDeactivateDelay = closeDelay > minimumGroupDeactivateDelay ? closeDelay : minimumGroupDeactivateDelay;
        delayGroupContext.setIsGroupActive(open, groupDeactivateDelay);
        delayGroupContext.setOpenTooltipId(null, immediate ? 0 : closeDelay);
      }
    } else {
      const standaloneDelay = immediate ? 0 : open ? openDelay : closeDelay;
      setIsOpen(open, standaloneDelay);
    }
  }, [isInsideGroup, delayGroupContext, openDelay, tooltipId, closeDelay, setIsOpen]);
  const handleBlur = (0, import_react47.useCallback)((e) => {
    var _a3, _b22;
    handleIsOpenChange(false);
    (_b22 = (_a3 = childProp == null ? void 0 : childProp.props) == null ? void 0 : _a3.onBlur) == null ? void 0 : _b22.call(_a3, e);
  }, [childProp == null ? void 0 : childProp.props, handleIsOpenChange]);
  const handleClick = (0, import_react47.useCallback)((e) => {
    var _a3, _b22;
    handleIsOpenChange(false, true);
    (_b22 = childProp == null ? void 0 : (_a3 = childProp.props).onClick) == null ? void 0 : _b22.call(_a3, e);
  }, [childProp == null ? void 0 : childProp.props, handleIsOpenChange]);
  const handleContextMenu = (0, import_react47.useCallback)((e) => {
    var _a3, _b22;
    handleIsOpenChange(false, true);
    (_b22 = childProp == null ? void 0 : (_a3 = childProp.props).onContextMenu) == null ? void 0 : _b22.call(_a3, e);
  }, [childProp == null ? void 0 : childProp.props, handleIsOpenChange]);
  const handleFocus = (0, import_react47.useCallback)((e) => {
    var _a3, _b22;
    handleIsOpenChange(true);
    (_b22 = (_a3 = childProp == null ? void 0 : childProp.props) == null ? void 0 : _a3.onFocus) == null ? void 0 : _b22.call(_a3, e);
  }, [childProp == null ? void 0 : childProp.props, handleIsOpenChange]);
  const handleMouseEnter = (0, import_react47.useCallback)((e) => {
    var _a3, _b22;
    handleIsOpenChange(true);
    (_b22 = (_a3 = childProp == null ? void 0 : childProp.props) == null ? void 0 : _a3.onMouseEnter) == null ? void 0 : _b22.call(_a3, e);
  }, [childProp == null ? void 0 : childProp.props, handleIsOpenChange]);
  const handleMouseLeave = (0, import_react47.useCallback)((e) => {
    var _a3, _b22;
    handleIsOpenChange(false);
    (_b22 = (_a3 = childProp == null ? void 0 : childProp.props) == null ? void 0 : _a3.onMouseLeave) == null ? void 0 : _b22.call(_a3, e);
  }, [childProp == null ? void 0 : childProp.props, handleIsOpenChange]);
  (0, import_react47.useEffect)(() => {
    if (!isOpen)
      return;
    function handleWindowMouseMove(event) {
      if (!referenceElement)
        return;
      const isHoveringReference = referenceElement === event.target || event.target instanceof Node && referenceElement.contains(event.target);
      if (!isHoveringReference) {
        handleIsOpenChange(false);
        window.removeEventListener("mousemove", handleWindowMouseMove);
      }
    }
    window.addEventListener("mousemove", handleWindowMouseMove);
    return () => {
      window.removeEventListener("mousemove", handleWindowMouseMove);
    };
  }, [isOpen, referenceElement, handleIsOpenChange]);
  (0, import_react47.useEffect)(() => {
    if (disabled)
      handleIsOpenChange(false);
  }, [disabled, handleIsOpenChange]);
  (0, import_react47.useEffect)(() => {
    if (!content)
      handleIsOpenChange(false);
  }, [content, handleIsOpenChange]);
  (0, import_react47.useEffect)(() => refs.setReference(referenceElement), [referenceElement, refs]);
  (0, import_react47.useEffect)(() => {
    if (!showTooltip)
      return;
    function handleWindowKeyDown(event) {
      if (event.key === "Escape") {
        handleIsOpenChange(false, true);
      }
    }
    window.addEventListener("keydown", handleWindowKeyDown);
    return () => {
      window.removeEventListener("keydown", handleWindowKeyDown);
    };
  }, [handleIsOpenChange, showTooltip]);
  const setArrow = (0, import_react47.useCallback)((arrowEl) => {
    arrowRef.current = arrowEl;
    update();
  }, [update]);
  const setFloating = (0, import_react47.useCallback)((node) => {
    forwardedRef.current = node;
    refs.setFloating(node);
  }, [forwardedRef, refs]);
  const childRef = childProp == null ? void 0 : childProp.ref;
  const setReference = (0, import_react47.useCallback)((node) => {
    if (typeof childRef === "function") {
      childRef(node);
    } else if (childRef) {
      childRef.current = node;
    }
    setReferenceElement(node);
  }, [childRef]);
  const child = (0, import_react47.useMemo)(() => {
    if (!childProp)
      return null;
    return (0, import_react47.cloneElement)(childProp, {
      onBlur: handleBlur,
      onFocus: handleFocus,
      onMouseEnter: handleMouseEnter,
      onMouseLeave: handleMouseLeave,
      onClick: handleClick,
      onContextMenu: handleContextMenu,
      ref: setReference
    });
  }, [childProp, handleBlur, handleClick, handleContextMenu, handleFocus, handleMouseEnter, handleMouseLeave, setReference]);
  if (!child)
    return (0, import_jsx_runtime2.jsx)(import_jsx_runtime2.Fragment, {});
  if (disabled)
    return child;
  const root = (0, import_jsx_runtime2.jsx)(Root$a, {
    "data-ui": "Tooltip",
    ...restProps,
    ref: setFloating,
    style: floatingStyles,
    zOffset,
    $maxWidth: tooltipWidth,
    children: (0, import_jsx_runtime2.jsxs)(Card, {
      "data-ui": "Tooltip__card",
      "data-placement": placement,
      padding,
      radius: 2,
      scheme,
      shadow,
      children: [content, (0, import_jsx_runtime2.jsx)(TooltipArrow, {
        ref: setArrow,
        style: arrowStyle
      })]
    })
  });
  return (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, {
    children: [child, showTooltip && (0, import_jsx_runtime2.jsx)(import_jsx_runtime2.Fragment, {
      children: portalProp ? (0, import_jsx_runtime2.jsx)(Portal, {
        __unstable_name: typeof portalProp === "string" ? portalProp : void 0,
        children: root
      }) : root
    })]
  });
});
var __freeze$d = Object.freeze;
var __defProp$d = Object.defineProperty;
var __template$d = (cooked, raw) => __freeze$d(__defProp$d(cooked, "raw", {
  value: __freeze$d(raw || cooked.slice())
}));
var _a$d;
var _b$8;
var _c$3;
var _d$2;
var Root$9 = pt.div(_a$d || (_a$d = __template$d(["\n  line-height: 0;\n"])));
var ListBox = pt(Box)(_b$8 || (_b$8 = __template$d(["\n  & > ul {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n  }\n"])));
var rotate = ft(_c$3 || (_c$3 = __template$d(["\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(360deg);\n  }\n"])));
var AnimatedSpinnerIcon = pt(SpinnerIcon)(_d$2 || (_d$2 = __template$d(["\n  animation: ", " 500ms linear infinite;\n"])), rotate);
function AutocompleteOption(props) {
  const {
    children,
    id: id3,
    onSelect,
    selected,
    value
  } = props;
  const handleClick = (0, import_react47.useCallback)(() => {
    setTimeout(() => {
      onSelect(value);
    }, 0);
  }, [onSelect, value]);
  const handleKeyDown = (0, import_react47.useCallback)((event) => {
    if (event.key === "Enter" && !_isEnterToClickElement(event.currentTarget)) {
      handleClick();
    }
  }, [handleClick]);
  return (0, import_jsx_runtime2.jsx)("li", {
    "aria-selected": selected,
    "data-ui": "AutocompleteOption",
    id: id3,
    role: "option",
    onClick: handleClick,
    onKeyDown: handleKeyDown,
    children
  });
}
function autocompleteReducer(state, msg2) {
  if (msg2.type === "input/change") {
    return {
      ...state,
      activeValue: null,
      focused: true,
      query: msg2.query
    };
  }
  if (msg2.type === "input/focus") {
    return {
      ...state,
      focused: true
    };
  }
  if (msg2.type === "root/blur") {
    return {
      ...state,
      focused: false,
      query: null
    };
  }
  if (msg2.type === "root/clear") {
    return {
      ...state,
      activeValue: null,
      query: null,
      value: null
    };
  }
  if (msg2.type === "root/escape") {
    return {
      ...state,
      focused: false,
      query: null
    };
  }
  if (msg2.type === "root/open") {
    return {
      ...state,
      query: state.query || msg2.query
    };
  }
  if (msg2.type === "root/setActiveValue") {
    return {
      ...state,
      activeValue: msg2.value,
      listFocused: msg2.listFocused || state.listFocused
    };
  }
  if (msg2.type === "root/setListFocused") {
    return {
      ...state,
      listFocused: msg2.listFocused
    };
  }
  if (msg2.type === "value/change") {
    return {
      ...state,
      activeValue: msg2.value,
      query: null,
      value: msg2.value
    };
  }
  return state;
}
var AUTOCOMPLETE_LISTBOX_IGNORE_KEYS = ["Control", "Shift", "Alt", "Enter", "Home", "End", "PageUp", "PageDown", "Meta", "Tab", "CapsLock"];
var AUTOCOMPLETE_POPOVER_PLACEMENT = "bottom-start";
var AUTOCOMPLETE_POPOVER_FALLBACK_PLACEMENTS = ["bottom-start", "top-start"];
var DEFAULT_RENDER_VALUE = (value, option) => option ? option.value : value;
var DEFAULT_FILTER_OPTION = (query, option) => option.value.toLowerCase().indexOf(query.toLowerCase()) > -1;
var InnerAutocomplete = (0, import_react47.forwardRef)(function InnerAutocomplete2(props, ref) {
  const {
    border: border2 = true,
    customValidity,
    disabled,
    filterOption: filterOptionProp,
    fontSize: fontSize2 = 2,
    icon,
    id: id3,
    listBox = EMPTY_RECORD,
    loading,
    onBlur,
    onChange,
    onFocus,
    onQueryChange,
    onSelect,
    openButton,
    options: optionsProp,
    padding: paddingProp = 3,
    popover = EMPTY_RECORD,
    prefix,
    radius = 3,
    readOnly,
    relatedElements,
    renderOption: renderOptionProp,
    renderPopover,
    renderValue = DEFAULT_RENDER_VALUE,
    suffix,
    value: valueProp,
    ...restProps
  } = props;
  const [state, dispatch] = (0, import_react47.useReducer)(autocompleteReducer, {
    activeValue: valueProp || null,
    focused: false,
    listFocused: false,
    query: null,
    value: valueProp || null
  });
  const {
    activeValue,
    focused,
    listFocused,
    query,
    value
  } = state;
  const defaultRenderOption = (0, import_react47.useCallback)((_ref23) => {
    let {
      value: value2
    } = _ref23;
    return (0, import_jsx_runtime2.jsx)(Card, {
      "data-as": "button",
      padding: paddingProp,
      radius: 2,
      tone: "inherit",
      children: (0, import_jsx_runtime2.jsx)(Text, {
        size: fontSize2,
        textOverflow: "ellipsis",
        children: value2
      })
    });
  }, [fontSize2, paddingProp]);
  const renderOption = typeof renderOptionProp === "function" ? renderOptionProp : defaultRenderOption;
  const filterOption = typeof filterOptionProp === "function" ? filterOptionProp : DEFAULT_FILTER_OPTION;
  const rootElementRef = (0, import_react47.useRef)(null);
  const resultsPopoverElementRef = (0, import_react47.useRef)(null);
  const inputElementRef = (0, import_react47.useRef)(null);
  const listBoxElementRef = (0, import_react47.useRef)(null);
  const listFocusedRef = (0, import_react47.useRef)(false);
  const valueRef = (0, import_react47.useRef)(value);
  const valuePropRef = (0, import_react47.useRef)(valueProp);
  const popoverMouseWithinRef = (0, import_react47.useRef)(false);
  const forwardedRef = useForwardedRef(ref);
  const listBoxId = "".concat(id3, "-listbox");
  const options = Array.isArray(optionsProp) ? optionsProp : EMPTY_ARRAY;
  const padding = useArrayProp(paddingProp);
  const currentOption = (0, import_react47.useMemo)(() => value !== null ? options.find((o) => o.value === value) : void 0, [options, value]);
  const filteredOptions = (0, import_react47.useMemo)(() => options.filter((option) => query ? filterOption(query, option) : true), [filterOption, options, query]);
  const filteredOptionsLen = filteredOptions.length;
  const activeItemId = activeValue ? "".concat(id3, "-option-").concat(activeValue) : void 0;
  const expanded = query !== null && loading || focused && query !== null;
  const handleRootBlur = (0, import_react47.useCallback)((event) => {
    setTimeout(() => {
      if (popoverMouseWithinRef.current) {
        return;
      }
      const elements = (relatedElements || []).concat(rootElementRef.current ? [rootElementRef.current] : [], resultsPopoverElementRef.current ? [resultsPopoverElementRef.current] : []);
      let focusInside = false;
      if (document.activeElement) {
        for (const e of elements) {
          if (e === document.activeElement || e.contains(document.activeElement)) {
            focusInside = true;
            break;
          }
        }
      }
      if (focusInside === false) {
        dispatch({
          type: "root/blur"
        });
        popoverMouseWithinRef.current = false;
        if (onQueryChange)
          onQueryChange(null);
        if (onBlur)
          onBlur(event);
      }
    }, 0);
  }, [onBlur, onQueryChange, relatedElements]);
  const handleRootFocus = (0, import_react47.useCallback)((event) => {
    const listBoxElement = listBoxElementRef.current;
    const focusedElement = event.target instanceof HTMLElement ? event.target : null;
    const listFocused2 = (listBoxElement == null ? void 0 : listBoxElement.contains(focusedElement)) || false;
    if (listFocused2 !== listFocusedRef.current) {
      listFocusedRef.current = listFocused2;
      dispatch({
        type: "root/setListFocused",
        listFocused: listFocused2
      });
    }
  }, []);
  const handleOptionSelect = (0, import_react47.useCallback)((v) => {
    var _a3;
    dispatch({
      type: "value/change",
      value: v
    });
    popoverMouseWithinRef.current = false;
    if (onSelect)
      onSelect(v);
    valueRef.current = v;
    if (onChange)
      onChange(v);
    if (onQueryChange)
      onQueryChange(null);
    (_a3 = inputElementRef.current) == null ? void 0 : _a3.focus();
  }, [onChange, onSelect, onQueryChange]);
  const handleRootKeyDown = (0, import_react47.useCallback)((event) => {
    var _a3, _b2;
    if (event.key === "ArrowDown") {
      event.preventDefault();
      if (!filteredOptionsLen)
        return;
      const activeOption = filteredOptions.find((o) => o.value === activeValue);
      const activeIndex = activeOption ? filteredOptions.indexOf(activeOption) : -1;
      const nextActiveOption = filteredOptions[(activeIndex + 1) % filteredOptionsLen];
      if (nextActiveOption) {
        dispatch({
          type: "root/setActiveValue",
          value: nextActiveOption.value,
          listFocused: true
        });
      }
      return;
    }
    if (event.key === "ArrowUp") {
      event.preventDefault();
      if (!filteredOptionsLen)
        return;
      const activeOption = filteredOptions.find((o) => o.value === activeValue);
      const activeIndex = activeOption ? filteredOptions.indexOf(activeOption) : -1;
      const nextActiveOption = filteredOptions[activeIndex === -1 ? filteredOptionsLen - 1 : (filteredOptionsLen + activeIndex - 1) % filteredOptionsLen];
      if (nextActiveOption) {
        dispatch({
          type: "root/setActiveValue",
          value: nextActiveOption.value,
          listFocused: true
        });
      }
      return;
    }
    if (event.key === "Escape") {
      dispatch({
        type: "root/escape"
      });
      popoverMouseWithinRef.current = false;
      if (onQueryChange)
        onQueryChange(null);
      (_a3 = inputElementRef.current) == null ? void 0 : _a3.focus();
      return;
    }
    const target = event.target;
    const listEl = listBoxElementRef.current;
    if ((listEl === target || (listEl == null ? void 0 : listEl.contains(target))) && !AUTOCOMPLETE_LISTBOX_IGNORE_KEYS.includes(event.key)) {
      (_b2 = inputElementRef.current) == null ? void 0 : _b2.focus();
      return;
    }
  }, [activeValue, filteredOptions, filteredOptionsLen, onQueryChange]);
  const handleInputChange = (0, import_react47.useCallback)((event) => {
    const nextQuery = event.currentTarget.value;
    dispatch({
      type: "input/change",
      query: nextQuery
    });
    if (onQueryChange)
      onQueryChange(nextQuery);
  }, [onQueryChange]);
  const handleInputFocus = (0, import_react47.useCallback)((event) => {
    if (!focused) {
      dispatch({
        type: "input/focus"
      });
      if (onFocus)
        onFocus(event);
    }
  }, [focused, onFocus]);
  const handlePopoverMouseEnter = (0, import_react47.useCallback)(() => {
    popoverMouseWithinRef.current = true;
  }, []);
  const handlePopoverMouseLeave = (0, import_react47.useCallback)(() => {
    popoverMouseWithinRef.current = false;
  }, []);
  const handleClearButtonClick = (0, import_react47.useCallback)(() => {
    var _a3;
    dispatch({
      type: "root/clear"
    });
    valueRef.current = "";
    if (onChange)
      onChange("");
    if (onQueryChange)
      onQueryChange(null);
    (_a3 = inputElementRef.current) == null ? void 0 : _a3.focus();
  }, [onChange, onQueryChange]);
  const handleClearButtonFocus = (0, import_react47.useCallback)(() => {
    dispatch({
      type: "input/focus"
    });
  }, []);
  (0, import_react47.useEffect)(() => {
    if (valueProp !== valuePropRef.current) {
      valuePropRef.current = valueProp;
      if (valueProp !== void 0) {
        dispatch({
          type: "value/change",
          value: valueProp
        });
        valueRef.current = valueProp;
      }
      return;
    }
    if (valueProp !== valueRef.current) {
      valueRef.current = valueProp || null;
      dispatch({
        type: "value/change",
        value: valueProp || null
      });
    }
  }, [valueProp]);
  (0, import_react47.useEffect)(() => {
    if (!focused && valueRef.current) {
      dispatch({
        type: "root/setActiveValue",
        value: valueRef.current
      });
    }
  }, [focused]);
  (0, import_react47.useEffect)(() => {
    const listElement = listBoxElementRef.current;
    if (!listElement)
      return;
    const activeOption = filteredOptions.find((o) => o.value === activeValue);
    if (activeOption) {
      const activeIndex = filteredOptions.indexOf(activeOption);
      const activeItemElement = listElement.childNodes[activeIndex];
      if (activeItemElement) {
        if (_hasFocus(activeItemElement)) {
          return;
        }
        focusFirstDescendant(activeItemElement);
      }
    }
  }, [activeValue, filteredOptions]);
  const setRef = (0, import_react47.useCallback)((el) => {
    inputElementRef.current = el;
    forwardedRef.current = el;
  }, [forwardedRef]);
  const clearButton = (0, import_react47.useMemo)(() => {
    if (!loading && !disabled && value) {
      return {
        "aria-label": "Clear",
        onFocus: handleClearButtonFocus
      };
    }
    return void 0;
  }, [disabled, handleClearButtonFocus, loading, value]);
  const openButtonBoxPadding = (0, import_react47.useMemo)(() => padding.map((v) => {
    if (v === 0)
      return 0;
    if (v === 1)
      return 1;
    if (v === 2)
      return 1;
    return v - 2;
  }), [padding]);
  const openButtonPadding = (0, import_react47.useMemo)(() => padding.map((v) => Math.max(v - 1, 0)), [padding]);
  const openButtonProps = (0, import_react47.useMemo)(() => typeof openButton === "object" ? openButton : EMPTY_RECORD, [openButton]);
  const handleOpenClick = (0, import_react47.useCallback)((event) => {
    dispatch({
      type: "root/open",
      query: value ? renderValue(value, currentOption) : ""
    });
    if (openButtonProps.onClick)
      openButtonProps.onClick(event);
    _raf(() => {
      var _a3;
      return (_a3 = inputElementRef.current) == null ? void 0 : _a3.focus();
    });
  }, [currentOption, openButtonProps, renderValue, value]);
  const openButtonNode = (0, import_react47.useMemo)(() => !disabled && !readOnly && openButton ? (0, import_jsx_runtime2.jsx)(Box, {
    "aria-hidden": expanded,
    padding: openButtonBoxPadding,
    children: (0, import_jsx_runtime2.jsx)(Button, {
      "aria-label": "Open",
      disabled: expanded,
      fontSize: fontSize2,
      icon: ChevronDownIcon,
      mode: "bleed",
      padding: openButtonPadding,
      ...openButtonProps,
      onClick: handleOpenClick
    })
  }) : void 0, [disabled, expanded, fontSize2, handleOpenClick, openButton, openButtonBoxPadding, openButtonPadding, openButtonProps, readOnly]);
  const inputValue = (0, import_react47.useMemo)(() => {
    if (query === null) {
      if (value !== null) {
        return renderValue(value, currentOption);
      }
      return "";
    }
    return query;
  }, [currentOption, query, renderValue, value]);
  const input = (0, import_jsx_runtime2.jsx)(TextInput, {
    ...restProps,
    "aria-activedescendant": activeItemId,
    "aria-autocomplete": "list",
    "aria-expanded": expanded,
    "aria-owns": listBoxId,
    autoCapitalize: "off",
    autoComplete: "off",
    autoCorrect: "off",
    border: border2,
    clearButton,
    customValidity,
    disabled,
    fontSize: fontSize2,
    icon,
    iconRight: loading && AnimatedSpinnerIcon,
    id: id3,
    inputMode: "search",
    onChange: handleInputChange,
    onClear: handleClearButtonClick,
    onFocus: handleInputFocus,
    padding,
    prefix,
    radius,
    readOnly,
    ref: setRef,
    role: "combobox",
    spellCheck: false,
    suffix: suffix || openButtonNode,
    value: inputValue
  });
  const handleListBoxKeyDown = (0, import_react47.useCallback)((event) => {
    var _a3;
    if (event.key === "Tab") {
      if (listFocused)
        (_a3 = inputElementRef.current) == null ? void 0 : _a3.focus();
    }
  }, [listFocused]);
  const content = (0, import_react47.useMemo)(() => {
    if (filteredOptions.length === 0)
      return null;
    return (0, import_jsx_runtime2.jsx)(ListBox, {
      "data-ui": "AutoComplete__results",
      onKeyDown: handleListBoxKeyDown,
      padding: 1,
      ...listBox,
      tabIndex: -1,
      children: (0, import_jsx_runtime2.jsx)(Stack, {
        as: "ul",
        "aria-multiselectable": false,
        "data-ui": "AutoComplete__resultsList",
        id: listBoxId,
        ref: listBoxElementRef,
        role: "listbox",
        space: 1,
        children: filteredOptions.map((option) => {
          const active = activeValue !== null ? option.value === activeValue : currentOption === option;
          return (0, import_jsx_runtime2.jsx)(AutocompleteOption, {
            id: "".concat(id3, "-option-").concat(option.value),
            onSelect: handleOptionSelect,
            selected: active,
            value: option.value,
            children: (0, import_react47.cloneElement)(renderOption(option), {
              disabled: loading,
              selected: active,
              tabIndex: listFocused && active ? 0 : -1
            })
          }, option.value);
        })
      })
    });
  }, [activeValue, currentOption, filteredOptions, handleOptionSelect, handleListBoxKeyDown, id3, listBox, listBoxId, listFocused, loading, renderOption]);
  const results = (0, import_react47.useMemo)(() => {
    if (renderPopover) {
      return renderPopover({
        content,
        hidden: !expanded,
        inputElement: inputElementRef.current,
        onMouseEnter: handlePopoverMouseEnter,
        onMouseLeave: handlePopoverMouseLeave
      }, resultsPopoverElementRef);
    }
    if (filteredOptionsLen === 0) {
      return null;
    }
    return (0, import_jsx_runtime2.jsx)(Popover, {
      arrow: false,
      constrainSize: true,
      content,
      fallbackPlacements: AUTOCOMPLETE_POPOVER_FALLBACK_PLACEMENTS,
      matchReferenceWidth: true,
      onMouseEnter: handlePopoverMouseEnter,
      onMouseLeave: handlePopoverMouseLeave,
      open: expanded,
      overflow: "auto",
      placement: AUTOCOMPLETE_POPOVER_PLACEMENT,
      portal: true,
      radius,
      ref: resultsPopoverElementRef,
      referenceElement: inputElementRef.current,
      ...popover
    });
  }, [content, expanded, filteredOptionsLen, handlePopoverMouseEnter, handlePopoverMouseLeave, popover, radius, renderPopover]);
  return (0, import_jsx_runtime2.jsxs)(Root$9, {
    "data-ui": "Autocomplete",
    onBlur: handleRootBlur,
    onFocus: handleRootFocus,
    onKeyDown: handleRootKeyDown,
    ref: rootElementRef,
    children: [input, results]
  });
});
var __freeze$c = Object.freeze;
var __defProp$c = Object.defineProperty;
var __template$c = (cooked, raw) => __freeze$c(__defProp$c(cooked, "raw", {
  value: __freeze$c(raw || cooked.slice())
}));
var _a$c;
var _b$7;
var Root$8 = pt.ol(_a$c || (_a$c = __template$c(["\n  margin: 0;\n  padding: 0;\n  display: flex;\n  list-style: none;\n  align-items: center;\n  white-space: nowrap;\n  line-height: 0;\n"])));
var ExpandButton = pt(Button)(_b$7 || (_b$7 = __template$c(["\n  appearance: none;\n  margin: -4px;\n"])));
var Breadcrumbs = (0, import_react47.forwardRef)(function Breadcrumbs2(props, ref) {
  const {
    children,
    maxLength,
    separator,
    space: spaceRaw = 2,
    ...restProps
  } = props;
  const space = useArrayProp(spaceRaw);
  const [open, setOpen] = (0, import_react47.useState)(false);
  const [expandElement, setExpandElement] = (0, import_react47.useState)(null);
  const [popoverElement, setPopoverElement] = (0, import_react47.useState)(null);
  const collapse = (0, import_react47.useCallback)(() => setOpen(false), []);
  const expand = (0, import_react47.useCallback)(() => setOpen(true), []);
  useClickOutside(collapse, [expandElement, popoverElement]);
  const rawItems = (0, import_react47.useMemo)(() => import_react47.Children.toArray(children).filter((child) => {
    return (0, import_react47.isValidElement)(child);
  }), [children]);
  const items = (0, import_react47.useMemo)(() => {
    const len = rawItems.length;
    if (maxLength && len > maxLength) {
      const beforeLength = Math.ceil(maxLength / 2);
      const afterLength = Math.floor(maxLength / 2);
      return [...rawItems.slice(0, beforeLength - 1), (0, import_jsx_runtime2.jsx)(Popover, {
        constrainSize: true,
        content: (0, import_jsx_runtime2.jsx)(Stack, {
          as: "ol",
          overflow: "auto",
          padding: space,
          space,
          children: rawItems.slice(beforeLength - 1, len - afterLength)
        }),
        open,
        placement: "top",
        portal: true,
        ref: setPopoverElement,
        children: (0, import_jsx_runtime2.jsx)(ExpandButton, {
          fontSize: 1,
          mode: "bleed",
          onClick: open ? collapse : expand,
          padding: 1,
          ref: setExpandElement,
          selected: open,
          text: "…"
        })
      }, "button"), ...rawItems.slice(len - afterLength)];
    }
    return rawItems;
  }, [collapse, expand, maxLength, open, rawItems, space]);
  return (0, import_jsx_runtime2.jsx)(Root$8, {
    "data-ui": "Breadcrumbs",
    ...restProps,
    ref,
    children: items.map((item, itemIndex) => (0, import_jsx_runtime2.jsxs)(import_react47.Fragment, {
      children: [itemIndex > 0 && (0, import_jsx_runtime2.jsx)(Box, {
        "aria-hidden": true,
        as: "li",
        paddingX: space,
        children: separator || (0, import_jsx_runtime2.jsx)(Text, {
          muted: true,
          children: "/"
        })
      }), (0, import_jsx_runtime2.jsx)(Box, {
        as: "li",
        children: item
      })]
    }, itemIndex))
  });
});
function dialogStyle(_ref24) {
  let {
    theme
  } = _ref24;
  const color3 = theme.sanity.color.base;
  return {
    "&:not([hidden])": {
      display: "flex"
    },
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    alignItems: "center",
    justifyContent: "center",
    outline: "none",
    background: color3.shadow.umbra
  };
}
function responsiveDialogPositionStyle(props) {
  const {
    theme
  } = props;
  const {
    media
  } = theme.sanity;
  return _responsive(media, props.$position, (position) => ({
    "&&": {
      position
    }
  }));
}
var key$3 = Symbol.for("@sanity/ui/context/dialog");
globalScope[key$3] = globalScope[key$3] || (0, import_react47.createContext)({
  version: 0
});
var DialogContext = globalScope[key$3];
function useDialog() {
  return (0, import_react47.useContext)(DialogContext);
}
var __freeze$b = Object.freeze;
var __defProp$b = Object.defineProperty;
var __template$b = (cooked, raw) => __freeze$b(__defProp$b(cooked, "raw", {
  value: __freeze$b(raw || cooked.slice())
}));
var _a$b;
var _b$6;
var _c$2;
var _d$1;
var _e;
var _f;
function isTargetWithinScope(boundaryElement, portalElement, target) {
  if (!boundaryElement || !portalElement)
    return true;
  return containsOrEqualsElement(boundaryElement, target) || containsOrEqualsElement(portalElement, target);
}
var Root$7 = pt(Layer)(responsivePaddingStyle, dialogStyle, responsiveDialogPositionStyle);
var DialogContainer = pt(Container)(_a$b || (_a$b = __template$b(["\n  &:not([hidden]) {\n    display: flex;\n  }\n  width: 100%;\n  height: 100%;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n"])));
var DialogCardRoot = pt(Card)(_b$6 || (_b$6 = __template$b(["\n  &:not([hidden]) {\n    display: flex;\n  }\n  width: 100%;\n  min-height: 0;\n  max-height: 100%;\n  overflow: hidden;\n  overflow: clip;\n"])));
var DialogLayout = pt(Flex)(_c$2 || (_c$2 = __template$b(["\n  flex: 1;\n  min-height: 0;\n  width: 100%;\n"])));
var DialogHeader = pt(Card)(_d$1 || (_d$1 = __template$b(["\n  position: relative;\n  z-index: 2;\n\n  &:after {\n    content: '';\n    display: block;\n    position: absolute;\n    left: 0;\n    right: 0;\n    bottom: -1px;\n    border-bottom: 1px solid var(--card-hairline-soft-color);\n  }\n"])));
var DialogContent = pt(Box)(_e || (_e = __template$b(["\n  position: relative;\n  z-index: 1;\n  overflow: auto;\n  outline: none;\n"])));
var DialogFooter = pt(Box)(_f || (_f = __template$b(["\n  position: relative;\n  z-index: 3;\n  border-top: 1px solid var(--card-hairline-soft-color);\n"])));
var DialogCard = (0, import_react47.forwardRef)(function DialogCard2(props, ref) {
  var _a22;
  const {
    __unstable_autoFocus: autoFocus,
    __unstable_hideCloseButton: hideCloseButton,
    children,
    contentRef,
    footer,
    header,
    id: id3,
    onClickOutside,
    onClose,
    portal: portalProp,
    radius: radiusProp,
    scheme,
    shadow: shadowProp,
    width: widthProp
  } = props;
  const portal = usePortal();
  const portalElement = portalProp ? ((_a22 = portal.elements) == null ? void 0 : _a22[portalProp]) || null : portal.element;
  const boundaryElement = useBoundaryElement().element;
  const radius = useArrayProp(radiusProp);
  const shadow = useArrayProp(shadowProp);
  const width = useArrayProp(widthProp);
  const forwardedRef = useForwardedRef(ref);
  const [rootElement, setRootElement] = (0, import_react47.useState)(null);
  const localContentRef = (0, import_react47.useRef)(null);
  const layer = useLayer();
  const {
    isTopLayer
  } = layer;
  const labelId = "".concat(id3, "_label");
  const showCloseButton = Boolean(onClose) && hideCloseButton === false;
  const showHeader = Boolean(header) || showCloseButton;
  (0, import_react47.useEffect)(() => {
    if (!autoFocus)
      return;
    if (forwardedRef.current) {
      focusFirstDescendant(forwardedRef.current);
    }
  }, [autoFocus, forwardedRef]);
  useGlobalKeyDown((0, import_react47.useCallback)((event) => {
    if (!isTopLayer || !onClose)
      return;
    const target = document.activeElement;
    if (target && !isTargetWithinScope(boundaryElement, portalElement, target)) {
      return;
    }
    if (event.key === "Escape") {
      event.preventDefault();
      event.stopPropagation();
      onClose();
    }
  }, [boundaryElement, isTopLayer, onClose, portalElement]));
  useClickOutside((0, import_react47.useCallback)((event) => {
    if (!isTopLayer || !onClickOutside)
      return;
    const target = event.target;
    if (target && !isTargetWithinScope(boundaryElement, portalElement, target)) {
      return;
    }
    onClickOutside();
  }, [boundaryElement, isTopLayer, onClickOutside, portalElement]), [rootElement]);
  const setRef = (0, import_react47.useCallback)((el) => {
    setRootElement(el);
    forwardedRef.current = el;
  }, [forwardedRef]);
  const setContentRef = (0, import_react47.useCallback)((el) => {
    localContentRef.current = el;
    if (typeof contentRef === "function")
      contentRef(el);
    else if (contentRef)
      contentRef.current = el;
  }, [contentRef]);
  return (0, import_jsx_runtime2.jsx)(DialogContainer, {
    "data-ui": "DialogCard",
    width,
    children: (0, import_jsx_runtime2.jsx)(DialogCardRoot, {
      radius,
      ref: setRef,
      scheme,
      shadow,
      children: (0, import_jsx_runtime2.jsxs)(DialogLayout, {
        direction: "column",
        children: [showHeader && (0, import_jsx_runtime2.jsx)(DialogHeader, {
          children: (0, import_jsx_runtime2.jsxs)(Flex, {
            children: [(0, import_jsx_runtime2.jsx)(Box, {
              flex: 1,
              padding: 4,
              children: header && (0, import_jsx_runtime2.jsx)(Text, {
                id: labelId,
                weight: "semibold",
                children: header
              })
            }), showCloseButton && (0, import_jsx_runtime2.jsx)(Box, {
              padding: 2,
              children: (0, import_jsx_runtime2.jsx)(Button, {
                "aria-label": "Close dialog",
                disabled: !onClose,
                icon: CloseIcon,
                mode: "bleed",
                onClick: onClose,
                padding: 3
              })
            })]
          })
        }), (0, import_jsx_runtime2.jsx)(DialogContent, {
          flex: 1,
          ref: setContentRef,
          tabIndex: -1,
          children
        }), footer && (0, import_jsx_runtime2.jsx)(DialogFooter, {
          children: footer
        })]
      })
    })
  });
});
var Dialog = (0, import_react47.forwardRef)(function Dialog2(props, ref) {
  var _a22, _b2;
  const dialog = useDialog();
  const theme = useTheme();
  const {
    __unstable_autoFocus: autoFocus = true,
    __unstable_hideCloseButton: hideCloseButton = false,
    cardRadius: cardRadiusProp = 3,
    cardShadow = 4,
    children,
    contentRef,
    footer,
    header,
    id: id3,
    onActivate,
    onClickOutside,
    onClose,
    onFocus,
    padding: paddingProp = 4,
    portal: portalProp,
    position: positionProp = dialog.position || "fixed",
    scheme,
    width: widthProp = 0,
    zOffset: zOffsetProp = dialog.zOffset || ((_a22 = theme.sanity.layer) == null ? void 0 : _a22.dialog.zOffset),
    ...restProps
  } = props;
  const portal = usePortal();
  const portalElement = portalProp ? ((_b2 = portal.elements) == null ? void 0 : _b2[portalProp]) || null : portal.element;
  const boundaryElement = useBoundaryElement().element;
  const cardRadius = useArrayProp(cardRadiusProp);
  const padding = useArrayProp(paddingProp);
  const position = useArrayProp(positionProp);
  const width = useArrayProp(widthProp);
  const zOffset = useArrayProp(zOffsetProp);
  const preDivRef = (0, import_react47.useRef)(null);
  const postDivRef = (0, import_react47.useRef)(null);
  const cardRef = (0, import_react47.useRef)(null);
  const focusedElementRef = (0, import_react47.useRef)(null);
  const handleFocus = (0, import_react47.useCallback)((event) => {
    onFocus == null ? void 0 : onFocus(event);
    const target = event.target;
    const cardElement = cardRef.current;
    if (cardElement && target === preDivRef.current) {
      focusLastDescendant(cardElement);
      return;
    }
    if (cardElement && target === postDivRef.current) {
      focusFirstDescendant(cardElement);
      return;
    }
    if (isHTMLElement(event.target)) {
      focusedElementRef.current = event.target;
    }
  }, [onFocus]);
  const labelId = "".concat(id3, "_label");
  const rootClickTimeoutRef = (0, import_react47.useRef)();
  const handleRootClick = (0, import_react47.useCallback)(() => {
    if (rootClickTimeoutRef.current) {
      clearTimeout(rootClickTimeoutRef.current);
    }
    rootClickTimeoutRef.current = setTimeout(() => {
      const activeElement = document.activeElement;
      if (activeElement && !isTargetWithinScope(boundaryElement, portalElement, activeElement)) {
        const target = focusedElementRef.current;
        if (!target || !document.body.contains(target)) {
          const cardElement = cardRef.current;
          if (cardElement)
            focusFirstDescendant(cardElement);
          return;
        }
        target.focus();
      }
    }, 0);
  }, [boundaryElement, portalElement]);
  return (0, import_jsx_runtime2.jsx)(Portal, {
    __unstable_name: portalProp,
    children: (0, import_jsx_runtime2.jsxs)(Root$7, {
      ...restProps,
      $padding: padding,
      $position: position,
      "aria-labelledby": labelId,
      "aria-modal": true,
      "data-ui": "Dialog",
      id: id3,
      onActivate,
      onClick: handleRootClick,
      onFocus: handleFocus,
      ref,
      role: "dialog",
      zOffset,
      children: [(0, import_jsx_runtime2.jsx)("div", {
        ref: preDivRef,
        tabIndex: 0
      }), (0, import_jsx_runtime2.jsx)(DialogCard, {
        __unstable_autoFocus: autoFocus,
        __unstable_hideCloseButton: hideCloseButton,
        contentRef,
        footer,
        header,
        id: id3,
        onClickOutside,
        onClose,
        portal: portalProp,
        radius: cardRadius,
        ref: cardRef,
        scheme,
        shadow: cardShadow,
        width,
        children
      }), (0, import_jsx_runtime2.jsx)("div", {
        ref: postDivRef,
        tabIndex: 0
      })]
    })
  });
});
var __freeze$a = Object.freeze;
var __defProp$a = Object.defineProperty;
var __template$a = (cooked, raw) => __freeze$a(__defProp$a(cooked, "raw", {
  value: __freeze$a(raw || cooked.slice())
}));
var _a$a;
var _b$5;
var Root$6 = pt.kbd(_a$a || (_a$a = __template$a(["\n  &:not([hidden]) {\n    display: block;\n  }\n  font: inherit;\n"])));
var Key = pt(KBD)(_b$5 || (_b$5 = __template$a(["\n  &:not([hidden]) {\n    display: block;\n  }\n"])));
var Hotkeys = (0, import_react47.forwardRef)(function Hotkeys2(props, ref) {
  const {
    fontSize: fontSize2,
    keys,
    padding,
    radius,
    space: spaceProp = 1,
    ...restProps
  } = props;
  const space = useArrayProp(spaceProp);
  if (!keys || keys.length === 0) {
    return (0, import_jsx_runtime2.jsx)(import_jsx_runtime2.Fragment, {});
  }
  return (0, import_jsx_runtime2.jsx)(Root$6, {
    "data-ui": "Hotkeys",
    ...restProps,
    ref,
    children: (0, import_jsx_runtime2.jsx)(Inline, {
      as: "span",
      space,
      children: keys.map((key2, i) => (0, import_jsx_runtime2.jsx)(Key, {
        fontSize: fontSize2,
        padding,
        radius,
        children: key2
      }, i))
    })
  });
});
var key$2 = Symbol.for("@sanity/ui/context/menu");
globalScope[key$2] = globalScope[key$2] || (0, import_react47.createContext)(null);
var MenuContext = globalScope[key$2];
function _isFocusable(element) {
  return isHTMLAnchorElement(element) && element.getAttribute("data-disabled") !== "true" || isHTMLButtonElement(element) && !element.disabled;
}
function _getFocusableElements(elements) {
  return elements.filter(_isFocusable);
}
function _getDOMPath(rootElement, el) {
  const path = [];
  let e = el;
  while (e !== rootElement) {
    const parentElement = e.parentElement;
    if (!parentElement)
      return path;
    const children = Array.from(parentElement.childNodes);
    const index2 = children.indexOf(e);
    path.unshift(index2);
    if (parentElement === rootElement) {
      return path;
    }
    e = parentElement;
  }
  return path;
}
var EMPTY_PATH = [];
function _sortElements(rootElement, elements) {
  if (!rootElement)
    return;
  const map = /* @__PURE__ */ new WeakMap();
  for (const el of elements) {
    map.set(el, _getDOMPath(rootElement, el));
  }
  const _sort = (a, b) => {
    const _a3 = map.get(a) || EMPTY_PATH;
    const _b2 = map.get(b) || EMPTY_PATH;
    const len = Math.max(_a3.length, _b2.length);
    for (let i = 0; i < len; i += 1) {
      const aIndex = _a3[i] || -1;
      const bIndex = _b2[i] || -1;
      if (aIndex !== bIndex) {
        return aIndex - bIndex;
      }
    }
    return 0;
  };
  elements.sort(_sort);
}
function useMenuController(props) {
  const {
    onKeyDown,
    originElement,
    shouldFocus
  } = props;
  const elementsRef = (0, import_react47.useRef)([]);
  const [rootElement, setRootElement] = (0, import_react47.useState)(null);
  const [activeIndex, _setActiveIndex] = (0, import_react47.useState)(-1);
  const activeIndexRef = (0, import_react47.useRef)(activeIndex);
  const activeElement = elementsRef.current[activeIndex] || null;
  const mounted = Boolean(rootElement);
  const setActiveIndex = (0, import_react47.useCallback)((nextActiveIndex) => {
    _setActiveIndex(nextActiveIndex);
    activeIndexRef.current = nextActiveIndex;
  }, []);
  const mount = (0, import_react47.useCallback)((element, selected) => {
    if (!element)
      return () => void 0;
    if (elementsRef.current.indexOf(element) === -1) {
      elementsRef.current.push(element);
      _sortElements(rootElement, elementsRef.current);
    }
    if (selected) {
      const selectedIndex = elementsRef.current.indexOf(element);
      setActiveIndex(selectedIndex);
    }
    return () => {
      const idx = elementsRef.current.indexOf(element);
      if (idx > -1) {
        elementsRef.current.splice(idx, 1);
      }
    };
  }, [rootElement, setActiveIndex]);
  const handleKeyDown = (0, import_react47.useCallback)((event) => {
    if (event.key === "Tab") {
      if (originElement) {
        originElement.focus();
      }
      return;
    }
    if (event.key === "Home") {
      event.preventDefault();
      event.stopPropagation();
      const focusableElements = _getFocusableElements(elementsRef.current);
      const el = focusableElements[0];
      if (!el)
        return;
      const currentIndex = elementsRef.current.indexOf(el);
      setActiveIndex(currentIndex);
      return;
    }
    if (event.key === "End") {
      event.preventDefault();
      event.stopPropagation();
      const focusableElements = _getFocusableElements(elementsRef.current);
      const el = focusableElements[focusableElements.length - 1];
      if (!el)
        return;
      const currentIndex = elementsRef.current.indexOf(el);
      setActiveIndex(currentIndex);
      return;
    }
    if (event.key === "ArrowUp") {
      event.preventDefault();
      event.stopPropagation();
      const focusableElements = _getFocusableElements(elementsRef.current);
      const focusableLen = focusableElements.length;
      if (focusableLen === 0)
        return;
      const focusedElement = elementsRef.current[activeIndexRef.current];
      let focusedIndex = focusableElements.indexOf(focusedElement);
      focusedIndex = (focusedIndex - 1 + focusableLen) % focusableLen;
      const el = focusableElements[focusedIndex];
      const currentIndex = elementsRef.current.indexOf(el);
      setActiveIndex(currentIndex);
      return;
    }
    if (event.key === "ArrowDown") {
      event.preventDefault();
      event.stopPropagation();
      const focusableElements = _getFocusableElements(elementsRef.current);
      const focusableLen = focusableElements.length;
      if (focusableLen === 0)
        return;
      const focusedElement = elementsRef.current[activeIndexRef.current];
      let focusedIndex = focusableElements.indexOf(focusedElement);
      focusedIndex = (focusedIndex + 1) % focusableLen;
      const el = focusableElements[focusedIndex];
      const currentIndex = elementsRef.current.indexOf(el);
      setActiveIndex(currentIndex);
      return;
    }
    if (onKeyDown) {
      onKeyDown(event);
    }
  }, [onKeyDown, originElement, setActiveIndex]);
  const handleItemMouseEnter = (0, import_react47.useCallback)((event) => {
    const element = event.currentTarget;
    const currentIndex = elementsRef.current.indexOf(element);
    setActiveIndex(currentIndex);
  }, [setActiveIndex]);
  const handleItemMouseLeave = (0, import_react47.useCallback)(() => {
    setActiveIndex(-2);
    rootElement == null ? void 0 : rootElement.focus();
  }, [setActiveIndex, rootElement]);
  (0, import_react47.useEffect)(() => {
    if (!mounted)
      return;
    const rafId = window.requestAnimationFrame(() => {
      const _activeIndex = activeIndexRef.current;
      if (_activeIndex === -1) {
        if (shouldFocus === "first") {
          const focusableElements = _getFocusableElements(elementsRef.current);
          const el = focusableElements[0];
          if (el) {
            const currentIndex = elementsRef.current.indexOf(el);
            setActiveIndex(currentIndex);
            activeIndexRef.current = currentIndex;
          }
        }
        if (shouldFocus === "last") {
          const focusableElements = _getFocusableElements(elementsRef.current);
          const el = focusableElements[focusableElements.length - 1];
          if (el) {
            const currentIndex = elementsRef.current.indexOf(el);
            setActiveIndex(currentIndex);
            activeIndexRef.current = currentIndex;
          }
        }
        return;
      }
      const element = elementsRef.current[_activeIndex] || null;
      element == null ? void 0 : element.focus();
    });
    return () => {
      window.cancelAnimationFrame(rafId);
    };
  }, [activeIndex, mounted, setActiveIndex, shouldFocus]);
  return {
    activeElement,
    activeIndex,
    handleItemMouseEnter,
    handleItemMouseLeave,
    handleKeyDown,
    mount,
    rootElement,
    setRootElement
  };
}
var __freeze$9 = Object.freeze;
var __defProp$9 = Object.defineProperty;
var __template$9 = (cooked, raw) => __freeze$9(__defProp$9(cooked, "raw", {
  value: __freeze$9(raw || cooked.slice())
}));
var _a$9;
var Root$5 = pt(Box)(_a$9 || (_a$9 = __template$9(["\n  outline: none;\n  overflow: auto;\n"])));
var Menu = (0, import_react47.forwardRef)(function Menu2(props, ref) {
  const {
    children,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    focusFirst,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    focusLast,
    onClickOutside,
    onEscape,
    onItemClick,
    onItemSelect,
    onKeyDown,
    originElement,
    padding = 1,
    registerElement,
    shouldFocus = props.focusFirst && "first" || props.focusLast && "last" || null,
    space = 1,
    ...restProps
  } = props;
  const forwardedRef = useForwardedRef(ref);
  const {
    isTopLayer
  } = useLayer();
  const {
    activeElement,
    activeIndex,
    handleItemMouseEnter,
    handleItemMouseLeave,
    handleKeyDown,
    mount,
    rootElement,
    setRootElement
  } = useMenuController({
    onKeyDown,
    originElement,
    shouldFocus
  });
  const handleRefChange = (0, import_react47.useCallback)((el) => {
    setRootElement(el);
    forwardedRef.current = el;
  }, [forwardedRef, setRootElement]);
  (0, import_react47.useEffect)(() => {
    if (onItemSelect)
      onItemSelect(activeIndex);
  }, [activeIndex, onItemSelect]);
  useClickOutside((0, import_react47.useCallback)((event) => isTopLayer && onClickOutside && onClickOutside(event), [isTopLayer, onClickOutside]), [rootElement]);
  useGlobalKeyDown((0, import_react47.useCallback)((event) => {
    if (!isTopLayer)
      return;
    if (event.key === "Escape") {
      event.stopPropagation();
      if (onEscape)
        onEscape();
    }
  }, [isTopLayer, onEscape]));
  (0, import_react47.useEffect)(() => {
    if (!rootElement || !registerElement)
      return;
    return registerElement(rootElement);
  }, [registerElement, rootElement]);
  const value = (0, import_react47.useMemo)(() => ({
    version: 0,
    activeElement,
    activeIndex,
    mount,
    onClickOutside,
    onEscape,
    onItemClick,
    onItemMouseEnter: handleItemMouseEnter,
    onItemMouseLeave: handleItemMouseLeave,
    registerElement,
    // deprecated
    onMouseEnter: handleItemMouseEnter,
    onMouseLeave: handleItemMouseLeave
  }), [activeElement, activeIndex, mount, handleItemMouseEnter, handleItemMouseLeave, onClickOutside, onEscape, onItemClick, registerElement]);
  return (0, import_jsx_runtime2.jsx)(MenuContext.Provider, {
    value,
    children: (0, import_jsx_runtime2.jsx)(Root$5, {
      "data-ui": "Menu",
      ...restProps,
      onKeyDown: handleKeyDown,
      padding,
      ref: handleRefChange,
      role: "menu",
      tabIndex: -1,
      children: (0, import_jsx_runtime2.jsx)(Stack, {
        space,
        children
      })
    })
  });
});
var MenuButton = (0, import_react47.forwardRef)(function MenuButton2(props, ref) {
  const {
    __unstable_disableRestoreFocusOnClose: disableRestoreFocusOnClose = false,
    boundaryElement: deprecated_boundaryElement,
    button: buttonProp,
    id: id3,
    menu: menuProp,
    onClose,
    onOpen,
    placement: deprecated_placement,
    popoverScheme: deprecated_popoverScheme,
    portal: deprecated_portal = true,
    popover,
    popoverRadius: deprecated_popoverRadius,
    preventOverflow: deprecated_preventOverflow
  } = props;
  const [open, setOpen] = (0, import_react47.useState)(false);
  const [shouldFocus, setShouldFocus] = (0, import_react47.useState)(null);
  const [buttonElement, setButtonElement] = (0, import_react47.useState)(null);
  const [menuElements, setChildMenuElements] = (0, import_react47.useState)([]);
  const openRef = (0, import_react47.useRef)(open);
  (0, import_react47.useEffect)(() => {
    if (onOpen && open && !openRef.current) {
      onOpen();
    }
  }, [onOpen, open]);
  (0, import_react47.useEffect)(() => {
    if (onClose && !open && openRef.current) {
      onClose();
    }
  }, [onClose, open]);
  (0, import_react47.useEffect)(() => {
    openRef.current = open;
  }, [open]);
  const handleButtonClick = (0, import_react47.useCallback)(() => {
    setOpen((v) => !v);
    setShouldFocus(null);
  }, []);
  const handleButtonKeyDown = (0, import_react47.useCallback)((event) => {
    if (event.key === "ArrowDown" || event.key === "Enter" || event.key === " ") {
      event.preventDefault();
      setOpen(true);
      setShouldFocus("first");
      return;
    }
    if (event.key === "ArrowUp") {
      event.preventDefault();
      setOpen(true);
      setShouldFocus("last");
      return;
    }
  }, []);
  const handleMenuClickOutside = (0, import_react47.useCallback)((event) => {
    const target = event.target;
    if (!(target instanceof Node)) {
      return;
    }
    if (buttonElement && (target === buttonElement || buttonElement.contains(target))) {
      return;
    }
    for (const el of menuElements) {
      if (target === el || el.contains(target)) {
        return;
      }
    }
    setOpen(false);
  }, [buttonElement, menuElements]);
  const handleMenuEscape = (0, import_react47.useCallback)(() => {
    setOpen(false);
    if (disableRestoreFocusOnClose)
      return;
    if (buttonElement)
      buttonElement.focus();
  }, [buttonElement, disableRestoreFocusOnClose]);
  const handleBlur = (0, import_react47.useCallback)((event) => {
    const target = event.relatedTarget;
    if (!(target instanceof Node)) {
      return;
    }
    for (const el of menuElements) {
      if (el === target || el.contains(target)) {
        return;
      }
    }
    setOpen(false);
  }, [menuElements]);
  const handleItemClick = (0, import_react47.useCallback)(() => {
    setOpen(false);
    if (disableRestoreFocusOnClose)
      return;
    if (buttonElement)
      buttonElement.focus();
  }, [buttonElement, disableRestoreFocusOnClose]);
  const registerElement = (0, import_react47.useCallback)((el) => {
    setChildMenuElements((els) => els.concat([el]));
    return () => {
      setChildMenuElements((els) => {
        return els.filter((_el) => _el !== el);
      });
    };
  }, []);
  const menuProps = (0, import_react47.useMemo)(() => ({
    "aria-labelledby": id3,
    onBlurCapture: handleBlur,
    onClickOutside: handleMenuClickOutside,
    onEscape: handleMenuEscape,
    onItemClick: handleItemClick,
    originElement: buttonElement,
    registerElement,
    shouldFocus
  }), [buttonElement, handleMenuClickOutside, handleMenuEscape, handleItemClick, id3, handleBlur, registerElement, shouldFocus]);
  const menu = (0, import_react_is.isElement)(menuProp) ? (0, import_react47.cloneElement)(menuProp, menuProps) : null;
  const setButtonRef = (0, import_react47.useCallback)((el) => {
    if (typeof ref === "function") {
      ref(el);
    } else if (ref) {
      ref.current = el;
    }
    setButtonElement(el);
  }, [ref]);
  const button = (0, import_react47.useMemo)(() => (0, import_react_is.isElement)(buttonProp) ? (0, import_react47.cloneElement)(buttonProp, {
    "data-ui": "MenuButton",
    id: id3,
    onClick: handleButtonClick,
    onKeyDown: handleButtonKeyDown,
    "aria-haspopup": true,
    "aria-expanded": open,
    ref: setButtonRef,
    selected: open
  }) : null, [buttonProp, handleButtonClick, handleButtonKeyDown, id3, open, setButtonRef]);
  const popoverProps = (0, import_react47.useMemo)(() => ({
    boundaryElement: deprecated_boundaryElement,
    overflow: "auto",
    placement: deprecated_placement,
    portal: deprecated_portal,
    preventOverflow: deprecated_preventOverflow,
    radius: deprecated_popoverRadius,
    scheme: deprecated_popoverScheme,
    ...popover || {}
  }), [deprecated_boundaryElement, deprecated_placement, deprecated_popoverRadius, deprecated_popoverScheme, deprecated_portal, deprecated_preventOverflow, popover]);
  return (0, import_jsx_runtime2.jsx)(Popover, {
    "data-ui": "MenuButton__popover",
    ...popoverProps,
    content: menu,
    open,
    children: button || (0, import_jsx_runtime2.jsx)(import_jsx_runtime2.Fragment, {})
  });
});
var __freeze$8 = Object.freeze;
var __defProp$8 = Object.defineProperty;
var __template$8 = (cooked, raw) => __freeze$8(__defProp$8(cooked, "raw", {
  value: __freeze$8(raw || cooked.slice())
}));
var _a$8;
var MenuDivider = pt.hr(_a$8 || (_a$8 = __template$8(["\n  height: 1px;\n  border: 0;\n  background: var(--card-hairline-soft-color);\n  margin: 0;\n"])));
var __freeze$7 = Object.freeze;
var __defProp$7 = Object.defineProperty;
var __template$7 = (cooked, raw) => __freeze$7(__defProp$7(cooked, "raw", {
  value: __freeze$7(raw || cooked.slice())
}));
var _a$7;
var _b$4;
function selectableBaseStyle() {
  return ct(_a$7 || (_a$7 = __template$7(["\n    background-color: inherit;\n    color: inherit;\n\n    &[data-as='button'] {\n      -webkit-font-smoothing: inherit;\n      appearance: none;\n      outline: none;\n      font: inherit;\n      text-align: inherit;\n      border: 0;\n      width: -webkit-fill-available;\n      width: stretch;\n    }\n\n    /* &:is(a) */\n    &[data-as='a'] {\n      text-decoration: none;\n    }\n  "])));
}
function selectableColorStyle(props) {
  var _a22, _b2;
  const {
    $tone,
    theme
  } = props;
  const {
    base,
    muted,
    selectable
  } = theme.sanity.color;
  const tone = selectable ? selectable[$tone] || selectable.default : muted[$tone] || muted.default;
  return ct(_b$4 || (_b$4 = __template$7(["\n    ", "\n\n    background-color: var(--card-bg-color);\n    color: var(--card-fg-color);\n    outline: none;\n\n    /* &:is(button) */\n    &[data-as='button'] {\n      &:disabled {\n        ", "\n      }\n\n      &:not(:disabled) {\n        &[aria-pressed='true'] {\n          ", "\n        }\n\n        &[data-selected],\n        &[aria-selected='true'] > & {\n          ", "\n        }\n\n        @media (hover: hover) {\n          &:not([data-selected]) {\n            &[data-hovered],\n            &:hover {\n              ", "\n            }\n\n            &:active {\n              ", "\n            }\n          }\n        }\n      }\n    }\n\n    /* &:is(a) */\n    &[data-as='a'] {\n      &[data-disabled] {\n        ", "\n      }\n\n      &:not([data-disabled]) {\n        &[data-pressed] {\n          ", "\n        }\n\n        &[data-selected] {\n          ", "\n        }\n\n        @media (hover: hover) {\n          &:not([data-selected]) {\n            &[data-hovered],\n            &:hover {\n              ", "\n            }\n\n            &:active {\n              ", "\n            }\n          }\n        }\n      }\n    }\n\n    ", "\n  "])), _colorVarsStyle(base, tone.enabled), _colorVarsStyle(base, tone.disabled), _colorVarsStyle(base, tone.pressed), _colorVarsStyle(base, tone.selected), _colorVarsStyle(base, tone.hovered), _colorVarsStyle(base, tone.pressed), _colorVarsStyle(base, tone.disabled), _colorVarsStyle(base, tone.pressed), _colorVarsStyle(base, tone.selected), _colorVarsStyle(base, tone.hovered), _colorVarsStyle(base, tone.pressed), (_b2 = (_a22 = theme.sanity.styles) == null ? void 0 : _a22.card) == null ? void 0 : _b2.root);
}
var Selectable = pt(Box)(responsiveRadiusStyle, selectableBaseStyle, selectableColorStyle);
function useMenu() {
  const value = (0, import_react47.useContext)(MenuContext);
  if (!value) {
    throw new Error("useMenu(): missing context value");
  }
  if (!isRecord(value) || value.version !== 0) {
    throw new Error("useMenu(): the context value is not compatible");
  }
  return value;
}
var MenuItem = (0, import_react47.forwardRef)(function MenuItem2(props, forwardedRef) {
  const {
    as = "button",
    children,
    disabled,
    fontSize: fontSize2 = 2,
    hotkeys,
    icon,
    iconRight,
    onClick,
    padding = 3,
    paddingX,
    paddingY,
    paddingTop,
    paddingRight,
    paddingBottom,
    paddingLeft,
    pressed,
    radius = 2,
    selected: selectedProp,
    space = 3,
    text,
    tone = "default",
    ...restProps
  } = props;
  const menu = useMenu();
  const {
    activeElement,
    mount,
    onItemClick,
    onItemMouseEnter = menu.onMouseEnter,
    onItemMouseLeave = menu.onMouseLeave
  } = menu;
  const [rootElement, setRootElement] = (0, import_react47.useState)(null);
  const active = Boolean(activeElement) && activeElement === rootElement;
  (0, import_react47.useEffect)(() => mount(rootElement, selectedProp), [mount, rootElement, selectedProp]);
  const ref = useForwardedRef(forwardedRef);
  const handleClick = (0, import_react47.useCallback)((event) => {
    if (disabled)
      return;
    if (onClick)
      onClick(event);
    if (onItemClick)
      onItemClick();
  }, [disabled, onClick, onItemClick]);
  const paddingProps = (0, import_react47.useMemo)(() => ({
    padding,
    paddingX,
    paddingY,
    paddingTop,
    paddingRight,
    paddingBottom,
    paddingLeft
  }), [padding, paddingX, paddingY, paddingTop, paddingRight, paddingBottom, paddingLeft]);
  const setRef = (0, import_react47.useCallback)((el) => {
    ref.current = el;
    setRootElement(el);
  }, [ref]);
  return (0, import_jsx_runtime2.jsxs)(Selectable, {
    "data-ui": "MenuItem",
    ...restProps,
    "aria-pressed": as === "button" && pressed,
    "data-pressed": as !== "button" && pressed ? "" : void 0,
    "data-selected": active ? "" : void 0,
    "data-disabled": disabled ? "" : void 0,
    forwardedAs: as,
    $radius: useArrayProp(radius),
    $padding: useArrayProp(0),
    $tone: tone,
    disabled,
    onClick: handleClick,
    onMouseEnter: onItemMouseEnter,
    onMouseLeave: onItemMouseLeave,
    ref: setRef,
    role: "menuitem",
    tabIndex: -1,
    type: as === "button" ? "button" : void 0,
    children: [(icon || text || iconRight) && (0, import_jsx_runtime2.jsx)(Box, {
      as: "span",
      ...paddingProps,
      children: (0, import_jsx_runtime2.jsxs)(Flex, {
        as: "span",
        children: [icon && (0, import_jsx_runtime2.jsxs)(Text, {
          size: fontSize2,
          children: [(0, import_react47.isValidElement)(icon) && icon, (0, import_react_is.isValidElementType)(icon) && (0, import_react47.createElement)(icon)]
        }), text && (0, import_jsx_runtime2.jsx)(Box, {
          flex: 1,
          marginLeft: icon ? space : void 0,
          marginRight: iconRight ? space : void 0,
          children: (0, import_jsx_runtime2.jsx)(Text, {
            size: fontSize2,
            textOverflow: "ellipsis",
            children: text
          })
        }), hotkeys && (0, import_jsx_runtime2.jsx)(Box, {
          marginLeft: space,
          style: {
            marginTop: -4,
            marginBottom: -4
          },
          children: (0, import_jsx_runtime2.jsx)(Hotkeys, {
            fontSize: fontSize2,
            keys: hotkeys
          })
        }), iconRight && (0, import_jsx_runtime2.jsxs)(Text, {
          size: fontSize2,
          children: [(0, import_react47.isValidElement)(iconRight) && iconRight, (0, import_react_is.isValidElementType)(iconRight) && (0, import_react47.createElement)(iconRight)]
        })]
      })
    }), children && (0, import_jsx_runtime2.jsx)(Box, {
      as: "span",
      ...paddingProps,
      children
    })]
  });
});
var __freeze$6 = Object.freeze;
var __defProp$6 = Object.defineProperty;
var __template$6 = (cooked, raw) => __freeze$6(__defProp$6(cooked, "raw", {
  value: __freeze$6(raw || cooked.slice())
}));
var _a$6;
var _b$3;
var _c$1;
var _d;
var keyframe = ft(_a$6 || (_a$6 = __template$6(["\n  0% {\n    background-position: 100%;\n  }\n  100% {\n    background-position: -100%;\n  }\n"])));
var animation = ct(_b$3 || (_b$3 = __template$6(["\n  background-image: linear-gradient(\n    to right,\n    var(--card-skeleton-color-from),\n    var(--card-skeleton-color-to),\n    var(--card-skeleton-color-from),\n    var(--card-skeleton-color-from),\n    var(--card-skeleton-color-from)\n  );\n  background-position: 100%;\n  background-size: 200% 100%;\n  background-attachment: fixed;\n  animation-name: ", ";\n  animation-timing-function: ease-in-out;\n  animation-iteration-count: infinite;\n  animation-duration: 2000ms;\n"])), keyframe);
var skeletonStyle = ct(_d || (_d = __template$6(["\n  opacity: ", ";\n  transition: opacity 200ms ease-in;\n\n  @media screen and (prefers-reduced-motion: no-preference) {\n    ", "\n  }\n\n  @media screen and (prefers-reduced-motion: reduce) {\n    background-color: var(--card-skeleton-color-from);\n  }\n"])), (_ref25) => {
  let {
    $visible
  } = _ref25;
  return $visible ? 1 : 0;
}, (_ref26) => {
  let {
    $animated
  } = _ref26;
  return $animated ? animation : ct(_c$1 || (_c$1 = __template$6(["\n            background-color: var(--card-skeleton-color-from);\n          "])));
});
var Root$4 = pt(Box)(responsiveRadiusStyle, skeletonStyle);
var Skeleton = (0, import_react47.forwardRef)(function Skeleton2(props, ref) {
  const {
    animated = false,
    delay: delay2,
    radius,
    ...restProps
  } = props;
  const [visible, setVisible] = (0, import_react47.useState)(delay2 ? false : true);
  (0, import_react47.useEffect)(() => {
    if (!delay2) {
      return setVisible(true);
    }
    const timeout = setTimeout(() => {
      setVisible(true);
    }, delay2);
    return () => {
      clearTimeout(timeout);
    };
  }, [delay2]);
  return (0, import_jsx_runtime2.jsx)(Root$4, {
    ...restProps,
    $animated: animated,
    $radius: useArrayProp(radius),
    $visible: visible,
    ref
  });
});
var Root$3 = pt(Skeleton)((_ref27) => {
  let {
    $size,
    $style,
    theme
  } = _ref27;
  const {
    media
  } = theme.sanity;
  const font = theme.sanity.fonts[$style];
  const styles = _responsive(media, $size, (sizeIndex) => {
    const fontSize2 = font.sizes[sizeIndex];
    const capHeight = fontSize2.lineHeight - fontSize2.ascenderHeight - fontSize2.descenderHeight;
    return {
      height: capHeight
    };
  });
  return styles;
});
var TextSkeleton = (0, import_react47.forwardRef)(function TextSkeleton2(props, ref) {
  const {
    size: size3 = 2,
    ...restProps
  } = props;
  const $size = useArrayProp(size3);
  return (0, import_jsx_runtime2.jsx)(Root$3, {
    ...restProps,
    $size,
    ref,
    $style: "text"
  });
});
var LabelSkeleton = (0, import_react47.forwardRef)(function TextSkeleton3(props, ref) {
  const {
    size: size3 = 2,
    ...restProps
  } = props;
  const $size = useArrayProp(size3);
  return (0, import_jsx_runtime2.jsx)(Root$3, {
    ...restProps,
    $size,
    ref,
    $style: "label"
  });
});
var HeadingSkeleton = (0, import_react47.forwardRef)(function TextSkeleton4(props, ref) {
  const {
    size: size3 = 2,
    ...restProps
  } = props;
  const $size = useArrayProp(size3);
  return (0, import_jsx_runtime2.jsx)(Root$3, {
    ...restProps,
    $size,
    ref,
    $style: "heading"
  });
});
var CodeSkeleton = (0, import_react47.forwardRef)(function TextSkeleton5(props, ref) {
  const {
    size: size3 = 2,
    ...restProps
  } = props;
  const $size = useArrayProp(size3);
  return (0, import_jsx_runtime2.jsx)(Root$3, {
    ...restProps,
    $size,
    ref,
    $style: "code"
  });
});
var __freeze$5 = Object.freeze;
var __defProp$5 = Object.defineProperty;
var __template$5 = (cooked, raw) => __freeze$5(__defProp$5(cooked, "raw", {
  value: __freeze$5(raw || cooked.slice())
}));
var _a$5;
var CustomButton = pt(Button)(_a$5 || (_a$5 = __template$5(["\n  max-width: 100%;\n"])));
var Tab = (0, import_react47.forwardRef)(function Tab2(props, forwardedRef) {
  const {
    icon,
    id: id3,
    focused,
    fontSize: fontSize2,
    label,
    onClick,
    onFocus,
    padding = 2,
    selected,
    ...restProps
  } = props;
  const elementRef = (0, import_react47.useRef)(null);
  const focusedRef = (0, import_react47.useRef)(false);
  const handleBlur = (0, import_react47.useCallback)(() => {
    focusedRef.current = false;
  }, []);
  const handleFocus = (0, import_react47.useCallback)((event) => {
    focusedRef.current = true;
    if (onFocus)
      onFocus(event);
  }, [onFocus]);
  const ref = useForwardedRef(forwardedRef);
  (0, import_react47.useEffect)(() => {
    if (focused && !focusedRef.current) {
      if (elementRef.current)
        elementRef.current.focus();
      focusedRef.current = true;
    }
  }, [focused]);
  const setRef = (el) => {
    elementRef.current = el;
    ref.current = el;
  };
  return (0, import_jsx_runtime2.jsx)(CustomButton, {
    "data-ui": "Tab",
    ...restProps,
    "aria-selected": selected ? "true" : "false",
    fontSize: fontSize2,
    icon,
    id: id3,
    mode: "bleed",
    onClick,
    onBlur: handleBlur,
    onFocus: handleFocus,
    padding,
    ref: setRef,
    role: "tab",
    selected,
    tabIndex: selected ? 0 : -1,
    text: label,
    type: "button"
  });
});
var __freeze$4 = Object.freeze;
var __defProp$4 = Object.defineProperty;
var __template$4 = (cooked, raw) => __freeze$4(__defProp$4(cooked, "raw", {
  value: __freeze$4(raw || cooked.slice())
}));
var _a$4;
function _isReactElement(node) {
  return Boolean(node);
}
var CustomInline = pt(Inline)(_a$4 || (_a$4 = __template$4(["\n  & > div {\n    display: inline-block;\n    vertical-align: middle;\n    max-width: 100%;\n    box-sizing: border-box;\n  }\n"])));
var TabList = (0, import_react47.forwardRef)(function TabList2(props, ref) {
  const {
    children: childrenProp,
    ...restProps
  } = props;
  const [focusedIndex, setFocusedIndex] = (0, import_react47.useState)(-1);
  const children = (0, import_react47.useMemo)(() => childrenProp.filter(_isReactElement), [childrenProp]);
  const tabs = children.map((child, childIndex) => (0, import_react47.cloneElement)(child, {
    focused: focusedIndex === childIndex,
    key: childIndex,
    onFocus: () => handleTabFocus(childIndex)
  }));
  const numTabs = tabs.length;
  const handleTabFocus = (0, import_react47.useCallback)((tabIdx) => {
    setFocusedIndex(tabIdx);
  }, []);
  const handleKeyDown = (0, import_react47.useCallback)((event) => {
    if (event.key === "ArrowLeft") {
      setFocusedIndex((prevIndex) => (prevIndex + numTabs - 1) % numTabs);
    }
    if (event.key === "ArrowRight") {
      setFocusedIndex((prevIndex) => (prevIndex + 1) % numTabs);
    }
  }, [numTabs]);
  return (0, import_jsx_runtime2.jsx)(CustomInline, {
    "data-ui": "TabList",
    ...restProps,
    onKeyDown: handleKeyDown,
    ref,
    role: "tablist",
    children: tabs
  });
});
var TabPanel = (0, import_react47.forwardRef)(function TabPanel2(props, ref) {
  const {
    flex,
    ...restProps
  } = props;
  return (0, import_jsx_runtime2.jsx)(Box, {
    "data-ui": "TabPanel",
    ...restProps,
    flex,
    ref,
    role: "tabpanel",
    tabIndex: props.tabIndex === void 0 ? 0 : props.tabIndex,
    children: props.children
  });
});
var __freeze$3 = Object.freeze;
var __defProp$3 = Object.defineProperty;
var __template$3 = (cooked, raw) => __freeze$3(__defProp$3(cooked, "raw", {
  value: __freeze$3(raw || cooked.slice())
}));
var _a$3;
var _b$2;
var STATUS_CARD_TONE = {
  error: "critical",
  warning: "caution",
  success: "positive",
  info: "primary"
};
var ROLES = {
  error: "alert",
  warning: "alert",
  success: "alert",
  info: "alert"
};
var Root$2 = pt(Card)(_a$3 || (_a$3 = __template$3(["\n  pointer-events: all;\n"])));
var TextBox = pt(Flex)(_b$2 || (_b$2 = __template$3(["\n  overflow-x: auto;\n"])));
function Toast(props) {
  const {
    closable,
    description,
    onClose,
    title,
    status,
    ...restProps
  } = props;
  const cardTone = status ? STATUS_CARD_TONE[status] : "default";
  const role = status ? ROLES[status] : "status";
  return (0, import_jsx_runtime2.jsx)(Root$2, {
    "data-ui": "Toast",
    role,
    ...restProps,
    marginTop: 3,
    radius: 2,
    shadow: 2,
    tone: cardTone,
    children: (0, import_jsx_runtime2.jsxs)(Flex, {
      align: "flex-start",
      children: [(0, import_jsx_runtime2.jsx)(TextBox, {
        flex: 1,
        padding: 3,
        children: (0, import_jsx_runtime2.jsxs)(Stack, {
          space: 3,
          children: [title && (0, import_jsx_runtime2.jsx)(Text, {
            weight: "semibold",
            children: title
          }), description && (0, import_jsx_runtime2.jsx)(Text, {
            muted: true,
            size: 1,
            children: description
          })]
        })
      }), closable && (0, import_jsx_runtime2.jsx)(Box, {
        padding: 1,
        children: (0, import_jsx_runtime2.jsx)(Button, {
          as: "button",
          icon: CloseIcon,
          mode: "bleed",
          padding: 2,
          onClick: onClose,
          style: {
            verticalAlign: "top"
          }
        })
      })]
    })
  });
}
function useMounted() {
  const [mounted, mount] = (0, import_react47.useReducer)(() => true, false);
  (0, import_react47.useEffect)(mount, [mount]);
  return mounted;
}
var key$1 = Symbol.for("@sanity/ui/context/toast");
globalScope[key$1] = globalScope[key$1] || (0, import_react47.createContext)(null);
var ToastContext = globalScope[key$1];
var __freeze$2 = Object.freeze;
var __defProp$2 = Object.defineProperty;
var __template$2 = (cooked, raw) => __freeze$2(__defProp$2(cooked, "raw", {
  value: __freeze$2(raw || cooked.slice())
}));
var _a$2;
var _b$1;
var Root$1 = pt(Layer)(_a$2 || (_a$2 = __template$2(["\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  pointer-events: none;\n"])));
var ToastContainer = pt.div(_b$1 || (_b$1 = __template$2(["\n  box-sizing: border-box;\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  max-width: 420px;\n  width: 100%;\n"])));
var toastId = 0;
function ToastProvider(props) {
  const {
    children,
    padding = 4,
    paddingX,
    paddingY,
    zOffset
  } = props;
  const [state, _setState] = (0, import_react47.useState)([]);
  const toastsRef = (0, import_react47.useRef)({});
  const push = (0, import_react47.useCallback)((params) => {
    const setState = (state2) => (0, import_react47.startTransition)(() => _setState(state2));
    const id3 = params.id || String(toastId++);
    const duration = params.duration || 5e3;
    const dismiss = () => {
      var _a22;
      const timeoutId = (_a22 = toastsRef.current[id3]) == null ? void 0 : _a22.timeoutId;
      setState((prevState) => {
        const idx = prevState.findIndex((t) => t.id === id3);
        if (idx > -1) {
          const toasts = prevState.slice(0);
          toasts.splice(idx, 1);
          return toasts;
        }
        return prevState;
      });
      if (timeoutId !== void 0) {
        clearTimeout(timeoutId);
        delete toastsRef.current[id3];
      }
    };
    setState((prevState) => {
      return prevState.filter((t) => t.id !== id3).concat([{
        dismiss,
        id: id3,
        params: {
          ...params,
          duration
        }
      }]);
    });
    if (toastsRef.current[id3]) {
      clearTimeout(toastsRef.current[id3].timeoutId);
      delete toastsRef.current[id3];
    }
    toastsRef.current[id3] = {
      timeoutId: setTimeout(dismiss, duration)
    };
    return id3;
  }, []);
  (0, import_react47.useEffect)(() => () => {
    for (const {
      timeoutId
    } of Object.values(toastsRef.current)) {
      clearTimeout(timeoutId);
    }
    toastsRef.current = {};
  }, []);
  const value = (0, import_react47.useMemo)(() => ({
    version: 0,
    push
  }), [push]);
  const mounted = useMounted();
  return (0, import_jsx_runtime2.jsxs)(ToastContext.Provider, {
    value,
    children: [children, mounted && (0, import_jsx_runtime2.jsx)(Root$1, {
      "data-ui": "ToastProvider",
      zOffset,
      children: (0, import_jsx_runtime2.jsx)(ToastContainer, {
        children: (0, import_jsx_runtime2.jsx)(Box, {
          padding,
          paddingX,
          paddingY,
          children: (0, import_jsx_runtime2.jsx)(AnimatePresence, {
            initial: false,
            children: state.map((_ref28) => {
              let {
                dismiss,
                id: id3,
                params
              } = _ref28;
              return (0, import_jsx_runtime2.jsx)(motion.div, {
                animate: {
                  opacity: 1,
                  y: 0,
                  scale: 1
                },
                exit: {
                  opacity: 0,
                  scale: 0.5,
                  transition: {
                    duration: 0.2
                  }
                },
                initial: {
                  opacity: 0,
                  y: 32,
                  scale: 0.25
                },
                layout: "position",
                transition: {
                  type: "spring",
                  damping: 30,
                  stiffness: 400
                },
                children: (0, import_jsx_runtime2.jsx)(Toast, {
                  closable: params.closable,
                  description: params.description,
                  onClose: dismiss,
                  status: params.status,
                  title: params.title
                })
              }, id3);
            })
          })
        })
      })
    })]
  });
}
function useToast() {
  const value = (0, import_react47.useContext)(ToastContext);
  if (!value) {
    throw new Error("useToast(): missing context value");
  }
  if (!isRecord(value) || value.version !== 0) {
    throw new Error("useToast(): the context value is not compatible");
  }
  return value;
}
function _findPrevItemElement(state, itemElements, focusedElement) {
  var _a3;
  const idx = itemElements.indexOf(focusedElement);
  const els = itemElements.slice(0, idx);
  const len = els.length;
  for (let i = len - 1; i >= 0; i -= 1) {
    const itemKey = els[i].getAttribute("data-tree-key");
    if (!itemKey) {
      continue;
    }
    const segments = itemKey.split("/");
    segments.pop();
    const p = [];
    let expanded = true;
    for (let j = 0; j < segments.length; j += 1) {
      p.push(segments[j]);
      const k = p.join("/");
      if (!((_a3 = state[k]) == null ? void 0 : _a3.expanded)) {
        expanded = false;
        break;
      }
    }
    if (expanded) {
      return els[i];
    }
  }
  return null;
}
function _findNextItemElement(state, itemElements, focusedElement) {
  var _a3;
  const idx = itemElements.indexOf(focusedElement);
  const els = itemElements.slice(idx);
  const len = itemElements.length;
  for (let i = 1; i < len; i += 1) {
    if (!els[i]) {
      continue;
    }
    const itemKey = els[i].getAttribute("data-tree-key");
    if (!itemKey) {
      continue;
    }
    const segments = itemKey.split("/");
    segments.pop();
    const p = [];
    let expanded = true;
    for (let j = 0; j < segments.length; j += 1) {
      p.push(segments[j]);
      const k = p.join("/");
      if (!((_a3 = state[k]) == null ? void 0 : _a3.expanded)) {
        expanded = false;
        break;
      }
    }
    if (expanded) {
      return els[i];
    }
  }
  return null;
}
function _focusItemElement(el) {
  if (el.getAttribute("role") === "treeitem") {
    el.focus();
  }
  if (el.getAttribute("role") === "none") {
    const firstChild = el.firstChild;
    if (firstChild && firstChild instanceof HTMLElement) {
      firstChild.focus();
    }
  }
}
var key = Symbol.for("@sanity/ui/context/tree");
globalScope[key] = globalScope[key] || (0, import_react47.createContext)(null);
var TreeContext = globalScope[key];
var Tree = (0, import_react47.memo)((0, import_react47.forwardRef)(function Tree2(props, ref) {
  const {
    children,
    space = 1,
    onFocus,
    ...restProps
  } = props;
  const forwardedRef = useForwardedRef(ref);
  const [focusedElement, setFocusedElement] = (0, import_react47.useState)(null);
  const focusedElementRef = (0, import_react47.useRef)(focusedElement);
  const path = (0, import_react47.useMemo)(() => [], []);
  const [itemElements, setItemElements] = (0, import_react47.useState)([]);
  const [state, setState] = (0, import_react47.useState)({});
  const stateRef = (0, import_react47.useRef)(state);
  (0, import_react47.useEffect)(() => {
    focusedElementRef.current = focusedElement;
  }, [focusedElement]);
  (0, import_react47.useEffect)(() => {
    stateRef.current = state;
  }, [state]);
  const registerItem = (0, import_react47.useCallback)((element, path2, expanded, selected) => {
    setState((s) => ({
      ...s,
      [path2]: {
        element,
        expanded
      }
    }));
    if (selected) {
      setFocusedElement(element);
    }
    return () => {
      setState((s) => {
        const newState = {
          ...s
        };
        delete newState[path2];
        return newState;
      });
    };
  }, []);
  const setExpanded = (0, import_react47.useCallback)((path2, expanded) => {
    setState((s) => {
      const itemState = s[path2];
      if (!itemState)
        return s;
      return {
        ...s,
        [path2]: {
          ...itemState,
          expanded
        }
      };
    });
  }, []);
  const contextValue = (0, import_react47.useMemo)(() => ({
    version: 0,
    focusedElement: focusedElement || itemElements[0] || null,
    level: 0,
    path,
    registerItem,
    setExpanded,
    setFocusedElement,
    space,
    state
  }), [focusedElement, itemElements, path, registerItem, setExpanded, space, state]);
  const handleKeyDown = (0, import_react47.useCallback)((event) => {
    var _a3;
    if (!focusedElementRef.current)
      return;
    if (event.key === "ArrowDown") {
      event.preventDefault();
      const nextEl = _findNextItemElement(stateRef.current, itemElements, focusedElementRef.current);
      if (nextEl) {
        _focusItemElement(nextEl);
        setFocusedElement(nextEl);
      }
      return;
    }
    if (event.key === "ArrowUp") {
      event.preventDefault();
      const prevEl = _findPrevItemElement(stateRef.current, itemElements, focusedElementRef.current);
      if (prevEl) {
        _focusItemElement(prevEl);
        setFocusedElement(prevEl);
      }
      return;
    }
    if (event.key === "ArrowLeft") {
      event.preventDefault();
      const itemKey = focusedElementRef.current.getAttribute("data-tree-key");
      if (!itemKey)
        return;
      const itemState = stateRef.current[itemKey];
      if (!itemState)
        return;
      if (itemState.expanded) {
        setState((s) => {
          const itemState2 = s[itemKey];
          if (!itemState2)
            return s;
          return {
            ...s,
            [itemKey]: {
              ...itemState2,
              expanded: false
            }
          };
        });
      } else {
        const itemPath = itemKey.split("/");
        itemPath.pop();
        const parentKey = itemPath.join("/");
        const parentState = parentKey && stateRef.current[parentKey];
        if (parentState) {
          parentState.element.focus();
          setFocusedElement(parentState.element);
        }
      }
      return;
    }
    if (event.key === "ArrowRight") {
      event.preventDefault();
      const focusedKey = focusedElementRef.current.getAttribute("data-tree-key");
      if (!focusedKey)
        return;
      if (!((_a3 = stateRef.current[focusedKey]) == null ? void 0 : _a3.expanded)) {
        setState((s) => {
          const itemState = s[focusedKey];
          if (!itemState)
            return s;
          return {
            ...s,
            [focusedKey]: {
              ...itemState,
              expanded: true
            }
          };
        });
      }
      return;
    }
  }, [itemElements]);
  const handleFocus = (0, import_react47.useCallback)((event) => {
    setFocusedElement(event.target);
    onFocus == null ? void 0 : onFocus(event);
  }, [onFocus]);
  (0, import_react47.useEffect)(() => {
    if (!forwardedRef.current)
      return;
    const _itemElements = Array.from(forwardedRef.current.querySelectorAll('[data-ui="TreeItem"]'));
    setItemElements(_itemElements);
  }, [children, forwardedRef]);
  return (0, import_jsx_runtime2.jsx)(TreeContext.Provider, {
    value: contextValue,
    children: (0, import_jsx_runtime2.jsx)(Stack, {
      as: "ul",
      "data-ui": "Tree",
      ...restProps,
      onFocus: handleFocus,
      onKeyDown: handleKeyDown,
      ref: forwardedRef,
      role: "tree",
      space,
      children
    })
  });
}));
Tree.displayName = "Tree";
var __freeze$1 = Object.freeze;
var __defProp$1 = Object.defineProperty;
var __template$1 = (cooked, raw) => __freeze$1(__defProp$1(cooked, "raw", {
  value: __freeze$1(raw || cooked.slice())
}));
var _a$1;
var _b;
var _c;
function treeItemRootStyle() {
  return ct(_a$1 || (_a$1 = __template$1(["\n    &[role='none'] > [role='treeitem'] {\n      outline: none;\n      cursor: default;\n      border-radius: 3px;\n\n      &:focus {\n        position: relative;\n      }\n    }\n\n    &[role='treeitem'] {\n      outline: none;\n\n      & > div {\n        cursor: default;\n        border-radius: 3px;\n      }\n\n      &:focus > div {\n        position: relative;\n      }\n    }\n  "])));
}
function treeItemRootColorStyle(props) {
  const {
    theme
  } = props;
  const $tone = "default";
  const {
    base,
    muted,
    selectable
  } = theme.sanity.color;
  const tone = selectable ? selectable[$tone] || selectable.default : muted[$tone] || muted.default;
  return ct(_b || (_b = __template$1([`
    /* <div role="none"><a data-ui="TreeItem__box" role="treeitem" tabIndex="0"></div> */
    &[role='none'] {
      & > [role='treeitem'] {
        `, "\n\n        background-color: var(--card-bg-color);\n        color: var(--treeitem-fg-color);\n      }\n\n      &[data-selected] > [role='treeitem'] {\n        ", "\n      }\n\n      @media (hover: hover) {\n        &:not([data-selected]) > [role='treeitem']:not(:focus):hover {\n          ", "\n        }\n\n        & > [role='treeitem']:focus {\n          ", `
        }
      }
    }

    /* <div role="treeitem" tabIndex="0"><div data-ui="TreeItem__box"></div> */
    &[role='treeitem'] {
      & > [data-ui='TreeItem__box'] {
        `, "\n\n        background-color: var(--card-bg-color);\n        color: var(--card-fg-color);\n      }\n\n      &[data-selected] > [data-ui='TreeItem__box'] {\n        ", "\n      }\n\n      @media (hover: hover) {\n        &:not([data-selected]):not(:focus) > [data-ui='TreeItem__box']:hover {\n          ", "\n        }\n\n        &:focus > [data-ui='TreeItem__box'] {\n          ", "\n        }\n      }\n    }\n  "])), _colorVarsStyle(base, tone.enabled), _colorVarsStyle(base, tone.pressed), _colorVarsStyle(base, tone.hovered), _colorVarsStyle(base, tone.selected), _colorVarsStyle(base, tone.enabled), _colorVarsStyle(base, tone.pressed), _colorVarsStyle(base, tone.hovered), _colorVarsStyle(base, tone.selected));
}
function treeItemBoxStyle(props) {
  const {
    $level,
    theme
  } = props;
  const {
    space
  } = theme.sanity;
  return ct(_c || (_c = __template$1(["\n    padding-left: ", ";\n\n    &[data-as='a'] {\n      text-decoration: none;\n    }\n  "])), rem(space[2] * $level));
}
function useTree() {
  const tree = (0, import_react47.useContext)(TreeContext);
  if (!tree) {
    throw new Error("Tree: missing context value");
  }
  return tree;
}
var TreeGroup = (0, import_react47.memo)(function TreeGroup2(props) {
  const {
    children,
    expanded = false,
    ...restProps
  } = props;
  const tree = useTree();
  return (0, import_jsx_runtime2.jsx)(Stack, {
    as: "ul",
    "data-ui": "TreeGroup",
    ...restProps,
    hidden: !expanded,
    marginTop: tree.space,
    role: "group",
    space: tree.space,
    children
  });
});
var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", {
  value: __freeze(raw || cooked.slice())
}));
var _a;
var Root = (0, import_react47.memo)(pt.li(treeItemRootStyle, treeItemRootColorStyle));
var TreeItemBox = pt(Box).attrs({
  forwardedAs: "a"
})(treeItemBoxStyle);
var ToggleArrowText = pt(Text)(_a || (_a = __template(["\n  & > svg {\n    transition: transform 100ms;\n  }\n"])));
var TreeItem = (0, import_react47.memo)(function TreeItem2(props) {
  const {
    children,
    expanded: expandedProp = false,
    fontSize: fontSize2,
    href,
    icon,
    id: idProp,
    linkAs,
    muted,
    onClick,
    padding = 3,
    selected = false,
    space = 2,
    text,
    weight,
    ...restProps
  } = props;
  const rootRef = (0, import_react47.useRef)(null);
  const treeitemRef = (0, import_react47.useRef)(null);
  const tree = useTree();
  const {
    path,
    registerItem,
    setExpanded,
    setFocusedElement
  } = tree;
  const _id = (0, import_react47.useId)();
  const id3 = idProp || _id;
  const itemPath = (0, import_react47.useMemo)(() => path.concat([id3 || ""]), [id3, path]);
  const itemKey = itemPath.join("/");
  const itemState = tree.state[itemKey];
  const focused = tree.focusedElement === rootRef.current;
  const expanded = (itemState == null ? void 0 : itemState.expanded) === void 0 ? expandedProp : (itemState == null ? void 0 : itemState.expanded) || false;
  const tabIndex = tree.focusedElement && tree.focusedElement === rootRef.current ? 0 : -1;
  const contextValue = (0, import_react47.useMemo)(() => ({
    ...tree,
    level: tree.level + 1,
    path: itemPath
  }), [itemPath, tree]);
  const handleClick = (0, import_react47.useCallback)((event) => {
    if (onClick)
      onClick(event);
    const target = event.target;
    if (target instanceof HTMLElement && (target.getAttribute("data-ui") === "TreeItem" || target.closest('[data-ui="TreeItem__box"]'))) {
      event.stopPropagation();
      setExpanded(itemKey, !expanded);
      setFocusedElement(rootRef.current);
    }
  }, [expanded, itemKey, onClick, setExpanded, setFocusedElement]);
  const handleKeyDown = (0, import_react47.useCallback)((event) => {
    if (focused && event.key === "Enter") {
      const el = treeitemRef.current || rootRef.current;
      el == null ? void 0 : el.click();
    }
  }, [focused]);
  (0, import_react47.useEffect)(() => {
    if (!rootRef.current)
      return;
    return registerItem(rootRef.current, itemPath.join("/"), expanded, selected);
  }, [expanded, itemPath, registerItem, selected]);
  const content = (0, import_jsx_runtime2.jsxs)(Flex, {
    padding,
    children: [(0, import_jsx_runtime2.jsxs)(Box, {
      marginRight: space,
      style: {
        visibility: icon || children ? "visible" : "hidden",
        pointerEvents: "none"
      },
      children: [icon && (0, import_jsx_runtime2.jsx)(Text, {
        muted,
        size: fontSize2,
        weight,
        children: (0, import_react47.createElement)(icon)
      }), !icon && (0, import_jsx_runtime2.jsx)(ToggleArrowText, {
        muted,
        size: fontSize2,
        weight,
        children: (0, import_jsx_runtime2.jsx)(ToggleArrowRightIcon, {
          style: {
            transform: expanded ? "rotate(90deg)" : void 0
          }
        })
      })]
    }), (0, import_jsx_runtime2.jsx)(Box, {
      flex: 1,
      children: (0, import_jsx_runtime2.jsx)(Text, {
        muted,
        size: fontSize2,
        textOverflow: "ellipsis",
        weight,
        children: text
      })
    })]
  });
  if (href) {
    return (0, import_jsx_runtime2.jsxs)(Root, {
      "data-selected": selected ? "" : void 0,
      "data-tree-id": id3,
      "data-tree-key": itemKey,
      "data-ui": "TreeItem",
      ...restProps,
      onClick: handleClick,
      ref: rootRef,
      role: "none",
      children: [(0, import_jsx_runtime2.jsx)(TreeItemBox, {
        $level: tree.level,
        "aria-expanded": expanded,
        as: linkAs,
        "data-ui": "TreeItem__box",
        href,
        ref: treeitemRef,
        role: "treeitem",
        tabIndex,
        children: content
      }), (0, import_jsx_runtime2.jsx)(TreeContext.Provider, {
        value: contextValue,
        children: children && (0, import_jsx_runtime2.jsx)(TreeGroup, {
          hidden: !expanded,
          children
        })
      })]
    });
  }
  return (0, import_jsx_runtime2.jsxs)(Root, {
    "data-selected": selected ? "" : void 0,
    "data-ui": "TreeItem",
    "data-tree-id": id3,
    "data-tree-key": itemKey,
    ...restProps,
    "aria-expanded": expanded,
    onClick: handleClick,
    onKeyDown: handleKeyDown,
    ref: rootRef,
    role: "treeitem",
    tabIndex,
    children: [(0, import_jsx_runtime2.jsx)(TreeItemBox, {
      $level: tree.level,
      as: "div",
      "data-ui": "TreeItem__box",
      children: content
    }), (0, import_jsx_runtime2.jsx)(TreeContext.Provider, {
      value: contextValue,
      children: children && (0, import_jsx_runtime2.jsx)(TreeGroup, {
        expanded,
        children
      })
    })]
  });
});

// node_modules/@portabletext/to-html/dist/pt-to-html.mjs
var _excluded = ["block", "list", "listItem", "marks", "types"];
var _excluded2 = ["listItem"];
var _excluded3 = ["_key"];
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function _defineProperty(obj, key2, value) {
  key2 = _toPropertyKey(key2);
  if (key2 in obj) {
    Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key2] = value;
  }
  return obj;
}
function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _toPrimitive(t, r) {
  if ("object" != typeof t || !t)
    return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i)
      return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key2, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key2 = sourceSymbolKeys[i];
      if (excluded.indexOf(key2) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key2))
        continue;
      target[key2] = source[key2];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key2, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key2 = sourceKeys[i];
    if (excluded.indexOf(key2) >= 0)
      continue;
    target[key2] = source[key2];
  }
  return target;
}
var defaultLists = {
  number: ({
    children
  }) => `<ol>${children}</ol>`,
  bullet: ({
    children
  }) => `<ul>${children}</ul>`
};
var DefaultListItem = ({
  children
}) => `<li>${children}</li>`;
var allowedProtocols = ["http", "https", "mailto", "tel"];
var charMap = {
  "&": "amp",
  "<": "lt",
  ">": "gt",
  '"': "quot",
  "'": "#x27"
};
function escapeHTML(str) {
  return str.replace(/[&<>"']/g, (s) => `&${charMap[s]};`);
}
function uriLooksSafe(uri) {
  const url = (uri || "").trim(), first = url.charAt(0);
  if (first === "#" || first === "/")
    return true;
  const colonIndex = url.indexOf(":");
  if (colonIndex === -1)
    return true;
  const proto = url.slice(0, colonIndex).toLowerCase();
  if (allowedProtocols.indexOf(proto) !== -1)
    return true;
  const queryIndex = url.indexOf("?");
  if (queryIndex !== -1 && colonIndex > queryIndex)
    return true;
  const hashIndex = url.indexOf("#");
  return hashIndex !== -1 && colonIndex > hashIndex;
}
var link = ({
  children,
  value
}) => {
  const href = (value == null ? void 0 : value.href) || "";
  return uriLooksSafe(href) ? `<a href="${escapeHTML(href)}">${children}</a>` : children;
};
var defaultMarks = {
  em: ({
    children
  }) => `<em>${children}</em>`,
  strong: ({
    children
  }) => `<strong>${children}</strong>`,
  code: ({
    children
  }) => `<code>${children}</code>`,
  underline: ({
    children
  }) => `<span style="text-decoration:underline">${children}</span>`,
  "strike-through": ({
    children
  }) => `<del>${children}</del>`,
  link
};
var getTemplate = (type, prop) => `Unknown ${type}, specify a component for it in the \`components.${prop}\` option`;
var unknownTypeWarning = (typeName) => getTemplate(`block type "${typeName}"`, "types");
var unknownMarkWarning = (markType) => getTemplate(`mark type "${markType}"`, "marks");
var unknownBlockStyleWarning = (blockStyle) => getTemplate(`block style "${blockStyle}"`, "block");
var unknownListStyleWarning = (listStyle) => getTemplate(`list style "${listStyle}"`, "list");
var unknownListItemStyleWarning = (listStyle) => getTemplate(`list item style "${listStyle}"`, "listItem");
function printWarning(message) {
  console.warn(message);
}
var DefaultUnknownType = ({
  value,
  isInline
}) => {
  const warning2 = unknownTypeWarning(value._type);
  return isInline ? `<span style="display:none">${warning2}</span>` : `<div style="display:none">${warning2}</div>`;
};
var DefaultUnknownMark = ({
  markType,
  children
}) => `<span class="unknown__pt__mark__${markType}">${children}</span>`;
var DefaultUnknownBlockStyle = ({
  children
}) => `<p>${children}</p>`;
var DefaultUnknownList = ({
  children
}) => `<ul>${children}</ul>`;
var DefaultUnknownListItem = ({
  children
}) => `<li>${children}</li>`;
var DefaultHardBreak = () => "<br/>";
var defaultPortableTextBlockStyles = {
  normal: ({
    children
  }) => `<p>${children}</p>`,
  blockquote: ({
    children
  }) => `<blockquote>${children}</blockquote>`,
  h1: ({
    children
  }) => `<h1>${children}</h1>`,
  h2: ({
    children
  }) => `<h2>${children}</h2>`,
  h3: ({
    children
  }) => `<h3>${children}</h3>`,
  h4: ({
    children
  }) => `<h4>${children}</h4>`,
  h5: ({
    children
  }) => `<h5>${children}</h5>`,
  h6: ({
    children
  }) => `<h6>${children}</h6>`
};
var defaultComponents = {
  types: {},
  block: defaultPortableTextBlockStyles,
  marks: defaultMarks,
  list: defaultLists,
  listItem: DefaultListItem,
  hardBreak: DefaultHardBreak,
  unknownType: DefaultUnknownType,
  unknownMark: DefaultUnknownMark,
  unknownList: DefaultUnknownList,
  unknownListItem: DefaultUnknownListItem,
  unknownBlockStyle: DefaultUnknownBlockStyle
};
function mergeComponents(parent, overrides) {
  const {
    block,
    list,
    listItem,
    marks,
    types: types2
  } = overrides, rest = _objectWithoutProperties(overrides, _excluded);
  return _objectSpread(_objectSpread({}, parent), {}, {
    block: mergeDeeply(parent, overrides, "block"),
    list: mergeDeeply(parent, overrides, "list"),
    listItem: mergeDeeply(parent, overrides, "listItem"),
    marks: mergeDeeply(parent, overrides, "marks"),
    types: mergeDeeply(parent, overrides, "types")
  }, rest);
}
function mergeDeeply(parent, overrides, key2) {
  const override = overrides[key2], parentVal = parent[key2];
  return typeof override == "function" || override && typeof parentVal == "function" ? override : override ? _objectSpread(_objectSpread({}, parentVal), override) : parentVal;
}
function toHTML(value, options = {}) {
  const {
    components: componentOverrides,
    onMissingComponent: missingComponentHandler = printWarning
  } = options, handleMissingComponent = missingComponentHandler || noop2, blocks = Array.isArray(value) ? value : [value], nested = nestLists(blocks, "html"), components = componentOverrides ? mergeComponents(defaultComponents, componentOverrides) : defaultComponents, renderNode = getNodeRenderer(components, handleMissingComponent);
  return nested.map((node, index2) => renderNode({
    node,
    index: index2,
    isInline: false,
    renderNode
  })).join("");
}
var getNodeRenderer = (components, handleMissingComponent) => {
  function renderNode(options) {
    const {
      node,
      index: index2,
      isInline
    } = options;
    return isPortableTextToolkitList(node) ? renderList(node, index2) : isPortableTextListItemBlock(node) ? renderListItem(node, index2) : isPortableTextToolkitSpan(node) ? renderSpan(node) : isPortableTextBlock(node) ? renderBlock(node, index2, isInline) : isPortableTextToolkitTextNode(node) ? renderText(node) : renderCustomBlock(node, index2, isInline);
  }
  function renderListItem(node, index2) {
    const tree = serializeBlock({
      node,
      index: index2,
      isInline: false,
      renderNode
    }), renderer = components.listItem, itemHandler = (typeof renderer == "function" ? renderer : renderer[node.listItem]) || components.unknownListItem;
    if (itemHandler === components.unknownListItem) {
      const style = node.listItem || "bullet";
      handleMissingComponent(unknownListItemStyleWarning(style), {
        type: style,
        nodeType: "listItemStyle"
      });
    }
    let children = tree.children;
    if (node.style && node.style !== "normal") {
      const {
        listItem
      } = node, blockNode = _objectWithoutProperties(node, _excluded2);
      children = renderNode({
        node: blockNode,
        index: index2,
        isInline: false,
        renderNode
      });
    }
    return itemHandler({
      value: node,
      index: index2,
      isInline: false,
      renderNode,
      children
    });
  }
  function renderList(node, index2) {
    const children = node.children.map((child, childIndex) => renderNode({
      node: child._key ? child : _objectSpread(_objectSpread({}, child), {}, {
        _key: `li-${index2}-${childIndex}`
      }),
      index: index2,
      isInline: false,
      renderNode
    })), component = components.list, list = (typeof component == "function" ? component : component[node.listItem]) || components.unknownList;
    if (list === components.unknownList) {
      const style = node.listItem || "bullet";
      handleMissingComponent(unknownListStyleWarning(style), {
        nodeType: "listStyle",
        type: style
      });
    }
    return list({
      value: node,
      index: index2,
      isInline: false,
      renderNode,
      children: children.join("")
    });
  }
  function renderSpan(node) {
    const {
      markDef,
      markType,
      markKey
    } = node, span = components.marks[markType] || components.unknownMark, children = node.children.map((child, childIndex) => renderNode({
      node: child,
      index: childIndex,
      isInline: true,
      renderNode
    }));
    return span === components.unknownMark && handleMissingComponent(unknownMarkWarning(markType), {
      nodeType: "mark",
      type: markType
    }), span({
      text: spanToPlainText(node),
      value: markDef,
      markType,
      markKey,
      renderNode,
      children: children.join("")
    });
  }
  function renderBlock(node, index2, isInline) {
    const _serializeBlock = serializeBlock({
      node,
      index: index2,
      isInline,
      renderNode
    }), {
      _key
    } = _serializeBlock, props = _objectWithoutProperties(_serializeBlock, _excluded3), style = props.node.style || "normal", block = (typeof components.block == "function" ? components.block : components.block[style]) || components.unknownBlockStyle;
    return block === components.unknownBlockStyle && handleMissingComponent(unknownBlockStyleWarning(style), {
      nodeType: "blockStyle",
      type: style
    }), block(_objectSpread(_objectSpread({}, props), {}, {
      value: props.node,
      renderNode
    }));
  }
  function renderText(node) {
    if (node.text === `
`) {
      const hardBreak = components.hardBreak;
      return hardBreak ? hardBreak() : `
`;
    }
    return escapeHTML(node.text);
  }
  function renderCustomBlock(value, index2, isInline) {
    const node = components.types[value._type];
    return node || handleMissingComponent(unknownTypeWarning(value._type), {
      nodeType: "block",
      type: value._type
    }), (node || components.unknownType)({
      value,
      isInline,
      index: index2,
      renderNode
    });
  }
  return renderNode;
};
function serializeBlock(options) {
  const {
    node,
    index: index2,
    isInline,
    renderNode
  } = options, children = buildMarksTree(node).map((child, i) => renderNode({
    node: child,
    isInline: true,
    index: i,
    renderNode
  }));
  return {
    _key: node._key || `block-${index2}`,
    children: children.join(""),
    index: index2,
    isInline,
    node
  };
}
function noop2() {
}

// node_modules/sanity-naive-html-serializer/dist/index.esm.js
var reconcileArray = (origArray, translatedArray) => {
  if (translatedArray && translatedArray.some((el) => typeof el === "string")) {
    return translatedArray;
  }
  const combined = JSON.parse(JSON.stringify(origArray));
  translatedArray.forEach((block) => {
    if (!block._key) {
      return;
    }
    const foundBlockIdx = origArray.findIndex((origBlock) => origBlock._key === block._key);
    if (foundBlockIdx < 0) {
      console.warn("This block no longer exists on the original document. Was it removed? ".concat(JSON.stringify(block)));
    } else if (origArray[foundBlockIdx]._type === "block" || origArray[foundBlockIdx]._type === "span") {
      combined[foundBlockIdx] = block;
    } else if (Array.isArray(origArray[foundBlockIdx])) {
      combined[foundBlockIdx] = reconcileArray(origArray[foundBlockIdx], block);
    } else {
      combined[foundBlockIdx] = reconcileObject(origArray[foundBlockIdx], block);
    }
  });
  return combined;
};
var reconcileObject = (origObject, translatedObject) => {
  if (typeof translatedObject !== "object" || !Object.keys(translatedObject).length) {
    return origObject;
  }
  const updatedObj = JSON.parse(JSON.stringify(origObject));
  Object.entries(translatedObject).forEach((_ref) => {
    let [key2, value] = _ref;
    var _a3, _b2;
    if (!value || key2[0] === "_") {
      return;
    }
    if (typeof value === "string") {
      updatedObj[key2] = value;
    } else if (Array.isArray(value)) {
      updatedObj[key2] = reconcileArray((_a3 = origObject[key2]) != null ? _a3 : [], value);
    } else {
      updatedObj[key2] = reconcileObject((_b2 = origObject[key2]) != null ? _b2 : {}, value);
    }
  });
  return updatedObj;
};
var fieldLevelMerge = function(translatedFields, baseDoc, localeId) {
  let baseLang = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "en";
  const merged = {};
  const metaKeys = ["_rev", "_id", "_type"];
  metaKeys.forEach((metaKey) => {
    if (translatedFields[metaKey]) {
      merged[metaKey] = translatedFields[metaKey];
    }
  });
  const originPaths = extractWithPath("..".concat(baseLang), translatedFields);
  originPaths.forEach((match) => {
    const origVal = extractWithPath(arrayToJSONMatchPath(match.path), baseDoc)[0].value;
    const translatedVal = extractWithPath(arrayToJSONMatchPath(match.path), translatedFields)[0].value;
    let valToPatch;
    if (typeof translatedVal === "string") {
      valToPatch = translatedVal;
    } else if (Array.isArray(translatedVal) && translatedVal.length) {
      valToPatch = reconcileArray(origVal != null ? origVal : [], translatedVal);
    } else if (typeof translatedVal === "object" && Object.keys(translatedVal).length) {
      valToPatch = reconcileObject(origVal != null ? origVal : {}, translatedVal);
    }
    const destinationPath = [
      ...match.path.slice(0, match.path.length - 1),
      //cut off the "en"
      localeId.replace("-", "_")
      // replace it with our locale
    ];
    merged[arrayToJSONMatchPath(destinationPath)] = valToPatch;
  });
  return merged;
};
var documentLevelMerge = (translatedFields, baseDoc) => {
  return reconcileObject(baseDoc, translatedFields);
};
var BaseDocumentMerger = {
  fieldLevelMerge,
  documentLevelMerge,
  reconcileArray,
  reconcileObject
};
var defaultSchema = Schema2.compile({
  name: "default",
  types: [{
    type: "object",
    name: "default",
    fields: [{
      name: "block",
      type: "array",
      of: [{
        type: "block"
      }]
    }]
  }]
});
var blockContentType = defaultSchema.get("default").fields.find((field) => field.name === "block").type;
var preprocess = (html) => {
  const intermediateBlocks = htmlToBlocks("<p>".concat(html, "</p>"), blockContentType);
  if (!intermediateBlocks.length) {
    throw new Error("Error parsing string '".concat(html, "'"));
  }
  return intermediateBlocks[0].children[0].text;
};
var defaultStopTypes = ["reference", "date", "datetime", "file", "geopoint", "image", "number", "crop", "hotspot", "boolean", "url", "color", "code"];
var defaultPortableTextBlockStyles2 = {
  normal: (_ref2) => {
    let {
      value,
      children
    } = _ref2;
    return '<p id="'.concat(value._key, '">').concat(children, "</p>");
  },
  blockquote: (_ref3) => {
    let {
      value,
      children
    } = _ref3;
    return '<blockquote id="'.concat(value._key, '">').concat(children, "</blockquote>");
  },
  h1: (_ref4) => {
    let {
      value,
      children
    } = _ref4;
    return '<h1 id="'.concat(value._key, '">').concat(children, "</h1>");
  },
  h2: (_ref5) => {
    let {
      value,
      children
    } = _ref5;
    return '<h2 id="'.concat(value._key, '">').concat(children, "</h2>");
  },
  h3: (_ref6) => {
    let {
      value,
      children
    } = _ref6;
    return '<h3 id="'.concat(value._key, '">').concat(children, "</h3>");
  },
  h4: (_ref7) => {
    let {
      value,
      children
    } = _ref7;
    return '<h4 id="'.concat(value._key, '">').concat(children, "</h4>");
  },
  h5: (_ref8) => {
    let {
      value,
      children
    } = _ref8;
    return '<h5 id="'.concat(value._key, '">').concat(children, "</h5>");
  },
  h6: (_ref9) => {
    let {
      value,
      children
    } = _ref9;
    return '<h6 id="'.concat(value._key, '">').concat(children, "</h6>");
  }
};
var defaultLists2 = {
  number: (_ref10) => {
    let {
      value,
      children
    } = _ref10;
    return '<ol id="'.concat(value._key.replace("-parent", ""), '">').concat(children, "</ol>");
  },
  bullet: (_ref11) => {
    let {
      value,
      children
    } = _ref11;
    return '<ul id="'.concat(value._key.replace("-parent", ""), '">').concat(children, "</ul>");
  }
};
var defaultListItem = (_ref12) => {
  let {
    value,
    children
  } = _ref12;
  const {
    _key,
    level
  } = value;
  return '<li id="'.concat((_key || "").replace("-parent", ""), '" data-level="').concat(level, '">').concat(children, "</li>");
};
var unknownBlockFunc = (_ref13) => {
  let {
    value,
    children
  } = _ref13;
  return '<p id="'.concat(value._key, '" data-type="unknown-block-style" data-style="').concat(value.style, '">').concat(children, "</p>");
};
var customSerializers = {
  unknownType: (_ref14) => {
    let {
      value
    } = _ref14;
    return '<div class="'.concat(value._type, '"></div>');
  },
  types: {},
  block: defaultPortableTextBlockStyles2,
  list: defaultLists2,
  listItem: defaultListItem,
  unknownBlockStyle: unknownBlockFunc
};
var customDeserializers = {
  types: {}
};
var customBlockDeserializers = [
  //handle undeclared styles
  {
    deserialize(el, next) {
      var _a3;
      if (!el.hasChildNodes()) {
        return void 0;
      }
      if (el.getAttribute("data-type") !== "unknown-block-style") {
        return void 0;
      }
      const style = (_a3 = el.getAttribute("data-style")) != null ? _a3 : "";
      const block = htmlToBlocks(el.outerHTML, blockContentType)[0];
      return {
        ...block,
        style,
        children: next(el.childNodes)
      };
    }
  },
  //handle list items
  {
    deserialize(el, next) {
      var _a3, _b2;
      if (!el.hasChildNodes()) {
        return void 0;
      }
      if (el.tagName.toLowerCase() !== "li") {
        return void 0;
      }
      const tagsToStyle = {
        ul: "bullet",
        ol: "number"
      };
      const parent = el.parentNode;
      if (!parent || !parent.tagName) {
        return void 0;
      }
      const listItem = tagsToStyle[parent.tagName.toLowerCase()];
      if (!listItem) {
        return void 0;
      }
      const level = el.getAttribute("data-level") && parseInt(el.getAttribute("data-level") || "0", 10);
      const _key = el.id;
      let block = htmlToBlocks(parent.outerHTML, blockContentType)[0];
      const customStyle = (_b2 = (_a3 = el.children) == null ? void 0 : _a3[0]) == null ? void 0 : _b2.getAttribute("data-style");
      const regex = new RegExp(/<("[^"]*"|'[^']*'|[^'">])*>/);
      if (regex.test(el.innerHTML)) {
        const newBlock = htmlToBlocks(el.innerHTML, blockContentType)[0];
        if (newBlock) {
          block = {
            ...block,
            ...newBlock,
            style: customStyle != null ? customStyle : newBlock.style
          };
          if (customStyle) {
            return block;
          }
        }
      }
      return {
        ...block,
        level,
        _key,
        listItem,
        children: next(el.childNodes)
      };
    }
  }
];
var META_FIELDS$1 = ["_key", "_type", "_id"];
var languageObjectFieldFilter = (obj, baseLang) => {
  const filterToLangField = (childObj) => {
    const filteredObj = {};
    filteredObj[baseLang] = childObj[baseLang];
    META_FIELDS$1.forEach((field) => {
      if (childObj[field]) {
        filteredObj[field] = childObj[field];
      }
    });
    return filteredObj;
  };
  const findBaseLang = (childObj) => {
    const filteredObj = {};
    META_FIELDS$1.forEach((field) => {
      if (childObj[field]) {
        filteredObj[field] = childObj[field];
      }
    });
    for (const key2 in childObj) {
      if (childObj.hasOwnProperty(key2)) {
        const value = childObj[key2];
        if (value.hasOwnProperty(baseLang)) {
          filteredObj[key2] = filterToLangField(value);
        } else if (Array.isArray(value) && value.length && typeof value[0] === "object") {
          const validLangObjects = value.reduce((validArr, objInArray) => {
            if (objInArray._type === "block") {
              validArr.push(objInArray);
            } else if (objInArray.hasOwnProperty(baseLang)) {
              validArr.push(filterToLangField(objInArray));
            } else {
              const filtered = findBaseLang(objInArray);
              const nonMetaFields = Object.keys(filtered).filter((objInArrayKey) => META_FIELDS$1.indexOf(objInArrayKey) === -1);
              if (nonMetaFields.length) {
                validArr.push(filtered);
              }
            }
            return validArr;
          }, []);
          if (validLangObjects.length) {
            filteredObj[key2] = validLangObjects;
          }
        } else if (typeof value === "object") {
          const nestedLangObj = findBaseLang(value);
          const nonMetaFields = Object.keys(nestedLangObj).filter((nestedObjKey) => META_FIELDS$1.indexOf(nestedObjKey) === -1);
          if (nonMetaFields.length) {
            filteredObj[key2] = nestedLangObj;
          }
        }
      }
    }
    return filteredObj;
  };
  return findBaseLang(obj);
};
var fieldFilter = (obj, objFields, stopTypes) => {
  var _a3;
  const filteredObj = {
    _type: obj._type
  };
  const fieldFilterFunc = (field) => {
    if (field.localize === false) {
      return false;
    } else if (field.type === "string" || field.type === "text") {
      return true;
    } else if (Array.isArray(obj[field.name])) {
      return true;
    } else if (!stopTypes.includes(field.type)) {
      return true;
    }
    return false;
  };
  const validFields = [...META_FIELDS$1, ...(_a3 = objFields == null ? void 0 : objFields.filter(fieldFilterFunc)) == null ? void 0 : _a3.map((field) => field.name)];
  validFields.forEach((field) => {
    if (obj[field]) {
      filteredObj[field] = obj[field];
    }
  });
  return filteredObj;
};
var META_FIELDS = ["_key", "_type", "_id", "_weak"];
var BaseDocumentSerializer = (schemas) => {
  const getSchema = (name) => {
    var _a3;
    return (_a3 = schemas == null ? void 0 : schemas._original) == null ? void 0 : _a3.types.find((s) => s.name === name);
  };
  const serializeObject = (obj, stopTypes, serializers) => {
    if (stopTypes.includes(obj._type)) {
      return "";
    }
    const hasSerializer = serializers.types && Object.keys(serializers.types).includes(obj._type);
    if (hasSerializer) {
      return toHTML([obj], {
        components: serializers
      });
    }
    if (obj._type === "span" || obj._type === "block") {
      return toHTML(obj, {
        components: serializers
      });
    }
    let fieldNames = Object.keys(obj).filter((key2) => key2 !== "_type");
    const schema = getSchema(obj._type);
    if (schema && schema.fields) {
      fieldNames = schema.fields.map((field) => field.name).filter((schemaKey) => Object.keys(obj).includes(schemaKey));
    }
    if (typeof obj === "object" && !obj._type) {
      obj._type = "";
    }
    const newSerializationMethods = {};
    const tempType = "".concat(obj._type, "__temp_type__").concat(Math.random().toString(36).substring(7));
    const objToSerialize = {
      _type: tempType
    };
    META_FIELDS.filter((f) => f !== "_type").forEach((field) => {
      objToSerialize[field] = obj[field];
    });
    let innerHTML = "";
    fieldNames.forEach((fieldName) => {
      let htmlField = "";
      if (!META_FIELDS.includes(fieldName)) {
        const value = obj[fieldName];
        if (typeof value === "string") {
          const htmlRegex = new RegExp(/<("[^"]*"|'[^']*'|[^'">])*>/);
          if (htmlRegex.test(value)) {
            htmlField = value;
          } else {
            htmlField = '<span class="'.concat(fieldName, '">').concat(value, "</span>");
          }
        } else if (Array.isArray(value)) {
          htmlField = serializeArray(value, fieldName, stopTypes, {
            ...serializers,
            types: {
              ...serializers.types
            }
          });
        } else {
          const embeddedObject = value;
          const embeddedObjectSchema = getSchema(embeddedObject._type);
          let toTranslate = embeddedObject;
          if (embeddedObjectSchema && embeddedObjectSchema.fields) {
            toTranslate = fieldFilter(toTranslate, embeddedObjectSchema.fields, stopTypes);
          }
          const objHTML = serializeObject(toTranslate, stopTypes, {
            ...serializers,
            types: {
              ...serializers.types
            }
          });
          htmlField = '<div class="'.concat(fieldName, '" data-level="field">').concat(objHTML, "</div>");
        }
        innerHTML += htmlField;
      }
    });
    if (!innerHTML) {
      return "";
    }
    newSerializationMethods[tempType] = (_ref15) => {
      let {
        value
      } = _ref15;
      var _a3;
      let div = '<div class="'.concat(value._type.split("__temp_type__")[0], '"');
      if (value._key || value._id) {
        div += 'id="'.concat((_a3 = value._key) != null ? _a3 : value._id, '"');
      }
      return [div, ' data-type="object">'.concat(innerHTML, "</div>")].join("");
    };
    let serializedBlock = "";
    try {
      serializedBlock = toHTML(objToSerialize, {
        components: {
          ...serializers,
          types: {
            ...serializers.types,
            ...newSerializationMethods
          }
        }
      });
    } catch (err) {
      console.warn('Had issues serializing block of type "'.concat(obj._type, '". Please specify a serialization method for this block in your serialization config. Received error: ').concat(err));
    }
    return serializedBlock;
  };
  const serializeArray = (fieldContent, fieldName, stopTypes, serializers) => {
    const validBlocks = fieldContent.filter((block) => !stopTypes.includes(block._type));
    const filteredBlocks = validBlocks.map((block) => {
      const schema = getSchema(block._type);
      if (schema && schema.fields) {
        return fieldFilter(block, schema.fields, stopTypes);
      }
      return block;
    });
    const output = filteredBlocks.map((obj) => {
      if (typeof obj === "string") {
        return "<span>".concat(obj, "</span>");
      }
      return serializeObject(obj, stopTypes, serializers);
    });
    return '<div class="'.concat(fieldName, '" data-type="array">').concat(output.join(""), "</div>");
  };
  const serializeDocument = function(doc) {
    let translationLevel = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "document";
    let baseLang = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "en";
    let stopTypes = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : defaultStopTypes;
    let serializers = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : customSerializers;
    const schema = getSchema(doc._type);
    let filteredObj = {};
    if (translationLevel === "field") {
      filteredObj = languageObjectFieldFilter(doc, baseLang);
    } else {
      filteredObj = fieldFilter(doc, schema.fields, stopTypes);
    }
    const serializedFields = {};
    for (const key2 in filteredObj) {
      if (filteredObj.hasOwnProperty(key2) === false)
        continue;
      const value = filteredObj[key2];
      if (typeof value === "string") {
        serializedFields[key2] = value;
      } else if (Array.isArray(value)) {
        serializedFields[key2] = serializeArray(value, key2, stopTypes, serializers);
      } else if (value && !stopTypes.find((stopType) => stopType == (value == null ? void 0 : value._type))) {
        const serialized = serializeObject(value, stopTypes, serializers);
        serializedFields[key2] = '<div class="'.concat(key2, `" data-level='field'>`).concat(serialized, "</div>");
      }
    }
    const rawHTMLBody = document.createElement("body");
    rawHTMLBody.innerHTML = serializeObject(serializedFields, stopTypes, serializers);
    const rawHTMLHead = document.createElement("head");
    const metaFields = ["_id", "_type", "_rev"];
    metaFields.forEach((field) => {
      const metaEl = document.createElement("meta");
      metaEl.setAttribute("name", field);
      metaEl.setAttribute("content", doc[field]);
      rawHTMLHead.appendChild(metaEl);
    });
    const versionMeta = document.createElement("meta");
    versionMeta.setAttribute("name", "version");
    versionMeta.setAttribute("content", "3");
    rawHTMLHead.appendChild(versionMeta);
    const rawHTML = document.createElement("html");
    rawHTML.appendChild(rawHTMLHead);
    rawHTML.appendChild(rawHTMLBody);
    return {
      name: doc._id,
      content: rawHTML.outerHTML
    };
  };
  return {
    serializeDocument,
    fieldFilter,
    languageObjectFieldFilter,
    serializeArray,
    serializeObject
  };
};
var deserializeArray = function(arrayHTML) {
  let deserializers = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : customDeserializers;
  let blockDeserializers = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : customBlockDeserializers;
  const output = [];
  const children = Array.from(arrayHTML.children);
  children.forEach((child) => {
    var _a3;
    let deserializedObject;
    try {
      if (((_a3 = child.tagName) == null ? void 0 : _a3.toLowerCase()) === "span") {
        deserializedObject = preprocess(child.innerHTML);
      } else if (child.className || child.getAttribute("data-type") === "object") {
        deserializedObject = deserializeObject(child, deserializers, blockDeserializers);
        deserializedObject._key = child.id;
      } else {
        deserializedObject = htmlToBlocks(child.outerHTML, blockContentType, {
          rules: blockDeserializers
        })[0];
        deserializedObject._key = child.id;
      }
    } catch (e) {
      console.debug("Tried to deserialize block: ".concat(child.outerHTML, " in an array but failed to identify it! Error: ").concat(e));
    }
    output.push(deserializedObject);
  });
  return output;
};
var deserializeObject = function(objectHTML) {
  let deserializers = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : customDeserializers;
  let blockDeserializers = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : customBlockDeserializers;
  const deserialize = deserializers.types[objectHTML.className];
  if (deserialize) {
    return deserialize(objectHTML);
  }
  const output = {};
  if (objectHTML.className) {
    output._type = objectHTML.className;
  }
  const children = Array.from(objectHTML.children);
  children.forEach((child) => {
    var _a3;
    if (((_a3 = child.tagName) == null ? void 0 : _a3.toLowerCase()) === "span") {
      output[child.className] = preprocess(child.innerHTML);
    } else if (child.getAttribute("data-level") === "field") {
      const deserialized = deserializeHTML(child.outerHTML, deserializers, blockDeserializers);
      if (deserialized && Object.keys(deserialized).length) {
        output[child.className] = deserialized;
      } else {
        console.debug("Deserializer: Skipping empty or unreadable HTML: ".concat(child.outerHTML));
      }
    } else if (child.getAttribute("data-type") === "array") {
      output[child.className] = deserializeArray(child, deserializers, blockDeserializers);
    }
  });
  return output;
};
var deserializeHTML = (html, deserializers, blockDeserializers) => {
  let HTMLnode = new DOMParser().parseFromString(html, "text/html").body.children[0];
  if ((HTMLnode == null ? void 0 : HTMLnode.getAttribute("data-level")) === "field") {
    HTMLnode = HTMLnode.children[0];
  }
  if (!HTMLnode) {
    return {};
  }
  let output;
  const deserialize = deserializers.types[HTMLnode.className];
  if (deserialize) {
    output = deserialize(HTMLnode);
  } else if (HTMLnode.getAttribute("data-type") === "object") {
    output = deserializeObject(HTMLnode, deserializers, blockDeserializers);
  } else if (HTMLnode.getAttribute("data-type") === "array") {
    output = deserializeArray(HTMLnode, deserializers, blockDeserializers);
  } else {
    output = {};
    console.debug("Tried to deserialize block ".concat(HTMLnode.outerHTML, " but failed to identify it!"));
  }
  return output;
};
var deserializeDocument = function(serializedDoc) {
  let deserializers = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : customDeserializers;
  let blockDeserializers = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : customBlockDeserializers;
  const metadata = {};
  const head = new DOMParser().parseFromString(serializedDoc, "text/html").head;
  Array.from(head.children).forEach((metaTag) => {
    const validTags = ["_id", "_rev", "_type"];
    const metaName = metaTag.getAttribute("name");
    if (metaName && validTags.includes(metaName)) {
      metadata[metaName] = metaTag.getAttribute("content");
    }
  });
  const content = deserializeHTML(serializedDoc, deserializers, blockDeserializers);
  return {
    ...content,
    ...metadata
  };
};
var BaseDocumentDeserializer = {
  deserializeDocument,
  deserializeHTML
};

// node_modules/sanity-translations-tab/dist/index.esm.js
var TranslationContext = import_react48.default.createContext(null);
var __freeze2 = Object.freeze;
var __defProp2 = Object.defineProperty;
var __template2 = (cooked, raw) => __freeze2(__defProp2(cooked, "raw", {
  value: __freeze2(raw || cooked.slice())
}));
var _a2;
var WrapText = pt(Box)(_a2 || (_a2 = __template2(["\n  white-space: normal;\n"])));
var LocaleCheckbox = (_ref2) => {
  let {
    locale,
    toggle,
    checked
  } = _ref2;
  const onClick = (0, import_react48.useCallback)(() => toggle(locale.localeId, !checked), [locale, toggle, checked]);
  return (0, import_jsx_runtime3.jsx)(Button, {
    mode: "ghost",
    onClick,
    disabled: locale.enabled === false,
    style: {
      cursor: "pointer"
    },
    radius: 2,
    children: (0, import_jsx_runtime3.jsxs)(Flex, {
      align: "center",
      gap: 3,
      children: [(0, import_jsx_runtime3.jsx)(Switch, {
        style: {
          pointerEvents: "none"
        },
        disabled: locale.enabled === false,
        onChange: onClick,
        checked
      }), (0, import_jsx_runtime3.jsx)(WrapText, {
        children: (0, import_jsx_runtime3.jsx)(Text, {
          size: 1,
          weight: "semibold",
          children: locale.description
        })
      })]
    })
  });
};
var NewTask = (_ref3) => {
  let {
    locales,
    refreshTask
  } = _ref3;
  const [selectedLocales, setSelectedLocales] = (0, import_react48.useState)([]);
  const [selectedWorkflowUid, setSelectedWorkflowUid] = (0, import_react48.useState)();
  const [isBusy, setIsBusy] = (0, import_react48.useState)(false);
  const context = (0, import_react48.useContext)(TranslationContext);
  const toast = useToast();
  const toggleLocale = (0, import_react48.useCallback)((locale, selected) => {
    if (!selected) {
      setSelectedLocales(selectedLocales.filter((l) => l !== locale));
    } else if (!selectedLocales.includes(locale)) {
      setSelectedLocales([...selectedLocales, locale]);
    }
  }, [selectedLocales, setSelectedLocales]);
  const createTask2 = (0, import_react48.useCallback)(() => {
    if (!context) {
      toast.push({
        title: "Unable to create task: missing context",
        status: "error",
        closable: true
      });
      return;
    }
    setIsBusy(true);
    context.exportForTranslation(context.documentId).then((serialized) => context.adapter.createTask(context.documentId, serialized, selectedLocales, context.secrets, selectedWorkflowUid, context.callbackUrl)).then(() => {
      toast.push({
        title: "Job successfully created",
        status: "success",
        closable: true
      });
      setSelectedLocales([]);
      setSelectedWorkflowUid("");
      refreshTask();
    }).catch((err) => {
      let errorMsg;
      if (err instanceof Error) {
        errorMsg = err.message;
      } else {
        errorMsg = err ? String(err) : null;
      }
      toast.push({
        title: "Error creating translation job",
        description: errorMsg,
        status: "error",
        closable: true
      });
    }).finally(() => {
      setIsBusy(false);
    });
  }, [context, selectedLocales, selectedWorkflowUid, toast, refreshTask]);
  const possibleLocales = locales.filter((locale) => locale.enabled !== false);
  const onClick = (0, import_react48.useCallback)(() => {
    setSelectedLocales(possibleLocales.length === selectedLocales.length ? (
      // Disable all
      []
    ) : (
      // Enable all
      locales.filter((locale) => locale.enabled !== false).map((locale) => locale.localeId)
    ));
  }, [possibleLocales, selectedLocales, setSelectedLocales, locales]);
  const onToggle = (0, import_react48.useCallback)((locale, checked) => {
    toggleLocale(locale, checked);
  }, [toggleLocale]);
  const onWorkflowChange = (0, import_react48.useCallback)((e) => {
    setSelectedWorkflowUid(e.target.value);
  }, [setSelectedWorkflowUid]);
  return (0, import_jsx_runtime3.jsxs)(Stack, {
    paddingTop: 4,
    space: 4,
    children: [(0, import_jsx_runtime3.jsx)(Text, {
      as: "h2",
      weight: "semibold",
      size: 2,
      children: "Create New Translation Job"
    }), (0, import_jsx_runtime3.jsxs)(Stack, {
      space: 3,
      children: [(0, import_jsx_runtime3.jsxs)(Flex, {
        align: "center",
        justify: "space-between",
        children: [(0, import_jsx_runtime3.jsx)(Text, {
          weight: "semibold",
          size: 1,
          children: possibleLocales.length === 1 ? "Select locale" : "Select locales"
        }), (0, import_jsx_runtime3.jsx)(Button, {
          fontSize: 1,
          padding: 2,
          text: "Toggle All",
          onClick
        })]
      }), (0, import_jsx_runtime3.jsx)(Grid, {
        columns: [1, 1, 2, 3],
        gap: 1,
        children: (locales || []).map((l) => (0, import_jsx_runtime3.jsx)(LocaleCheckbox, {
          locale: l,
          toggle: onToggle,
          checked: selectedLocales.includes(l.localeId)
        }, l.localeId))
      })]
    }), (context == null ? void 0 : context.workflowOptions) && context.workflowOptions.length > 0 && (0, import_jsx_runtime3.jsxs)(Stack, {
      space: 3,
      children: [(0, import_jsx_runtime3.jsx)(Text, {
        weight: "semibold",
        size: 1,
        as: "label",
        htmlFor: "workflow-select",
        children: "Select translation workflow"
      }), (0, import_jsx_runtime3.jsx)(Grid, {
        columns: [1, 1, 2],
        children: (0, import_jsx_runtime3.jsxs)(Select, {
          id: "workflowSelect",
          onChange: onWorkflowChange,
          children: [(0, import_jsx_runtime3.jsx)("option", {
            children: "Default locale workflows"
          }), context.workflowOptions.map((w) => (0, import_jsx_runtime3.jsx)("option", {
            value: w.workflowUid,
            children: w.workflowName
          }, "workflow-opt-".concat(w.workflowUid)))]
        })
      })]
    }), (0, import_jsx_runtime3.jsx)(Button, {
      onClick: createTask2,
      disabled: isBusy || !selectedLocales.length,
      tone: "positive",
      text: isBusy ? "Creating Job..." : "Create Job"
    })]
  });
};
var AccessDeniedIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "access-denied",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M18.1568 6.84315C21.281 9.96734 21.281 15.0327 18.1568 18.1569C15.0326 21.281 9.96733 21.281 6.84313 18.1569C3.71894 15.0327 3.71894 9.96734 6.84313 6.84315C9.96733 3.71895 15.0326 3.71895 18.1568 6.84315ZM18.1568 6.84315L6.844 18.156",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var ActivityIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "activity",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M21 15H19L15.5 7L11 18L8 12L6 15H4",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var AddCircleIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "add-circle",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M8 12.4H17M12.5 8V17M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var AddCommentIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "add-comment",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M13 6.5H7.5C6.39543 6.5 5.5 7.39543 5.5 8.5V14.5C5.5 15.6046 6.39543 16.5 7.5 16.5H9.5V20.5L13.5 16.5H16.5C17.6046 16.5 18.5 15.6046 18.5 14.5V12M15 6.5H22M18.5 10V3",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var AddIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "add",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M12.5 5V20M5 12.5H20",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var ApiIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "api",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M5.93047 13.2107L6.66782 10.3728H6.73089L7.45854 13.2107H5.93047ZM8.17164 16H9.66089L7.56041 9H5.93047L3.82999 16H5.20767L5.65396 14.2876H7.73505L8.17164 16Z",
      fill: "currentColor"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M10.5389 9V16H11.9166V13.7782H13.0323C14.541 13.7782 15.5015 12.8517 15.5015 11.3964C15.5015 9.92654 14.5701 9 13.1003 9H10.5389ZM11.9166 10.1303H12.751C13.6533 10.1303 14.1044 10.5475 14.1044 11.3867C14.1044 12.2308 13.6533 12.6431 12.751 12.6431H11.9166V10.1303Z",
      fill: "currentColor"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M21.1675 16V14.8164H19.717V10.1836H21.1675V9H16.8889V10.1836H18.3393V14.8164H16.8889V16H21.1675Z",
      fill: "currentColor"
    })]
  });
});
var ArchiveIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "archive",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M12.5 10.5V17M20.5 7.5V20.5H4.5V7.5L7.5 4.5H17.5L20.5 7.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M4.5 7.5H20.5M16 14L12.5 17.5L9 14",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var ArrowDownIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "arrow-down",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M12.5 19.5V5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M18 14L12.5 19.5L7 14",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var ArrowLeftIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "arrow-left",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M5.5 12.5H20",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M11 18L5.5 12.5L11 7",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var ArrowRightIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "arrow-right",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M19.5 12.5H5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M14 7L19.5 12.5L14 18",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var ArrowTopRightIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "arrow-top-right",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M16.5 8.5L7 18",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M9 8.5H16.5V16",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var ArrowUpIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "arrow-up",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M7 11L12.5 5.5L18 11",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M12.5 5.5V20",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var AsteriskIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "asterisk",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M12.5 4V21M16.75 5.13879L8.25 19.8612M19.8612 8.25L5.13878 16.75M4.00002 12.5H21M5.13881 8.25L19.8612 16.75M8.25002 5.13879L16.75 19.8612",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var BarChartIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "bar-chart",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M5.5 5V19.5H20M8.5 18V13M11.5 18V9M14.5 18V11M17.5 18V7",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var BasketIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "basket",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M8.5 10.5H5L6.5 19.5H18.5L20 10.5H16.5M8.5 10.5L10.2721 5.18377C10.4082 4.77543 10.7903 4.5 11.2208 4.5H13.7792C14.2097 4.5 14.5918 4.77543 14.7279 5.18377L16.5 10.5M8.5 10.5H16.5M8.5 10.5L9.5 19.5M16.5 10.5L15.5 19.5M12.5 10.5V19.5M19.5 13.5H5.5M19 16.5H6",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var BellIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "bell",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M10.5 17.5V18.5C10.5 20 11.5 20.5 12.5 20.5C13.5 20.5 14.5 20 14.5 18.5V17.5M5.5 17.5C6.5 16 6.5 15 6.5 12C6.5 8 8.5 5.5 12.5 5.5C16.5 5.5 18.5 8 18.5 12C18.5 15 18.5 16 19.5 17.5H5.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var BillIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "bill",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M6.50001 5.5C8.50003 5.5 8.50003 8 8.50003 8V9.5M6.50001 5.5C4.5 5.5 4.5 8 4.5 8L4.50001 9.5H8.50003M6.50001 5.5C6.50001 5.5 15.8333 5.5 17.6667 5.5C19.5 5.5 19.5 8.5 19.5 8.5V20L17.6667 19L15.8333 20L14 19L12.1667 20L10.3334 19L8.50003 20V9.5M11 12.5H15M11 9.5H16M11 15.5H16",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var BinaryDocumentIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "binary-document",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M11.5 4.5V9.5H6.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M9.5 12.5V17.5M11.5 4.5H18.5V20.5H6.5V9.5L11.5 4.5ZM12.5 12.5V17.5H15.5V12.5H12.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinecap: "square",
      strokeLinejoin: "round"
    })]
  });
});
var BlockContentIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "block-content",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M21 7.60002L11 7.60003V6.40003L21 6.40002V7.60002Z",
      fill: "currentColor"
    }), (0, import_jsx_runtime3.jsx)("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M21 11.2667L12.4833 11.2667V10.0667L21 10.0667V11.2667Z",
      fill: "currentColor"
    }), (0, import_jsx_runtime3.jsx)("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M21 14.9334H13.9254V13.7334L21 13.7334V14.9334Z",
      fill: "currentColor"
    }), (0, import_jsx_runtime3.jsx)("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M21 18.6002H4V17.4002H21V18.6002Z",
      fill: "currentColor"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M9.86438 15.6H11.2L8.27623 7.60003H6.92377L4 15.6H5.29072L6.0371 13.4767H9.12362L9.86438 15.6ZM7.53546 9.05255H7.63086L8.80374 12.4344H6.35698L7.53546 9.05255Z",
      fill: "currentColor"
    })]
  });
});
var BlockElementIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "block-element",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M5 19.5H20M5 5.5H20M6.5 8.5H18.5V16.5H6.5V8.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var BlockquoteIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "blockquote",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M10 17.5H19M6 7.5H19M10 12.5H17M6.5 12V18",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var BoldIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "bold",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M13.2087 18C15.5322 18 16.9731 16.793 16.9731 14.8844C16.9731 13.4812 15.9245 12.3949 14.4836 12.2892V12.1534C15.6001 11.9875 16.4526 10.9841 16.4526 9.82991C16.4526 8.14761 15.1927 7.11409 13.0804 7.11409H8.32019V18H13.2087ZM10.5985 8.85674H12.4995C13.5859 8.85674 14.212 9.37727 14.212 10.2448C14.212 11.1199 13.5406 11.6254 12.3109 11.6254H10.5985V8.85674ZM10.5985 16.2574V13.1643H12.575C13.9178 13.1643 14.6496 13.6924 14.6496 14.6882C14.6496 15.7066 13.9404 16.2574 12.6278 16.2574H10.5985Z",
      fill: "currentColor"
    })
  });
});
var BoltIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "bolt",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M18 11.5L9 21L11 13.5H7L16 4L14 11.5H18Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var BookIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "book",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M20.5 17.5V5.5L12.5 6.5M20.5 17.5L12.5 18.5M20.5 17.5V18.5M4.5 17.5V5.5L12.5 6.5M4.5 17.5L12.5 18.5M4.5 17.5V18.5M12.5 18.5L4.5 19.5V18.5M12.5 18.5L20.5 19.5V18.5M12.5 18.5V6.5M12.5 18.5H4.5M12.5 18.5H20.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var BottleIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "bottle",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M7.5 17.5L17.5 17.5M17.5 13C17.5 12.087 17.5 11.3518 17.5 11C17.5 8.5 14.5 9 14.5 7.37494L14.5 5.5M17.5 13C17.5 15.1229 17.5 18.7543 17.5 20.5022C17.5 21.0545 17.0523 21.5 16.5 21.5L8.5 21.5C7.94772 21.5 7.5 21.0547 7.5 20.5024C7.5 18.8157 7.5 15.3546 7.5 13M17.5 13L7.5 13M7.5 13C7.5 12.2538 7.5 11.5648 7.5 11C7.5 8.5 10.5 9 10.5 7.37494L10.5 5.5M10.5 5.5L10.5 3.99999C10.5 3.72385 10.7239 3.49999 11 3.49999L14 3.49999C14.2761 3.49999 14.5 3.72385 14.5 3.99999L14.5 5.5M10.5 5.5L14.5 5.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var BulbFilledIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "bulb-filled",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M16.4272 14.3368C15.8273 15.1773 15.5 16.1794 15.5 17.212V18.5C15.5 19.0523 15.0523 19.5 14.5 19.5H14V20.5C14 21.0523 13.5523 21.5 13 21.5H12C11.4477 21.5 11 21.0523 11 20.5V19.5H10.5C9.94772 19.5 9.5 19.0523 9.5 18.5V17.212C9.5 16.1794 9.17266 15.1773 8.57284 14.3368C7.60216 12.9767 7 11.94 7 10C7 7 9.5 4.5 12.5 4.5C15.5 4.5 18 7 18 10C18 11.94 17.3978 12.9767 16.4272 14.3368Z",
      fill: "currentColor"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M16.4272 14.3368L15.9388 13.9883L16.4272 14.3368ZM14 19.5V18.9H13.4V19.5H14ZM11 19.5H11.6V18.9H11V19.5ZM8.57284 14.3368L9.06122 13.9883H9.06122L8.57284 14.3368ZM16.1 17.212C16.1 16.3069 16.3868 15.4261 16.9155 14.6853L15.9388 13.9883C15.2678 14.9284 14.9 16.0519 14.9 17.212H16.1ZM16.1 18.5V17.212H14.9V18.5H16.1ZM14.5 20.1C15.3837 20.1 16.1 19.3837 16.1 18.5H14.9C14.9 18.7209 14.7209 18.9 14.5 18.9V20.1ZM14 20.1H14.5V18.9H14V20.1ZM13.4 19.5V20.5H14.6V19.5H13.4ZM13.4 20.5C13.4 20.7209 13.2209 20.9 13 20.9V22.1C13.8837 22.1 14.6 21.3837 14.6 20.5H13.4ZM13 20.9H12V22.1H13V20.9ZM12 20.9C11.7791 20.9 11.6 20.7209 11.6 20.5H10.4C10.4 21.3837 11.1163 22.1 12 22.1V20.9ZM11.6 20.5V19.5H10.4V20.5H11.6ZM10.5 20.1H11V18.9H10.5V20.1ZM8.9 18.5C8.9 19.3837 9.61634 20.1 10.5 20.1V18.9C10.2791 18.9 10.1 18.7209 10.1 18.5H8.9ZM8.9 17.212V18.5H10.1V17.212H8.9ZM8.08446 14.6853C8.61315 15.4261 8.9 16.3069 8.9 17.212H10.1C10.1 16.0519 9.73217 14.9284 9.06122 13.9883L8.08446 14.6853ZM6.4 10C6.4 11.0377 6.56208 11.8595 6.86624 12.611C7.16624 13.3521 7.59495 13.9995 8.08446 14.6853L9.06122 13.9883C8.58004 13.314 8.22233 12.7629 7.97858 12.1607C7.739 11.5688 7.6 10.9023 7.6 10H6.4ZM12.5 3.9C9.16863 3.9 6.4 6.66863 6.4 10H7.6C7.6 7.33137 9.83137 5.1 12.5 5.1V3.9ZM18.6 10C18.6 6.66863 15.8314 3.9 12.5 3.9V5.1C15.1686 5.1 17.4 7.33137 17.4 10H18.6ZM16.9155 14.6853C17.4051 13.9995 17.8338 13.3521 18.1338 12.611C18.4379 11.8595 18.6 11.0377 18.6 10H17.4C17.4 10.9023 17.261 11.5688 17.0214 12.1607C16.7777 12.7629 16.42 13.314 15.9388 13.9883L16.9155 14.6853Z",
      fill: "currentColor"
    })]
  });
});
var BulbOutlineIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "bulb-outline",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M9.5 16.5H15.5M11 20V20.5C11 21.0523 11.4477 21.5 12 21.5H13C13.5523 21.5 14 21.0523 14 20.5V20M18 10C18 11.94 17.3978 12.9767 16.4272 14.3368C15.8273 15.1773 15.5 16.1794 15.5 17.212V18.5C15.5 19.0523 15.0523 19.5 14.5 19.5H10.5C9.94772 19.5 9.5 19.0523 9.5 18.5V17.212C9.5 16.1794 9.17266 15.1773 8.57284 14.3368C7.60216 12.9767 7 11.94 7 10C7 7 9.5 4.5 12.5 4.5C15.5 4.5 18 7 18 10Z",
      stroke: "currentColor",
      strokeWidth: 1.2
    })
  });
});
var CalendarIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "calendar",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M4.5 10.5V19.5H20.5V10.5M4.5 10.5V5.5H20.5V10.5M4.5 10.5H12.5H20.5M20.5 13.5H16.5M16.5 13.5H12.5M16.5 13.5V10.5M16.5 13.5V16.5M12.5 13.5H8.5M12.5 13.5V16.5M12.5 13.5V10.5M8.5 13.5H4.5M8.5 13.5V10.5M8.5 13.5V16.5M20.5 16.5H16.5M16.5 16.5H12.5M16.5 16.5V19.5M12.5 16.5H8.5M12.5 16.5V19.5M8.5 16.5H4.5M8.5 16.5V19.5M17.5 8V3M7.5 8V3",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var CaseIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "case",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M9 8.5122V6C9 5.44772 9.44772 5 10 5H15C15.5523 5 16 5.44772 16 6V8.5122M4.5 12V18.5C4.5 19.0523 4.94772 19.5 5.5 19.5H19.5C20.0523 19.5 20.5 19.0523 20.5 18.5V12M4.5 12V9.5122C4.5 8.95991 4.94772 8.5122 5.5 8.5122H19.5C20.0523 8.5122 20.5 8.95991 20.5 9.5122V12M4.5 12L11.7978 14.7367C12.2505 14.9064 12.7495 14.9064 13.2022 14.7367L20.5 12",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var ChartUpwardIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "chart-upward",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M5.5 5V19.5H20M7.5 16L11.5 11.5L15.5 14L19.5 8.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var CheckmarkCircleIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "checkmark-circle",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M9.5 12.1316L11.7414 14.5L16 10M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var CheckmarkIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "checkmark",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M5.5 11.5L10.5 16.5L19.5 7.60001",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var ChevronDownIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "chevron-down",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M17 10.5L12.5 15L8 10.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var ChevronLeftIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "chevron-left",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M14.5 17L10 12.5L14.5 8",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var ChevronRightIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "chevron-right",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M10.5 8L15 12.5L10.5 17",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var ChevronUpIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "chevron-up",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M8 14.5L12.5 10L17 14.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var CircleIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "circle",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("circle", {
      cx: 12.5,
      cy: 12.5,
      r: 8,
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var ClipboardIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "clipboard",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M8 5.5H6.5V19.5H18.5V5.5H17M12.5 3C11.5 3 11.5 4.5 11 4.5C10 4.5 9.5 5 9.5 6.5H15.6C15.6 5 15 4.5 14 4.5C13.5 4.5 13.5 3 12.5 3Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var ClipboardImageIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "clipboard-image",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M8 5.5H6.5V19.5H10.5M17 5.5H18.5V11.5M10.5 18.5L12.73 15.8983C13.1327 15.4285 13.8613 15.4335 14.2575 15.909L15.299 17.1588C15.6754 17.6105 16.3585 17.6415 16.7743 17.2257L16.9903 17.0097C17.2947 16.7053 17.7597 16.6298 18.1447 16.8223L20.5 18M10.5 11.5H20.5V21.5H10.5V11.5ZM12.5 3C11.5 3 11.5 4.5 11 4.5C10 4.5 9.5 5 9.5 6.5H15.6C15.6 5 15 4.5 14 4.5C13.5 4.5 13.5 3 12.5 3Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var ClockIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "clock",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M12.5 8V12.5L15.5 15.5M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var CloseCircleIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "close-circle",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M9.5 15.5L12.5 12.5M12.5 12.5L15.5 9.5M12.5 12.5L9.5 9.5M12.5 12.5L15.5 15.5M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var CloseIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "close",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M18 7L7 18M7 7L18 18",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var CodeBlockIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "code-block",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M11 15L8.5 12.5L11 10M14 10L16.5 12.5L14 15M5.5 6.5H19.5V18.5H5.5V6.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var CodeIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "code",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M11 16L7.5 12.5L11 9M14 9L17.5 12.5L14 16",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var CogIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "cog",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M14.2624 5.40607L13.8714 4.42848C13.6471 3.86771 13.104 3.5 12.5 3.5C11.896 3.5 11.3529 3.86771 11.1286 4.42848L10.7376 5.40607C10.5857 5.78585 10.2869 6.08826 9.90901 6.2448C9.53111 6.40133 9.10603 6.39874 8.73006 6.23761L7.76229 5.82285C7.20716 5.58494 6.56311 5.70897 6.13604 6.13604C5.70897 6.56311 5.58494 7.20716 5.82285 7.76229L6.23761 8.73006C6.39874 9.10602 6.40133 9.53111 6.2448 9.90901C6.08826 10.2869 5.78585 10.5857 5.40607 10.7376L4.42848 11.1286C3.86771 11.3529 3.5 11.896 3.5 12.5C3.5 13.104 3.86771 13.6471 4.42848 13.8714L5.40607 14.2624C5.78585 14.4143 6.08826 14.7131 6.2448 15.091C6.40133 15.4689 6.39874 15.894 6.23761 16.2699L5.82285 17.2377C5.58494 17.7928 5.70897 18.4369 6.13604 18.864C6.56311 19.291 7.20716 19.4151 7.76229 19.1772L8.73006 18.7624C9.10603 18.6013 9.53111 18.5987 9.90901 18.7552C10.2869 18.9117 10.5857 19.2141 10.7376 19.5939L11.1286 20.5715C11.3529 21.1323 11.896 21.5 12.5 21.5C13.104 21.5 13.6471 21.1323 13.8714 20.5715L14.2624 19.5939C14.4143 19.2141 14.7131 18.9117 15.091 18.7552C15.4689 18.5987 15.894 18.6013 16.2699 18.7624L17.2377 19.1771C17.7928 19.4151 18.4369 19.291 18.864 18.864C19.291 18.4369 19.4151 17.7928 19.1771 17.2377L18.7624 16.2699C18.6013 15.894 18.5987 15.4689 18.7552 15.091C18.9117 14.7131 19.2141 14.4143 19.5939 14.2624L20.5715 13.8714C21.1323 13.6471 21.5 13.104 21.5 12.5C21.5 11.896 21.1323 11.3529 20.5715 11.1286L19.5939 10.7376C19.2141 10.5857 18.9117 10.2869 18.7552 9.90901C18.5987 9.53111 18.6013 9.10602 18.7624 8.73006L19.1772 7.76229C19.4151 7.20716 19.291 6.56311 18.864 6.13604C18.4369 5.70897 17.7928 5.58494 17.2377 5.82285L16.2699 6.23761C15.894 6.39874 15.4689 6.40133 15.091 6.2448C14.7131 6.08826 14.4143 5.78585 14.2624 5.40607Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M16.5 12.5C16.5 14.7091 14.7091 16.5 12.5 16.5C10.2909 16.5 8.5 14.7091 8.5 12.5C8.5 10.2909 10.2909 8.5 12.5 8.5C14.7091 8.5 16.5 10.2909 16.5 12.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var CollapseIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "collapse",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M6 14.5L10.5 14.5V19M19 10.5H14.5L14.5 6",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M10.5 14.5L6 19M14.5 10.5L19 6",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var ColorWheelIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "color-wheel",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M9.43853 5.10896L11.1606 9.26642M13.8394 15.7336L15.5615 19.891M15.7336 11.1606L19.891 9.43853M9.26642 13.8394L5.10896 15.5615M5.3139 9.52342L9.23359 11.147M15.7664 13.853L19.6861 15.4766M13.853 9.23359L15.4766 5.3139M9.52342 19.6861L11.147 15.7664M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5ZM16 12.5C16 14.433 14.433 16 12.5 16C10.567 16 9 14.433 9 12.5C9 10.567 10.567 9 12.5 9C14.433 9 16 10.567 16 12.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var CommentIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "comment",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M7.5 16.5H9.5V20.5L13.5 16.5H17.5C18.6046 16.5 19.5 15.6046 19.5 14.5V8.5C19.5 7.39543 18.6046 6.5 17.5 6.5H7.5C6.39543 6.5 5.5 7.39543 5.5 8.5V14.5C5.5 15.6046 6.39543 16.5 7.5 16.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var ComponentIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "component",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M8.5 8.5L12.5 12.5M12.5 12.5L16.5 16.5M12.5 12.5L16.5 8.5M12.5 12.5L8.5 16.5M12.5 4L21 12.5L12.5 21L4 12.5L12.5 4Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var ComposeIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "compose",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M17 6L19 8M14 5.5H5.5V19.5H19.5V11M9 16L9.5 13.5L19 4L21 6L11.5 15.5L9 16Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var ConfettiIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "confetti",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M16.5 6.25C16.9142 6.25 17.25 5.91421 17.25 5.5C17.25 5.08579 16.9142 4.75 16.5 4.75C16.0858 4.75 15.75 5.08579 15.75 5.5C15.75 5.91421 16.0858 6.25 16.5 6.25ZM19.5 16.25C19.9142 16.25 20.25 15.9142 20.25 15.5C20.25 15.0858 19.9142 14.75 19.5 14.75C19.0858 14.75 18.75 15.0858 18.75 15.5C18.75 15.9142 19.0858 16.25 19.5 16.25Z",
      fill: "currentColor"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M13 4C11 6 14.5 5.5 12.5 7.5M21 12C19 14 19.5 10.5 17.5 12.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M6.99288 20.296L7.21541 20.8532L6.99288 20.296ZM15.3657 16.952L15.1432 16.3948L15.3657 16.952ZM4.48221 17.7853L5.03942 18.0078L4.48221 17.7853ZM7.82614 9.41242L8.38334 9.63495L8.38334 9.63495L7.82614 9.41242ZM4.9038 19.8744L4.47954 20.2986L4.9038 19.8744ZM20.6 5C20.6 4.66863 20.3314 4.4 20 4.4C19.6686 4.4 19.4 4.66863 19.4 5L20.6 5ZM15.6417 16.0661C15.6727 16.0352 15.6429 16.1034 15.3784 16.0633C15.1285 16.0255 14.78 15.9035 14.3486 15.6771C13.4924 15.2279 12.4323 14.4325 11.389 13.3892L10.5405 14.2377C11.645 15.3423 12.8008 16.2201 13.791 16.7397C14.2827 16.9977 14.7649 17.1841 15.1987 17.2498C15.6178 17.3133 16.1246 17.2803 16.4903 16.9146L15.6417 16.0661ZM11.389 13.3892C10.3457 12.3459 9.55032 11.2858 9.10105 10.4296C8.87467 9.99821 8.75268 9.64963 8.71484 9.39979C8.67477 9.13524 8.74302 9.10551 8.71208 9.13645L7.86355 8.28792C7.49788 8.65359 7.46489 9.1604 7.52837 9.5795C7.59408 10.0133 7.78043 10.4955 8.03847 10.9872C8.55805 11.9774 9.4359 13.1332 10.5405 14.2377L11.389 13.3892ZM8.71208 9.13645C8.68114 9.16739 8.71088 9.09913 8.97542 9.1392C9.22526 9.17705 9.57384 9.29904 10.0052 9.52542C10.8614 9.97469 11.9215 10.77 12.9648 11.8134L13.8134 10.9648C12.7088 9.86026 11.553 8.98242 10.5628 8.46283C10.0711 8.20479 9.58894 8.01844 9.15513 7.95274C8.73603 7.88926 8.22923 7.92224 7.86355 8.28792L8.71208 9.13645ZM12.9648 11.8134C14.0081 12.8567 14.8035 13.9168 15.2528 14.7729C15.4791 15.2043 15.6011 15.5529 15.639 15.8028C15.679 16.0673 15.6108 16.097 15.6417 16.0661L16.4903 16.9146C16.8559 16.5489 16.8889 16.0421 16.8254 15.623C16.7597 15.1892 16.5734 14.7071 16.3153 14.2153C15.7958 13.2252 14.9179 12.0694 13.8134 10.9648L12.9648 11.8134ZM7.21541 20.8532L15.5883 17.5092L15.1432 16.3948L6.77034 19.7387L7.21541 20.8532ZM5.03942 18.0078L8.38334 9.63495L7.26893 9.18988L3.92501 17.5628L5.03942 18.0078ZM7.86355 8.28792C7.60626 8.54522 7.40381 8.85216 7.26893 9.18988L8.38334 9.63495C8.45773 9.44869 8.5696 9.27894 8.71208 9.13644L7.86355 8.28792ZM3.92501 17.5628C3.54833 18.5059 3.76251 19.5816 4.47954 20.2986L5.32807 19.4501C4.95514 19.0772 4.83814 18.5118 5.03942 18.0078L3.92501 17.5628ZM15.6417 16.0661C15.4993 16.2086 15.3295 16.3204 15.1432 16.3948L15.5883 17.5092C15.926 17.3744 16.2329 17.1719 16.4903 16.9146L15.6417 16.0661ZM6.77034 19.7387C6.26637 19.94 5.70099 19.823 5.32807 19.4501L4.47954 20.2986C5.19657 21.0157 6.27225 21.2298 7.21541 20.8532L6.77034 19.7387ZM19.4 5C19.4 7.17816 18.8838 8.08287 18.3136 8.50727C17.6938 8.96864 16.8379 9.02116 15.7269 9.06388C14.7129 9.10288 13.4438 9.13208 12.4699 9.857C11.4463 10.6189 10.9 12.005 10.9 14.3269H12.1C12.1 12.1487 12.6162 11.244 13.1864 10.8196C13.8062 10.3582 14.6621 10.3057 15.7731 10.263C16.7871 10.224 18.0562 10.1948 19.0301 9.46988C20.0537 8.70799 20.6 7.32184 20.6 5L19.4 5Z",
      fill: "currentColor"
    })]
  });
});
var ControlsIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "controls",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M6.5 5V7.5M6.5 7.5C5.39543 7.5 4.5 8.39543 4.5 9.5C4.5 10.6046 5.39543 11.5 6.5 11.5M6.5 7.5C7.60457 7.5 8.5 8.39543 8.5 9.5C8.5 10.6046 7.60457 11.5 6.5 11.5M6.5 11.5V20M12.5 5V13.5M12.5 13.5C11.3954 13.5 10.5 14.3954 10.5 15.5C10.5 16.6046 11.3954 17.5 12.5 17.5M12.5 13.5C13.6046 13.5 14.5 14.3954 14.5 15.5C14.5 16.6046 13.6046 17.5 12.5 17.5M12.5 17.5V20M18.5 5V7.5M18.5 7.5C17.3954 7.5 16.5 8.39543 16.5 9.5C16.5 10.6046 17.3954 11.5 18.5 11.5M18.5 7.5C19.6046 7.5 20.5 8.39543 20.5 9.5C20.5 10.6046 19.6046 11.5 18.5 11.5M18.5 11.5V20",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var CopyIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "copy",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M8.5 8.5H5.5V20.5H16.5V16.5M19.5 4.5H8.5V16.5H19.5V4.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var CreditCardIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "credit-card",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M20.5 9.5H4.5V11.5H20.5V9.5Z",
      fill: "currentColor",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M7 15.5H14M5.5 18.5H19.5C20.0523 18.5 20.5 18.0523 20.5 17.5V7.5C20.5 6.94772 20.0523 6.5 19.5 6.5H5.5C4.94772 6.5 4.5 6.94772 4.5 7.5V17.5C4.5 18.0523 4.94772 18.5 5.5 18.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var CropIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "crop",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M9.5 5V15.5H20M5 9.5H15.5V20",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var CubeIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "cube",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M4.5 8L12.5 3L20.5 8V17L12.5 22L4.5 17V8Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M12.5 22V13M12.5 13L4.5 8M12.5 13L20.5 8",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var DashboardIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "dashboard",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M14.5 19.5V12.5M10.5 12.5V5.5M5.5 12.5H19.5M5.5 19.5H19.5V5.5H5.5V19.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var DatabaseIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "database",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M18.5 7V17.5C18.5 19.0594 16.0504 20.5 12.5 20.5C8.9496 20.5 6.5 19.0594 6.5 17.5V7M18.5 7C18.5 8.45543 15.8137 9.5 12.5 9.5C9.18629 9.5 6.5 8.45543 6.5 7C6.5 5.54457 9.18629 4.5 12.5 4.5C15.8137 4.5 18.5 5.54457 18.5 7Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var DesktopIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "desktop",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M4.5 13.5V15.5C4.5 16.0523 4.94772 16.5 5.5 16.5H12.5M4.5 13.5V6.5C4.5 5.94772 4.94772 5.5 5.5 5.5H19.5C20.0523 5.5 20.5 5.94772 20.5 6.5V13.5M4.5 13.5H20.5M20.5 13.5V15.5C20.5 16.0523 20.0523 16.5 19.5 16.5H12.5M12.5 16.5V19.5M12.5 19.5H8M12.5 19.5H17",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var DiamondIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "diamond",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M21 10.5L12.5 21M21 10.5L18 5.5H11M21 10.5H16M12.5 21L4 10.5M12.5 21L9 10.5M12.5 21L16 10.5M4 10.5L7 5.5H11M4 10.5H9M9 10.5H12.5H16M9 10.5L11 5.5M16 10.5L14.5 5.5H11",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var DocumentIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "document",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M11.5 4.5V9.5H6.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M11.5 4.5H18.5V20.5H6.5L6.5 9.5M11.5 4.5L6.5 9.5M11.5 4.5V9.5H6.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var DocumentPdfIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "document-pdf",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M12.7127 13.8012L12.7193 13.77C12.8488 13.2366 13.0117 12.5716 12.8845 11.969C12.7997 11.4937 12.4493 11.3084 12.1503 11.295C11.7977 11.2794 11.483 11.4803 11.4049 11.7726C11.2576 12.3082 11.3893 13.0402 11.6303 13.973C11.3268 14.6961 10.8425 15.7472 10.4877 16.3721C9.8271 16.7135 8.94113 17.2402 8.80946 17.9053C8.78268 18.028 8.81392 18.1842 8.88757 18.3248C8.97014 18.481 9.10181 18.6015 9.25579 18.6596C9.32274 18.6841 9.40308 18.7042 9.49681 18.7042C9.88959 18.7042 10.5256 18.3873 11.3736 16.9322C11.5031 16.8898 11.637 16.8452 11.7664 16.8006C12.3734 16.5953 13.0028 16.381 13.5718 16.2851C14.2012 16.622 14.9175 16.8385 15.404 16.8385C15.8861 16.8385 16.0758 16.5529 16.1472 16.381C16.2722 16.0797 16.2119 15.7004 16.0088 15.4973C15.7143 15.2072 14.9979 15.1313 13.882 15.2696C13.3331 14.9349 12.9738 14.4796 12.7127 13.8012ZM10.2645 17.1911C9.95431 17.6419 9.71998 17.8673 9.59278 17.9655C9.7423 17.691 10.0346 17.4009 10.2645 17.1911ZM12.2195 11.9355C12.3355 12.1341 12.3199 12.7345 12.2306 13.038C12.1213 12.5939 12.1056 11.9645 12.1704 11.8909L12.2195 11.9355ZM12.1837 14.6247C12.4225 15.0376 12.7238 15.3924 13.0563 15.6557C12.5743 15.7651 12.1346 15.9458 11.7419 16.1065C11.6481 16.1445 11.5566 16.1824 11.4674 16.2181C11.7642 15.6803 12.0119 15.071 12.1837 14.6247ZM15.6562 16.0864L15.6428 16.1065C15.6428 16.1065 15.4375 16.2315 14.6497 15.9213C15.5558 15.8789 15.6562 16.0864 15.6562 16.0864Z",
      fill: "currentColor"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M11.5 4.5V9.5H6.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M11.5 4.5H18.5V20.5H6.5V9.5L11.5 4.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var DocumentRemoveIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "document-remove",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M11.5 4.5V9.5H6.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M6.5 14V20.5H18.5V14M6.5 11V9.5L11.5 4.5H18.5V11M3 12.5H22",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var DocumentSheetIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "document-sheet",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M11.5 4.5V9.5H6.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M10.4 19V16.4M10.4 16.4L10.4 13.4M10.4 16.4H8M10.4 16.4H14.4M10.4 13.4V11M10.4 13.4H8M10.4 13.4H14.4M14.4 19V16.4M14.4 16.4V13.4M14.4 16.4H17M14.4 13.4V11M14.4 13.4H17M11.5 4.5H18.5V20.5H6.5V9.5L11.5 4.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var DocumentTextIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "document-text",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M11.5 4.5V9.5H6.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M16 13H9M14 16H9M11.5 4.5H18.5V20.5H6.5V9.5L11.5 4.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var DocumentVideoIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "document-video",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M11.5 16.5V13.5L14 15L11.5 16.5Z",
      fill: "currentColor",
      stroke: "currentColor",
      strokeWidth: 1.2
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M11.5 4.5V9.5H6.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M11.5 4.5H18.5V20.5H6.5V9.5L11.5 4.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var DocumentWordIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "document-word",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M12.4699 13.4588H12.5263L13.6328 17H14.5435L16 12H14.9952L14.0656 15.7214H14.0129L12.929 12H12.0672L10.9984 15.7214H10.9419L10.0124 12H9L10.4565 17H11.371L12.4699 13.4588Z",
      fill: "currentColor"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M11.5 4.5V9.5H6.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M11.5 4.5H18.5V20.5H6.5V9.5L11.5 4.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var DocumentZipIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "document-zip",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M11.5 4.5V9.5H6.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M15 4.5L13.5 5L15.5 6L13.5 7L15.5 8L13.5 9L15.5 10L13.5 11L14.5 11.5V13M11.5 4.5H18.5V20.5H6.5V9.5L11.5 4.5ZM13.5 13H15.5L16 17H13L13.5 13Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var DocumentsIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "documents",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M10.5 4.5V9.5H5.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M16.5 7.5H19.5V21.5H8.5V18.5M10.5 4.5H16.5V18.5H5.5V9.5L10.5 4.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var DotIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "dot",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("circle", {
      cx: 12.5,
      cy: 12.5,
      r: 2.5,
      fill: "currentColor",
      stroke: "currentColor",
      strokeWidth: 1.2
    })
  });
});
var DoubleChevronDownIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "double-chevron-down",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M17 8L12.5 12.5L8 8M17 13L12.5 17.5L8 13",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var DoubleChevronLeftIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "double-chevron-left",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M12 17L7.5 12.5L12 8M17 17L12.5 12.5L17 8",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var DoubleChevronRightIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "double-chevron-right",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M13 8L17.5 12.5L13 17M8 8L12.5 12.5L8 17",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var DoubleChevronUpIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "double-chevron-up",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M8 12L12.5 7.5L17 12M8 17L12.5 12.5L17 17",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var DownloadIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "download",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M19.5 17V19.5H5.5V17M12.5 16L12.5 5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M17.5 11L12.5 16L7.5 11",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var DragHandleIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "drag-handle",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M9.5 8C10.3284 8 11 7.32843 11 6.5C11 5.67157 10.3284 5 9.5 5C8.67157 5 8 5.67157 8 6.5C8 7.32843 8.67157 8 9.5 8Z",
      fill: "currentColor"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M9.5 14C10.3284 14 11 13.3284 11 12.5C11 11.6716 10.3284 11 9.5 11C8.67157 11 8 11.6716 8 12.5C8 13.3284 8.67157 14 9.5 14Z",
      fill: "currentColor"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M11 18.5C11 19.3284 10.3284 20 9.5 20C8.67157 20 8 19.3284 8 18.5C8 17.6716 8.67157 17 9.5 17C10.3284 17 11 17.6716 11 18.5Z",
      fill: "currentColor"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M15.5 8C16.3284 8 17 7.32843 17 6.5C17 5.67157 16.3284 5 15.5 5C14.6716 5 14 5.67157 14 6.5C14 7.32843 14.6716 8 15.5 8Z",
      fill: "currentColor"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M17 12.5C17 13.3284 16.3284 14 15.5 14C14.6716 14 14 13.3284 14 12.5C14 11.6716 14.6716 11 15.5 11C16.3284 11 17 11.6716 17 12.5Z",
      fill: "currentColor"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M15.5 20C16.3284 20 17 19.3284 17 18.5C17 17.6716 16.3284 17 15.5 17C14.6716 17 14 17.6716 14 18.5C14 19.3284 14.6716 20 15.5 20Z",
      fill: "currentColor"
    })]
  });
});
var DropIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "drop",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M18.5 14.5C18.5 18 16 20.5 12.5 20.5C9 20.5 6.5 18 6.5 14.5C6.5 11 9.5 7.50001 12.5 4.5C15.5 7.5 18.5 11 18.5 14.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var EarthAmericasIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "earth-americas",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M7 13L5.5 9L10 5H15V10L14 9H11L9.5 11L10.5 12H12V13L13 14.5H15.5L18.5 17L15.5 19.5L10.5 20V17L12.5 15L9 13L7 10.5V13Z",
      fill: "currentColor",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("circle", {
      cx: 12.5,
      cy: 12.5,
      r: 8,
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var EarthGlobeIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "earth-globe",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M5.5 16.5H19.5M5.5 8.5H19.5M4.5 12.5H20.5M12.5 20.5C12.5 20.5 8 18.5 8 12.5C8 6.5 12.5 4.5 12.5 4.5M12.5 4.5C12.5 4.5 17 6.5 17 12.5C17 18.5 12.5 20.5 12.5 20.5M12.5 4.5V20.5M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var EditIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "edit",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M15 7L18 10M6 19L7 15L17 5L20 8L10 18L6 19Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var EllipsisHorizontalIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "ellipsis-horizontal",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M6.5 11C7.32843 11 8 11.6716 8 12.5C8 13.3284 7.32843 14 6.5 14C5.67157 14 5 13.3284 5 12.5C5 11.6716 5.67157 11 6.5 11Z",
      fill: "currentColor"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M12.5 11C13.3284 11 14 11.6716 14 12.5C14 13.3284 13.3284 14 12.5 14C11.6716 14 11 13.3284 11 12.5C11 11.6716 11.6716 11 12.5 11Z",
      fill: "currentColor"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M18.5 11C19.3284 11 20 11.6716 20 12.5C20 13.3284 19.3284 14 18.5 14C17.6716 14 17 13.3284 17 12.5C17 11.6716 17.6716 11 18.5 11Z",
      fill: "currentColor"
    })]
  });
});
var EllipsisVerticalIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "ellipsis-vertical",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M14 6.5C14 7.32843 13.3284 8 12.5 8C11.6716 8 11 7.32843 11 6.5C11 5.67157 11.6716 5 12.5 5C13.3284 5 14 5.67157 14 6.5Z",
      fill: "currentColor"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M14 12.5C14 13.3284 13.3284 14 12.5 14C11.6716 14 11 13.3284 11 12.5C11 11.6716 11.6716 11 12.5 11C13.3284 11 14 11.6716 14 12.5Z",
      fill: "currentColor"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M14 18.5C14 19.3284 13.3284 20 12.5 20C11.6716 20 11 19.3284 11 18.5C11 17.6716 11.6716 17 12.5 17C13.3284 17 14 17.6716 14 18.5Z",
      fill: "currentColor"
    })]
  });
});
var EnterIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "enter",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M6 14.5H19.5V7",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M10 18.5L6 14.5L10 10.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var EnterRightIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "enter-right",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M19 14.5H5.5V7",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M15 18.5L19 14.5L15 10.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var EnvelopeIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "envelope",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M20.5 18.5H4.5V6.5H20.5V18.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M20.5 18.5L17.75 15.5L15 12.5M4.5 18.5L10 12.5M20.5 6.5L12.5 15L4.5 6.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var EqualIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "equal",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M7.5 4.5H3.5V20.5H7.5",
      stroke: "currentColor",
      strokeWidth: 1.2
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M17.5 20.5L21.5 20.5L21.5 4.5L17.5 4.5",
      stroke: "currentColor",
      strokeWidth: 1.2
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M9 10.5H16",
      stroke: "currentColor",
      strokeWidth: 1.2
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M9 14.5H16",
      stroke: "currentColor",
      strokeWidth: 1.2
    })]
  });
});
var ErrorFilledIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "error-filled",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M4 12.5C4 7.80558 7.80558 4 12.5 4C17.1944 4 21 7.80558 21 12.5C21 17.1944 17.1944 21 12.5 21C7.80558 21 4 17.1944 4 12.5ZM13 14.5V16H12V14.5H13ZM12 9V13H13V9H12Z",
      fill: "currentColor"
    })
  });
});
var ErrorOutlineIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "error-outline",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M12.5 16V14.5M12.5 9V13M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var ExpandIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "expand",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M14 6.5H18.5V11M11 18.5H6.5V14",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M18.5 6.5L14 11M6.5 18.5L11 14",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var EyeClosedIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "eye-closed",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M7 15.5L5.5 17.5M20.5 12.5C19.8612 13.5647 19.041 14.6294 18.0008 15.501M18.0008 15.501C16.5985 16.676 14.7965 17.5 12.5 17.5M18.0008 15.501L18 15.5M18.0008 15.501L19.5 17.5M12.5 17.5C8.5 17.5 6 15 4.5 12.5M12.5 17.5V20M15.5 17L16.5 19.5M9.5 17L8.5 19.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var EyeOpenIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "eye-open",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M9.39999 12.5C9.39999 10.7879 10.7879 9.39999 12.5 9.39999C14.2121 9.39999 15.6 10.7879 15.6 12.5C15.6 14.2121 14.2121 15.6 12.5 15.6C10.7879 15.6 9.39999 14.2121 9.39999 12.5Z",
      fill: "currentColor"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M12.5 7.5C8.5 7.5 6 10 4.5 12.5C6 15 8.5 17.5 12.5 17.5C16.5 17.5 19 15 20.5 12.5C19 10 16.5 7.5 12.5 7.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var FilterIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "filter",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M11 12L6 7V6L19 6L19 7L14 12V17L11 19V12Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinecap: "square",
      strokeLinejoin: "round"
    })
  });
});
var FolderIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "folder",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M11.5 8.5H19.5V18.5H5.5V5.5H10.5L11.5 8.5ZM11.5 8.5H5.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var GenerateIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "generate",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M9 5.30423C6.33576 6.60253 4.5 9.33688 4.5 12.5C4.5 16.9183 8.08172 20.5 12.5 20.5C16.9183 20.5 20.5 16.9183 20.5 12.5C20.5 8.08172 16.9183 4.5 12.5 4.5V14.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M16 11L12.5 14.5L9 11",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var GroqIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "groq",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M13 13H21L13 21L13 13Z",
      fill: "currentColor"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M12 12V4L4 12H12Z",
      fill: "currentColor"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M12 13H4L12 21V13Z",
      fill: "currentColor"
    })]
  });
});
var HashIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "hash",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M8.33894 16.1002H5.44615L5.63077 14.9002H8.52356L9.26202 10.1002H6.36923L6.55384 8.90018H9.44663L9.89281 6H11.1069L10.6608 8.90018H15.4466L15.8928 6H17.1069L16.6608 8.90018H19.5539L19.3693 10.1002H16.4761L15.7377 14.9002H18.6308L18.4462 16.1002H15.5531L15.1069 19H13.8928L14.3389 16.1002H9.55306L9.10693 19H7.89281L8.33894 16.1002ZM10.4761 10.1002L9.73767 14.9002H14.5236L15.262 10.1002H10.4761Z",
      fillRule: "evenodd",
      clipRule: "evenodd",
      fill: "currentColor"
    })
  });
});
var HeartFilledIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "heart-filled",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M17 16C15.8 17.3235 12.5 20.5 12.5 20.5C12.5 20.5 9.2 17.3235 8 16C5.2 12.9118 4.5 11.7059 4.5 9.5C4.5 7.29412 6.1 5.5 8.5 5.5C10.5 5.5 11.7 6.82353 12.5 8.14706C13.3 6.82353 14.5 5.5 16.5 5.5C18.9 5.5 20.5 7.29412 20.5 9.5C20.5 11.7059 19.8 12.9118 17 16Z",
      fill: "currentColor",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var HeartIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "heart",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M17 16C15.8 17.3235 12.5 20.5 12.5 20.5C12.5 20.5 9.2 17.3235 8 16C5.2 12.9118 4.5 11.7059 4.5 9.5C4.5 7.29412 6.1 5.5 8.5 5.5C10.5 5.5 11.7 6.82353 12.5 8.14706C13.3 6.82353 14.5 5.5 16.5 5.5C18.9 5.5 20.5 7.29412 20.5 9.5C20.5 11.7059 19.8 12.9118 17 16Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var HelpCircleIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "help-circle",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M12.5 13C12.5 11 14 11.5 14 10C14 9.34375 13.5 8.5 12.5 8.5C11.5 8.5 11 9 10.5 9.5M12.5 16V14.5M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var HighlightIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "highlight",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "m20.25 9.005-2.719 4.71M10.75 3.504l-2.725 4.72m9.506 5.49-9.506-5.49m9.506 5.49L16.5 15.5l-3.268.634L12 18l-.586-.352m-3.39-9.423L7 10l1 3-1 2 .586.351m0 0L4.902 20h5.155l1.357-2.352m-3.828-2.297 3.828 2.297M13 20h7",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    })
  });
});
var HomeIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "home",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M6.5 8.75V18.5H18.5V8.75M4.5 10L12.5 5L20.5 10M14.5 18.5V11.5H10.5V18.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var IceCreamIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "ice-cream",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M9.5 13.5L12.5 20.5L15.5 13.5M12.5 8.26389C11.9692 7.78885 11.2684 7.5 10.5 7.5C8.84315 7.5 7.5 8.84315 7.5 10.5C7.5 12.1569 8.84315 13.5 10.5 13.5C11.2684 13.5 11.9692 13.2111 12.5 12.7361M9.5 7.5C9.5 5.84315 10.8431 4.5 12.5 4.5C14.1569 4.5 15.5 5.84315 15.5 7.5M17.5 10.5C17.5 12.1569 16.1569 13.5 14.5 13.5C12.8431 13.5 11.5 12.1569 11.5 10.5C11.5 8.84315 12.8431 7.5 14.5 7.5C16.1569 7.5 17.5 8.84315 17.5 10.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var ImageIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "image",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M5.5 15.5L8.79289 12.2071C9.18342 11.8166 9.81658 11.8166 10.2071 12.2071L12.8867 14.8867C13.2386 15.2386 13.7957 15.2782 14.1938 14.9796L15.1192 14.2856C15.3601 14.1049 15.6696 14.0424 15.9618 14.1154L19.5 15M5.5 6.5H19.5V18.5H5.5V6.5ZM15.5 10.5C15.5 11.0523 15.0523 11.5 14.5 11.5C13.9477 11.5 13.5 11.0523 13.5 10.5C13.5 9.94772 13.9477 9.5 14.5 9.5C15.0523 9.5 15.5 9.94772 15.5 10.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var ImageRemoveIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "image-remove",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M5.5 11V6.5H19.5V11M5.5 14V18.5H19.5V14M3 12.5H22",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var ImagesIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "images",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M18.5 7.5H20.5V19.5H6.5V17.5M4.5 14.5L7.79289 11.2071C8.18342 10.8166 8.81658 10.8166 9.20711 11.2071L11.8867 13.8867C12.2386 14.2386 12.7957 14.2782 13.1938 13.9796L14.1192 13.2856C14.3601 13.1049 14.6696 13.0424 14.9618 13.1154L18.5 14M4.5 5.5H18.5V17.5H4.5V5.5ZM14.5 9.5C14.5 10.0523 14.0523 10.5 13.5 10.5C12.9477 10.5 12.5 10.0523 12.5 9.5C12.5 8.94772 12.9477 8.5 13.5 8.5C14.0523 8.5 14.5 8.94772 14.5 9.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var InfoFilledIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "info-filled",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M21 12.5C21 17.1944 17.1944 21 12.5 21C7.80558 21 4 17.1944 4 12.5C4 7.80558 7.80558 4 12.5 4C17.1944 4 21 7.80558 21 12.5ZM12 10.5V9H13V10.5H12ZM13 16V12H12V16H13Z",
      fill: "currentColor"
    })
  });
});
var InfoOutlineIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "info-outline",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M12.5 10.5V9M12.5 12V16M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var InlineElementIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "inline-element",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M5.5 5V20M19.5 5V20M8.5 6.5H16.5V18.5H8.5V6.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var InlineIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "inline",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M12.5 6.5H19.5V18.5H12.5M12.5 6.5H5.5V18.5H12.5M12.5 6.5V18.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var InsertAboveIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "insert-above",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M14.5 10.5556L10.5 10.5556M12.5 12.5L12.5 8.5M18.5 5.5L6.5 5.5M18.5 19.5L6.5 19.5L6.5 15.5L18.5 15.5L18.5 19.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinecap: "square",
      strokeLinejoin: "round"
    })
  });
});
var InsertBelowIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "insert-below",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M10.5 14.5H14.5M12.5 12.5V16.5M6.5 19.5H18.5M6.5 5.5H18.5V9.5H6.5V5.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinecap: "square",
      strokeLinejoin: "round"
    })
  });
});
var ItalicIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "italic",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M10.43 18H11.7276L13.4551 9.86763H12.1576L10.43 18ZM13.3043 8.29849C13.8022 8.29849 14.2095 7.89112 14.2095 7.39322C14.2095 6.89532 13.8022 6.48795 13.3043 6.48795C12.8064 6.48795 12.399 6.89532 12.399 7.39322C12.399 7.89112 12.8064 8.29849 13.3043 8.29849Z",
      fill: "currentColor"
    })
  });
});
var JoystickIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "joystick",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M9.5 16V14.5H15.5V16M13.5 10.5V14.5M11.5 10.5V14.5M15.5 7.5C15.5 9.15685 14.1569 10.5 12.5 10.5C10.8431 10.5 9.5 9.15685 9.5 7.5C9.5 5.84315 10.8431 4.5 12.5 4.5C14.1569 4.5 15.5 5.84315 15.5 7.5ZM18.5 19.5H6.5C5.94772 19.5 5.5 19.0523 5.5 18.5V17.5C5.5 16.9477 5.94772 16.5 6.5 16.5H18.5C19.0523 16.5 19.5 16.9477 19.5 17.5V18.5C19.5 19.0523 19.0523 19.5 18.5 19.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var JsonIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "json",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M11 5.5H9.5C8.39543 5.5 7.5 6.39543 7.5 7.5V12.5M7.5 12.5H4M7.5 12.5V17.5C7.5 18.6046 8.39543 19.5 9.5 19.5H11M14 5.5H15.5C16.6046 5.5 17.5 6.39543 17.5 7.5V12.5M17.5 12.5H21M17.5 12.5V17.5C17.5 18.6046 16.6046 19.5 15.5 19.5H14",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var LaunchIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "launch",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M12 7.5H6.5V18.5H17.5V13M19.5 5.5L10.5 14.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M14 5.5H19.5V11",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var LeaveIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "leave",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M14.5 15V18.5H5.5V6.5H14.5V10M9 12.5H21.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M18 9L21.5 12.5L18 16",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var LemonIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "lemon",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M10.6569 10.3431L6.41422 14.5858C7.58579 15.7574 9.12132 16.3431 10.6569 16.3431M10.6569 10.3431L14.8995 6.1005C16.0711 7.27208 16.6569 8.80761 16.6569 10.3431M10.6569 10.3431L10.6569 16.3431M10.6569 10.3431L16.6569 10.3431M10.6569 10.3431L14.8995 14.5858M14.8995 14.5858C13.7279 15.7574 12.1924 16.3431 10.6569 16.3431M14.8995 14.5858C16.0711 13.4142 16.6569 11.8787 16.6569 10.3431M16.3137 4.68629C19.4379 7.81049 19.4379 12.8758 16.3137 16C13.1895 19.1242 8.12419 19.1242 5 16L16.3137 4.68629Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var LinkIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "link",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M11 12.5L12.5 14C13.281 14.781 14.719 14.781 15.5 14L18.5 11C19.281 10.219 19.281 8.78105 18.5 8L18 7.5C17.2189 6.71895 15.781 6.71895 15 7.5L13 9.5M12 15.5L10 17.5C9.21895 18.281 7.78105 18.281 7 17.5L6.5 17C5.71895 16.219 5.71896 14.781 6.5 14L9.50001 11C10.2811 10.219 11.719 10.2189 12.5 11L14 12.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var LinkRemovedIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "link-removed",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M18.5 11C19.281 10.219 19.281 8.78108 18.5 8.00003L18 7.50003C17.2189 6.71898 15.781 6.71898 15 7.50003L13 9.50003M15.5 14C14.7189 14.7811 13.281 14.7811 12.5 14M6.5 14C5.71895 14.7811 5.71894 16.219 6.49999 17L6.99999 17.5C7.78104 18.2811 9.21894 18.2811 9.99999 17.5L12 15.5M12.5 11C11.719 10.219 10.281 10.219 9.5 11M3 12.5H22",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var LockIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "lock",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M15.5 11.5V8.5C15.5 6.5 14 5.5 12.5 5.5C11 5.5 9.5 6.5 9.5 8.5V11.5M7.5 11.5H17.5V19.5H7.5V11.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var LogoJsIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "logo-js",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M20 5H5V20H20V5ZM12.5254 16.1572C12.5254 17.4189 11.7742 18.1536 10.4792 18.1536C9.24243 18.1536 8.49121 17.4189 8.45801 16.2942V16.261H9.67407V16.2859C9.69897 16.7466 9.9729 17.0703 10.4626 17.0703C10.9939 17.0703 11.272 16.7507 11.272 16.1489V12.011H12.5254V16.1572ZM18.2893 16.2153C18.2893 17.4023 17.3679 18.1536 15.8738 18.1536C14.4419 18.1536 13.5371 17.4688 13.4666 16.4062L13.4624 16.3398H14.6702L14.6743 16.3813C14.72 16.8296 15.2056 17.1326 15.907 17.1326C16.5752 17.1326 17.0359 16.813 17.0359 16.3523V16.3481C17.0359 15.9539 16.7412 15.7339 15.9983 15.5803L15.3674 15.4517C14.1223 15.1985 13.5869 14.6174 13.5869 13.7085V13.7043C13.5869 12.592 14.5415 11.8574 15.8696 11.8574C17.2683 11.8574 18.0901 12.5962 18.1689 13.5964L18.1731 13.6504H16.9944L16.9861 13.6006C16.9155 13.1731 16.5005 12.8743 15.8696 12.8743C15.2512 12.8784 14.8403 13.1606 14.8403 13.6089V13.613C14.8403 14.0032 15.1309 14.2356 15.8364 14.3809L16.4714 14.5095C17.7373 14.771 18.2893 15.2773 18.2893 16.2112V16.2153Z",
      fill: "currentColor"
    })
  });
});
var LogoTsIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "logo-ts",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M20 5H5V20H20V5ZM11.0769 18H9.82349V13.0444H8.02637V12.011H12.874V13.0444H11.0769V18ZM18.2893 16.2153C18.2893 17.4023 17.3679 18.1536 15.8738 18.1536C14.4419 18.1536 13.5371 17.4688 13.4666 16.4062L13.4624 16.3398H14.6702L14.6743 16.3813C14.72 16.8296 15.2056 17.1326 15.907 17.1326C16.5752 17.1326 17.0359 16.813 17.0359 16.3523V16.3481C17.0359 15.9539 16.7412 15.7339 15.9983 15.5803L15.3674 15.4517C14.1223 15.1985 13.5869 14.6174 13.5869 13.7085V13.7043C13.5869 12.592 14.5415 11.8574 15.8696 11.8574C17.2683 11.8574 18.0901 12.5962 18.1689 13.5964L18.1731 13.6504H16.9944L16.9861 13.6006C16.9155 13.1731 16.5005 12.8743 15.8696 12.8743C15.2512 12.8784 14.8403 13.1606 14.8403 13.6089V13.613C14.8403 14.0032 15.1309 14.2356 15.8364 14.3809L16.4714 14.5095C17.7373 14.771 18.2893 15.2773 18.2893 16.2112V16.2153Z",
      fill: "currentColor"
    })
  });
});
var MasterDetailIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "master-detail",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M7 9.5H10M11.5 6.5V18.5M7 12.5H10M13 9.5H18M7 15.5H10M5.5 6.5H19.5V18.5H5.5V6.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var MenuIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "menu",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M6 7.5H19M6 17.5H19M6 12.5H19",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var MobileDeviceIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "mobile-device",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M7.5 6.5C7.5 5.39543 8.39543 4.5 9.5 4.5H15.5C16.6046 4.5 17.5 5.39543 17.5 6.5V18.5C17.5 19.6046 16.6046 20.5 15.5 20.5H9.5C8.39543 20.5 7.5 19.6046 7.5 18.5V6.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M13.5 17.5C13.5 18.0523 13.0523 18.5 12.5 18.5C11.9477 18.5 11.5 18.0523 11.5 17.5C11.5 16.9477 11.9477 16.5 12.5 16.5C13.0523 16.5 13.5 16.9477 13.5 17.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var MoonIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "moon",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M19.6065 16.1775C18.9417 16.387 18.234 16.5 17.5 16.5C13.634 16.5 10.5 13.366 10.5 9.5C10.5 7.54163 11.3042 5.77109 12.6004 4.50062C12.567 4.50021 12.5335 4.5 12.5 4.5C8.08172 4.5 4.5 8.08172 4.5 12.5C4.5 16.9183 8.08172 20.5 12.5 20.5C15.5924 20.5 18.275 18.7454 19.6065 16.1775Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var NumberIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "number",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M21.0165 17.6336H3.83636V16.4336H21.0165V17.6336Z",
      fill: "currentColor"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M7.09808 13.3967V7.508H5.74066L3.83636 8.78241V10.091L5.65277 8.88495H5.74066V13.3967H3.84125V14.5539H8.89984V13.3967H7.09808Z",
      fill: "currentColor"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M9.81781 9.63202V9.66132H11.1069V9.62714C11.1069 8.95331 11.5756 8.49432 12.2739 8.49432C12.9575 8.49432 13.4018 8.89471 13.4018 9.50507C13.4018 9.9787 13.1528 10.3498 12.1909 11.3117L9.89594 13.5822V14.5539H14.8618V13.3869H11.7807V13.299L13.1577 11.9855C14.3491 10.843 14.7543 10.1838 14.7543 9.41229C14.7543 8.19159 13.7729 7.36639 12.3178 7.36639C10.8383 7.36639 9.81781 8.28436 9.81781 9.63202Z",
      fill: "currentColor"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M17.6694 11.4631H18.5092C19.3198 11.4631 19.8422 11.8683 19.8422 12.4982C19.8422 13.1183 19.3295 13.5139 18.5239 13.5139C17.767 13.5139 17.2592 13.133 17.2104 12.5324H15.9262C15.9897 13.8508 17.0248 14.6955 18.5629 14.6955C20.1401 14.6955 21.2192 13.841 21.2192 12.591C21.2192 11.6584 20.6528 11.0334 19.7006 10.9211V10.8332C20.4721 10.6769 20.9457 10.0666 20.9457 9.23651C20.9457 8.12323 19.9741 7.36639 18.5434 7.36639C17.0541 7.36639 16.1118 8.17694 16.0629 9.50018H17.2983C17.3422 8.88007 17.8061 8.48456 18.4995 8.48456C19.2075 8.48456 19.6567 8.85565 19.6567 9.44159C19.6567 10.0324 19.1977 10.4182 18.4946 10.4182H17.6694V11.4631Z",
      fill: "currentColor"
    })]
  });
});
var OkHandIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "ok-hand",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M15.9957 11.5C14.8197 10.912 11.9957 9 10.4957 9C8.9957 9 5.17825 11.7674 6 13C7 14.5 9.15134 11.7256 10.4957 12C11.8401 12.2744 13 13.5 13 14.5C13 15.5 11.8401 16.939 10.4957 16.5C9.15134 16.061 8.58665 14.3415 7.4957 14C6.21272 13.5984 5.05843 14.6168 5.5 15.5C5.94157 16.3832 7.10688 17.6006 8.4957 19C9.74229 20.2561 11.9957 21.5 14.9957 20C17.9957 18.5 18.5 16.2498 18.5 13C18.5 11.5 13.7332 5.36875 11.9957 4.5C10.9957 4 10 5 10.9957 6.5C11.614 7.43149 13.5 9.27705 14 10.3751M15.5 8C15.5 8 15.3707 7.5 14.9957 6C14.4957 4 15.9957 3.5 16.4957 4.5C17.1281 5.76491 18.2872 10.9147 18.4957 13",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var OlistIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "olist",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M10 7.5H19M10 12.5H19M10 17.5H19M5 18.5H7.5L7 17.5L7.5 16.5H5M5 6.5H6.5V8.5M5 8.5H6.5M6.5 8.5H8M8 13.5H6L7 11.5H5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var OverageIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "overage",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M18.5 11V6.5H14",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M6.5 18.5L9 16L12 13L18.5 6.5M3 13.5H22",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var PackageIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "package",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M12.5 13V22M12.5 13L4.5 8M12.5 13L20.5 8M8.5 5.5L16.5 10.5M4.5 8L12.5 3L20.5 8V17L12.5 22L4.5 17V8Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var PanelLeftIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "panel-left",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M10.5 6.5H19.5V18.5H10.5M10.5 6.5H5.5V18.5H10.5M10.5 6.5V18.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var PanelRightIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "panel-right",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M14.5 6.5H19.5V18.5H14.5M14.5 6.5H5.5V18.5H14.5M14.5 6.5V18.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var PauseIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "pause",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M10.5 7.5H8.5V17.5H10.5V7.5Z",
      fill: "currentColor"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M16.5 7.5H14.5V17.5H16.5V7.5Z",
      fill: "currentColor"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M10.5 7.5H8.5V17.5H10.5V7.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M16.5 7.5H14.5V17.5H16.5V7.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2
    })]
  });
});
var PinIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "pin",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M6.5 10.5C6.5 7 9 4.5 12.5 4.5C16 4.5 18.5 7 18.5 10.5C18.5 14 15.5 17.5 12.5 20.5C9.5 17.5 6.5 14 6.5 10.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M14 10.5C14 11.3284 13.3284 12 12.5 12C11.6716 12 11 11.3284 11 10.5C11 9.67157 11.6716 9 12.5 9C13.3284 9 14 9.67157 14 10.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var PinRemovedIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "pin-removed",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M7.39787 14C8.51075 16.2897 10.5054 18.5054 12.5 20.5C14.4946 18.5054 16.4892 16.2897 17.6021 14M6.52009 11C6.50681 10.8334 6.5 10.6667 6.5 10.5C6.5 7 9 4.5 12.5 4.5C16 4.5 18.5 7 18.5 10.5C18.5 10.6667 18.4932 10.8334 18.4799 11M3 12.5H22",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var PlayIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "play",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M7.5 18.5V6.5L17.5 12.5L7.5 18.5Z",
      fill: "currentColor",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var PlugIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "plug",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M13.25 8.5L16.75 5M16.25 11.5L19.75 8M9.25 15.5L5.25 19.5M7.75 14L9.75 12C8.25 10 8.75 9 9.75 8C10.15 7.6 11.25 6.5 11.25 6.5L18.25 13.5C18.25 13.5 17.3825 14.3675 16.75 15C15.75 16 14.75 16.5 12.75 15L10.75 17L7.75 14Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var PresentationIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "presentation",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M10.5 18H5.5V8.5H19.5V18H14.5M10.5 18L9 22M10.5 18H14.5M14.5 18L16 22M4.5 8.5H20.5V6.5H4.5V8.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var ProjectsIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "projects",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M21 17.5H14M17.5 14V21M4.5 14.5H10.5V20.5H4.5V14.5ZM14.5 4.5H20.5V10.5H14.5V4.5ZM4.5 4.5H10.5V10.5H4.5V4.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var PublishIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "publish",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M4.99997 5.50006H20M12.5 9.00005V20",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M7.5 14L12.5 9.00006L17.5 14",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var ReadOnlyIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "read-only",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M15 7L18 10M10 12L7 15L6 19L10 18L13 15M12 10L17 5L20 8L15 13M19 19L5 5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var RedoIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "redo",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M19 9.5L10 9.5C7.51472 9.5 5.5 11.5147 5.5 14C5.5 16.4853 7.51472 18.5 10 18.5H19",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M15 13.5L19 9.5L15 5.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var RefreshIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "refresh",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M19.5 13.5C19.5 17.366 16.366 20.5 12.5 20.5C8.63401 20.5 5.5 17.366 5.5 13.5C5.5 9.63401 8.63401 6.5 12.5 6.5H15.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M11.5 10.5L15.5 6.5L11.5 2.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var RemoveCircleIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "remove-circle",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M8 12.4H17M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var RemoveIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "remove",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M5 12.5H20",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var ResetIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "reset",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M4.56189 13.5L4.14285 13.9294C4.25676 14.0406 4.41017 14.1019 4.56932 14.1C4.72847 14.098 4.88032 14.0329 4.99144 13.9189L4.56189 13.5ZM9.92427 15.9243L15.9243 9.92427L15.0757 9.07574L9.07574 15.0757L9.92427 15.9243ZM9.07574 9.92426L15.0757 15.9243L15.9243 15.0757L9.92426 9.07574L9.07574 9.92426ZM19.9 12.5C19.9 16.5869 16.5869 19.9 12.5 19.9V21.1C17.2496 21.1 21.1 17.2496 21.1 12.5H19.9ZM5.1 12.5C5.1 8.41309 8.41309 5.1 12.5 5.1V3.9C7.75035 3.9 3.9 7.75035 3.9 12.5H5.1ZM12.5 5.1C16.5869 5.1 19.9 8.41309 19.9 12.5H21.1C21.1 7.75035 17.2496 3.9 12.5 3.9V5.1ZM5.15728 13.4258C5.1195 13.1227 5.1 12.8138 5.1 12.5H3.9C3.9 12.8635 3.92259 13.2221 3.9665 13.5742L5.15728 13.4258ZM12.5 19.9C9.9571 19.9 7.71347 18.6179 6.38048 16.6621L5.38888 17.3379C6.93584 19.6076 9.54355 21.1 12.5 21.1V19.9ZM4.99144 13.9189L7.42955 11.4189L6.57045 10.5811L4.13235 13.0811L4.99144 13.9189ZM4.98094 13.0706L2.41905 10.5706L1.58095 11.4294L4.14285 13.9294L4.98094 13.0706Z",
      fill: "currentColor"
    })
  });
});
var RestoreIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "restore",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M5.88468 17C7.32466 19.1128 9.75033 20.5 12.5 20.5C16.9183 20.5 20.5 16.9183 20.5 12.5C20.5 8.08172 16.9183 4.5 12.5 4.5C8.08172 4.5 4.5 8.08172 4.5 12.5V13.5M12.5 8V12.5L15.5 15.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M7 11L4.5 13.5L2 11",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var RetrieveIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "retrieve",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M16 14L12.5 10.5L9 14M5.5 7.5H19.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M12.5 10.5L12.5 17.5M19.5 7.5V19.5H5.5V7.5L7.5 5.5H17.5L19.5 7.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var RetryIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "retry",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M19 9.5L10 9.5C7.51472 9.5 5.5 11.5147 5.5 14C5.5 16.4853 7.51472 18.5 10 18.5H19",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M15 13.5L19 9.5L15 5.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var RevertIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "revert",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M6 9.5L15 9.5C17.4853 9.5 19.5 11.5147 19.5 14C19.5 16.4853 17.4853 18.5 15 18.5H6",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M10 13.5L6 9.5L10 5.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var RobotIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "robot",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M12.5 15.5V17.5M12.5 8.5V6.5M12.5 6.5C13.3284 6.5 14 5.82843 14 5C14 4.17157 13.3284 3.5 12.5 3.5C11.6716 3.5 11 4.17157 11 5C11 5.82843 11.6716 6.5 12.5 6.5ZM20.5 20.5V19.5C20.5 18.3954 19.6046 17.5 18.5 17.5H6.5C5.39543 17.5 4.5 18.3954 4.5 19.5V20.5H20.5ZM11.5 12C11.5 12.5523 11.0523 13 10.5 13C9.94772 13 9.5 12.5523 9.5 12C9.5 11.4477 9.94772 11 10.5 11C11.0523 11 11.5 11.4477 11.5 12ZM15.5 12C15.5 12.5523 15.0523 13 14.5 13C13.9477 13 13.5 12.5523 13.5 12C13.5 11.4477 13.9477 11 14.5 11C15.0523 11 15.5 11.4477 15.5 12ZM8.5 15.5H16.5C17.6046 15.5 18.5 14.6046 18.5 13.5V10.5C18.5 9.39543 17.6046 8.5 16.5 8.5H8.5C7.39543 8.5 6.5 9.39543 6.5 10.5V13.5C6.5 14.6046 7.39543 15.5 8.5 15.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var RocketIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "rocket",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M12.5 20.5L15.5 14M11 9.49999L4.5 12.5M9 14C9 14 7.54688 14.9531 6.5 16C5.5 17 4.5 20.5 4.5 20.5C4.5 20.5 8 19.5 9 18.5C10 17.5 11 16 11 16M9 14C9 14 10.1 9.9 12.5 7.5C15.5 4.5 20.5 4.5 20.5 4.5C20.5 4.5 20.5 9.5 17.5 12.5C15.7492 14.2508 11 16 11 16L9 14ZM16.5 9.99999C16.5 10.8284 15.8284 11.5 15 11.5C14.1716 11.5 13.5 10.8284 13.5 9.99999C13.5 9.17157 14.1716 8.49999 15 8.49999C15.8284 8.49999 16.5 9.17157 16.5 9.99999Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var SchemaIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "schema",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M12.5 9.5V12.5M12.5 12.5H8.5V15.5M12.5 12.5H16.5V15.5M10.5 5.5H14.5V9.5H10.5V5.5ZM6.5 15.5H10.5V19.5H6.5V15.5ZM14.5 15.5H18.5V19.5H14.5V15.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var SearchIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "search",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M15.0355 15.0355L20 20M16.5 11.5C16.5 14.2614 14.2614 16.5 11.5 16.5C8.73858 16.5 6.5 14.2614 6.5 11.5C6.5 8.73858 8.73858 6.5 11.5 6.5C14.2614 6.5 16.5 8.73858 16.5 11.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var SelectIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "select",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M16.5 15.5L12.5 19.5L8.5 15.5M8.5 9.5L12.5 5.5L16.5 9.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var ShareIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "share",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M15 10.5H18.5V19.5H6.5L6.5 10.5H10M12.5 16V3.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M9 7L12.5 3.5L16 7",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var SortIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "sort",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M8.5 18.5V6M16.5 19V6.5M12 15L8.5 18.5L5 15M13 10L16.5 6.5L20 10",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var SparkleIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "sparkle",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M10.5 10.5C8.5 12.5 5 12.5 5 12.5C5 12.5 8.5 12.5 10.5 14.5C12.5 16.5 12.5 20 12.5 20C12.5 20 12.5 16.5 14.5 14.5C16.5 12.5 20 12.5 20 12.5C20 12.5 16.5 12.5 14.5 10.5C12.5 8.5 12.5 5 12.5 5C12.5 5 12.5 8.5 10.5 10.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var SparklesIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "sparkles",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M11 3.5V5M11 5V6.5M11 5H12.5M11 5H9.5M9.5 15C9.5 15 12.2308 14.7692 13.5 13.5C14.7692 12.2308 15 9.5 15 9.5C15 9.5 15.2308 12.2308 16.5 13.5C17.7692 14.7692 20.5 15 20.5 15C20.5 15 17.7692 15.2308 16.5 16.5C15.2308 17.7692 15 20.5 15 20.5C15 20.5 14.7692 17.7692 13.5 16.5C12.2308 15.2308 9.5 15 9.5 15ZM4.5 10C4.5 10 5.72308 9.87692 6.3 9.3C6.87692 8.72308 7 7.5 7 7.5C7 7.5 7.12308 8.72308 7.7 9.3C8.27692 9.87692 9.5 10 9.5 10C9.5 10 8.27692 10.1231 7.7 10.7C7.12308 11.2769 7 12.5 7 12.5C7 12.5 6.87692 11.2769 6.3 10.7C5.72308 10.1231 4.5 10 4.5 10Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    })
  });
});
var SpinnerIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "spinner",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M4.5 12.5C4.5 16.9183 8.08172 20.5 12.5 20.5C16.9183 20.5 20.5 16.9183 20.5 12.5C20.5 8.08172 16.9183 4.5 12.5 4.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var SplitHorizontalIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "split-horizontal",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M19.5 10.5V20.5H5.5V10.5M19.5 10.5H5.5M19.5 10.5V4.5H5.5V10.5M12.5 13V15.5M12.5 18V15.5M12.5 15.5H15M12.5 15.5H10",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var SplitVerticalIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "split-vertical",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M10.5 5.5V19.5M13 12.5H15.5M18 12.5H15.5M15.5 12.5V15M15.5 12.5V10M4.5 5.5H20.5V19.5H4.5V5.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var SquareIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "square",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("rect", {
      x: 5.5,
      y: 5.5,
      width: 14,
      height: 14,
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var StackCompactIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "stack-compact",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M5.5 15.5V18.5H19.5V15.5M5.5 15.5H19.5M5.5 15.5V9.5M19.5 15.5V9.5M5.5 9.5V6.5H19.5V9.5M5.5 9.5H19.5M5.5 12.5H19.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var StackIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "stack",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M5.5 12.5H19.5M5.5 18.5H19.5V6.5H5.5V18.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var StarIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "star",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M13 4L15.2747 9.8691L21.5595 10.2188L16.6806 14.1959L18.2901 20.2812L13 16.87L7.70993 20.2812L9.31941 14.1959L4.44049 10.2188L10.7253 9.8691L13 4Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var StopIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "stop",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("rect", {
      x: 7.5,
      y: 7.5,
      width: 10,
      height: 10,
      fill: "currentColor",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var StrikethroughIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "strikethrough",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M12.5656 7.73438C11.0656 7.73438 10.0734 8.48438 10.0734 9.625C10.0734 10.2317 10.3649 10.6613 11.0519 11H8.90358C8.71703 10.6199 8.62813 10.1801 8.62813 9.67188C8.62813 7.75781 10.2297 6.46094 12.6125 6.46094C14.7922 6.46094 16.4172 7.75781 16.5344 9.57812H15.1203C14.925 8.42188 13.9719 7.73438 12.5656 7.73438Z",
      fill: "currentColor"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M12.4875 18.2656C10.0969 18.2656 8.44844 17 8.3 15.0547H9.72188C9.89375 16.2344 11.0188 16.9844 12.6203 16.9844C14.1359 16.9844 15.2531 16.1641 15.2531 15.0469C15.2531 14.6375 15.1255 14.292 14.8589 14H16.5912C16.6638 14.266 16.6984 14.5566 16.6984 14.875C16.6984 16.9453 15.0656 18.2656 12.4875 18.2656Z",
      fill: "currentColor"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M7 13.1H18V11.9H7V13.1Z",
      fill: "currentColor"
    })]
  });
});
var StringIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "string",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M11.6748 15.5227H13.1855L9.87842 6.36304H8.34863L5.0415 15.5227H6.50146L7.3457 13.0916H10.8369L11.6748 15.5227ZM9.04053 8.02612H9.14844L10.4751 11.8982H7.70752L9.04053 8.02612Z",
      fill: "currentColor"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M16.8101 14.488C16.0674 14.488 15.5278 14.1262 15.5278 13.5042C15.5278 12.8948 15.9595 12.571 16.9116 12.5076L18.6001 12.3997V12.9773C18.6001 13.8342 17.8384 14.488 16.8101 14.488ZM16.4609 15.637C17.3687 15.637 18.124 15.2434 18.5366 14.5515H18.6445V15.5227H19.9585V10.8C19.9585 9.34009 18.981 8.47681 17.248 8.47681C15.6802 8.47681 14.563 9.23853 14.4233 10.4255H15.7437C15.896 9.93677 16.4229 9.65747 17.1846 9.65747C18.1177 9.65747 18.6001 10.0701 18.6001 10.8V11.3967L16.7275 11.5046C15.0835 11.6062 14.1567 12.3235 14.1567 13.5676C14.1567 14.8308 15.1279 15.637 16.4609 15.637Z",
      fill: "currentColor"
    }), (0, import_jsx_runtime3.jsx)("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M19.9585 18.637L5.0415 18.637V17.437L19.9585 17.437V18.637Z",
      fill: "currentColor"
    })]
  });
});
var SunIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "sun",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M19 12.5H22M3 12.5H6M12.5 6V3M12.5 22V19M17.3891 7.61091L19.5104 5.48959M5.48959 19.5104L7.61091 17.3891M7.61091 7.61091L5.48959 5.48959M19.5104 19.5104L17.3891 17.3891M16 12.5C16 14.433 14.433 16 12.5 16C10.567 16 9 14.433 9 12.5C9 10.567 10.567 9 12.5 9C14.433 9 16 10.567 16 12.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var SyncIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "sync",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M13.5 4.5H12.5C8.08172 4.5 4.5 8.08172 4.5 12.5C4.5 15.6631 6.33576 18.3975 9 19.6958M11.5 20.5H12.5C16.9183 20.5 20.5 16.9183 20.5 12.5C20.5 9.33688 18.6642 6.60253 16 5.30423",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M14 17.5619L11.5 20.5L14.5 23.0619M11 7.43811L13.5 4.50001L10.5 1.93811",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var TabletDeviceIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "tablet-device",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M5.5 5.5C5.5 4.94772 5.94772 4.5 6.5 4.5H18.5C19.0523 4.5 19.5 4.94772 19.5 5.5V19.5C19.5 20.0523 19.0523 20.5 18.5 20.5H6.5C5.94772 20.5 5.5 20.0523 5.5 19.5V5.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M13 18C13 18.2761 12.7761 18.5 12.5 18.5C12.2239 18.5 12 18.2761 12 18C12 17.7239 12.2239 17.5 12.5 17.5C12.7761 17.5 13 17.7239 13 18Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var TagIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "tag",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M12.5 20L5 20L5 12.5L12.5 5L20 12.5L12.5 20Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M11 15.5C11 16.3284 10.3284 17 9.5 17C8.67157 17 8 16.3284 8 15.5C8 14.6716 8.67157 14 9.5 14C10.3284 14 11 14.6716 11 15.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var TagsIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "tags",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M12.1562 7.93179L13.9717 6.11633L20.3553 12.5L13.9717 18.8836L10.6855 18.8836M11.0283 18.8836L17.4119 12.5L11.0283 6.11633L4.64462 12.5L4.64462 18.8836L11.0283 18.8836ZM9.75153 15.0534C9.75153 15.7585 9.17992 16.3302 8.47481 16.3302C7.76969 16.3302 7.19808 15.7585 7.19808 15.0534C7.19808 14.3483 7.76969 13.7767 8.47481 13.7767C9.17992 13.7767 9.75153 14.3483 9.75153 15.0534Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var TaskIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "task",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M4.88281 10.75V19.75H20.8828V10.75M4.88281 10.75V5.75H20.8828V10.75M4.88281 10.75H12.8828H20.8828M17.8828 8.25V3.25M7.88281 8.25V3.25",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M10.083 14.7358L12.083 16.7358L15.683 13.1758",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var TerminalIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "terminal",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M8.5 9.5L11.5 12.5L8.5 15.5M13 15.5H17M5.5 6.5H19.5V18.5H5.5V6.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var TextIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "text",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M7.5 9V6.5H17.5V9M12.5 18.5V6.5M10 18.5H15",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var ThLargeIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "th-large",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M12.5 6.5V12.5M12.5 12.5V18.5M12.5 12.5H20.5M12.5 12.5H4.5M4.5 6.5H20.5V18.5H4.5V6.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var ThListIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "th-list",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M9.5 6.5V10.5M9.5 10.5V14.5M9.5 10.5H20.5M9.5 10.5H4.5M9.5 14.5V18.5M9.5 14.5H20.5M9.5 14.5H4.5M4.5 6.5H20.5V18.5H4.5V6.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var TiersIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "tiers",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M16.5 14.5L20.5 16.5L12.5 20.5L4.5 16.5L8.5 14.5M16.5 10.5L20.5 12.5L12.5 16.5L4.5 12.5L8.5 10.5M12.5 12.5L20.5 8.5L12.5 4.5L4.5 8.5L12.5 12.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var ToggleArrowRightIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "toggle-arrow-right",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M10 16.5V8.5L16 12.5L10 16.5Z",
      fill: "currentColor",
      stroke: "currentColor",
      strokeLinejoin: "round"
    })
  });
});
var TokenIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "token",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M17.5711 12.5C17.5711 15.2614 15.3325 17.5 12.5711 17.5M7.57107 12.5C7.57107 9.73858 9.80964 7.5 12.5711 7.5M20.5 12.5C20.5 16.9183 16.9183 20.5 12.5 20.5C8.08172 20.5 4.5 16.9183 4.5 12.5C4.5 8.08172 8.08172 4.5 12.5 4.5C16.9183 4.5 20.5 8.08172 20.5 12.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var TransferIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "transfer",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M19.5 16.5H6M5.5 8.5L19 8.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M16 13L19.5 16.5L16 20M9 12L5.5 8.5L9 5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var TranslateIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "translate",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M9.4 5.4H4V6.6H13.2189C13.1612 6.78478 13.0895 6.99578 13.0025 7.22211C12.7032 8.00031 12.2402 8.91125 11.5757 9.57574L10 11.1515L9.42426 10.5757C8.72102 9.8725 8.25297 9.16987 7.96199 8.64611C7.81668 8.38455 7.71617 8.16874 7.65305 8.02146C7.62151 7.94787 7.59937 7.89154 7.5857 7.85534C7.57886 7.83725 7.57415 7.8242 7.57144 7.81657L7.56886 7.80922C7.56886 7.80922 7.56921 7.81026 7 8C6.43079 8.18974 6.43091 8.19009 6.43091 8.19009L6.43133 8.19135L6.43206 8.19351L6.4341 8.19948L6.44052 8.21786C6.44587 8.23292 6.45336 8.25357 6.46313 8.27942C6.48266 8.33112 6.5113 8.40369 6.55008 8.49416C6.62758 8.67501 6.74582 8.92795 6.91301 9.22889C7.24703 9.83013 7.77898 10.6275 8.57574 11.4243L9.15147 12L4.57964 16.5718L4.57655 16.5749L4.57577 16.5757L5.4243 17.4242L5.42688 17.4216L10.0368 12.8117L12.6159 14.9609L13.3841 14.0391L10.8888 11.9597L12.4243 10.4243C13.2598 9.58875 13.7968 8.49969 14.1225 7.65289C14.2818 7.23863 14.395 6.87072 14.4696 6.6H16V5.4H10.6V4H9.4V5.4ZM17.4405 10L21.553 19.7672H20.2509L19.1279 17.1H14.8721L13.7491 19.7672H12.447L16.5595 10H17.4405ZM15.3773 15.9H18.6227L17 12.0462L15.3773 15.9Z",
      fill: "currentColor"
    })
  });
});
var TrashIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "trash",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M5 6.5H20M10 6.5V4.5C10 3.94772 10.4477 3.5 11 3.5H14C14.5523 3.5 15 3.94772 15 4.5V6.5M12.5 9V17M15.5 9L15 17M9.5 9L10 17M18.5 6.5L17.571 18.5767C17.5309 19.0977 17.0965 19.5 16.574 19.5H8.42603C7.90349 19.5 7.46905 19.0977 7.42898 18.5767L6.5 6.5H18.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var TrendUpwardIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "trend-upward",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M4.5 18.5L11.5 10.5L13.5 14.5L20.5 6.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M20.5 11V6.5H16",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var TriangleOutlineIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "triangle-outline",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M20.5 18.5H4.5L12.5 5.5L20.5 18.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var TrolleyIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "trolley",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M8 17.5L5.81763 6.26772C5.71013 5.81757 5.30779 5.5 4.84498 5.5H3M8 17.5H17M8 17.5C8.82843 17.5 9.5 18.1716 9.5 19C9.5 19.8284 8.82843 20.5 8 20.5C7.17157 20.5 6.5 19.8284 6.5 19C6.5 18.1716 7.17157 17.5 8 17.5ZM17 17.5C17.8284 17.5 18.5 18.1716 18.5 19C18.5 19.8284 17.8284 20.5 17 20.5C16.1716 20.5 15.5 19.8284 15.5 19C15.5 18.1716 16.1716 17.5 17 17.5ZM7.78357 14.5H17.5L19 7.5H6",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var TruncateIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "truncate",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M5 12.5H20M8.5 19.5L12.5 15.5L16.5 19.5M16.5 5.5L12.5 9.5L8.5 5.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var TwitterIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "twitter",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M18.8738 6.65751C18.1994 5.9447 17.2445 5.5 16.1857 5.5C14.1423 5.5 12.4857 7.15655 12.4857 9.2C12.4857 9.55263 12.535 9.89374 12.6272 10.2168C7.0826 9.56422 4.55703 6.02857 4.55703 6.02857C4.55703 6.02857 4.02846 9.2 6.14274 11.3143C5.08571 11.3143 4.55703 10.7857 4.55703 10.7857C4.55703 10.7857 4.55703 13.4286 7.19989 14.4857C6.67143 15.0143 5.61417 14.4857 5.61417 14.4857C5.97533 15.9303 7.45606 16.8562 8.82133 17.1358C6.67298 19.1676 3.5 18.7143 3.5 18.7143C5.14562 19.771 7.21334 20.3 9.31429 20.3C16.1214 20.3 19.8162 15.6315 19.8848 9.37762C20.8722 8.58943 22 7.08571 22 7.08571C22 7.08571 21.277 7.45458 19.6913 7.98315C21.277 6.92601 21.4714 5.5 21.4714 5.5C21.4714 5.5 20.4135 6.55789 18.8738 6.65751Z",
      fill: "currentColor"
    })
  });
});
var UlistIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "ulist",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M7.10153 17.5001C7.10153 17.8323 6.83221 18.1016 6.5 18.1016C6.16778 18.1016 5.89847 17.8323 5.89847 17.5001C5.89847 17.1678 6.16778 16.8985 6.5 16.8985C6.83221 16.8985 7.10153 17.1678 7.10153 17.5001Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M7.10153 7.5C7.10153 7.83221 6.83221 8.10153 6.5 8.10153C6.16778 8.10153 5.89847 7.83221 5.89847 7.5C5.89847 7.16778 6.16778 6.89847 6.5 6.89847C6.83221 6.89847 7.10153 7.16778 7.10153 7.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M7.10153 12.5C7.10153 12.8322 6.83221 13.1015 6.5 13.1015C6.16778 13.1015 5.89847 12.8322 5.89847 12.5C5.89847 12.1678 6.16778 11.8985 6.5 11.8985C6.83221 11.8985 7.10153 12.1678 7.10153 12.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M10 7.5H19M10 17.5H19M10 12.5H19",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var UnderlineIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "underline",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M9.52791 7.11407H8.17V14.2582C8.17 16.5817 9.79195 18.2565 12.4927 18.2565C15.1934 18.2565 16.8154 16.5817 16.8154 14.2582V7.11407H15.4574V14.1677C15.4574 15.8122 14.3787 17.0042 12.4927 17.0042C10.6067 17.0042 9.52791 15.8122 9.52791 14.1677V7.11407Z",
      fill: "currentColor"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M7 20.5H18",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var UndoIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "undo",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M6 9.5L15 9.5C17.4853 9.5 19.5 11.5147 19.5 14C19.5 16.4853 17.4853 18.5 15 18.5H6",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M10 13.5L6 9.5L10 5.5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var UnknownIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "unknown",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M12.5 13C12.5 11 14 11.5 14 10C14 9.34375 13.5 8.5 12.5 8.5C11.5 8.5 11 9 10.5 9.5M12.5 16V14.5M5.5 5.5H19.5V19.5H5.5V5.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var UnlockIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "unlock",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M9.5 11.5V8.5C9.5 6.5 8 5.5 6.5 5.5C5 5.5 3.5 6.5 3.5 8.5V11.5M7.5 11.5H17.5V19.5H7.5V11.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var UnpublishIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "unpublish",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M5 19.5H20M12.5 16V5",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M17.5 11L12.5 16L7.5 11",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var UploadIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsxs)("svg", {
    "data-sanity-icon": "upload",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: [(0, import_jsx_runtime3.jsx)("path", {
      d: "M12.5 6.00003V15.5M5.5 15.5H19.5V19.5H5.5V15.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    }), (0, import_jsx_runtime3.jsx)("path", {
      d: "M7.5 11L12.5 6.00003L17.5 11",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })]
  });
});
var UserIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "user",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M8 14.5C7 15 5.5 16 5.5 19.5H19.5C19.5 16 18.3416 15.1708 17 14.5C16 14 14 14 14 12.5C14 11 15 10.25 15 8.25C15 6.25 14 5.25 12.5 5.25C11 5.25 10 6.25 10 8.25C10 10.25 11 11 11 12.5C11 14 9 14 8 14.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var UsersIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "users",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M17.5 18.5H21.5C21.5 15 20.8416 14.1708 19.5 13.5C18.5 13 16.5 12.5 16.5 11C16.5 9.5 17.5 9 17.5 7C17.5 5 16.5 4 15 4C13.6628 4 12.723 4.79472 12.5347 6.38415M4.5 20.5C4.5 17 5.5 16 6.5 15.5C7.5 15 9.5 14.5 9.5 13C9.5 11.5 8.5 11 8.5 9C8.5 7 9.5 6 11 6C12.5 6 13.5 7 13.5 9C13.5 11 12.5 11.5 12.5 13C12.5 14.5 14.5 15 15.5 15.5C16.8416 16.1708 17.5 17 17.5 20.5H4.5Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var WarningFilledIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "warning-filled",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M14.741 5.12637C13.7357 3.41737 11.2643 3.41737 10.259 5.12637L3.7558 16.1818C2.73624 17.915 3.98595 20.1 5.99683 20.1H19.0032C21.014 20.1 22.2637 17.915 21.2442 16.1818L14.741 5.12637ZM11.9 9V13H13.1V9H11.9ZM13.1 16V14.5H11.9V16H13.1Z",
      fill: "currentColor"
    })
  });
});
var WarningOutlineIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "warning-outline",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M12.5 9V13M12.5 16V14.5M14.2239 5.43058L20.727 16.486C21.5113 17.8192 20.55 19.5 19.0032 19.5H5.99683C4.45 19.5 3.48869 17.8192 4.27297 16.486L10.7761 5.43058C11.5494 4.11596 13.4506 4.11596 14.2239 5.43058Z",
      stroke: "currentColor",
      strokeWidth: 1.2,
      strokeLinejoin: "round"
    })
  });
});
var WrenchIcon2 = (0, import_react48.forwardRef)(function(props, ref) {
  return (0, import_jsx_runtime3.jsx)("svg", {
    "data-sanity-icon": "wrench",
    width: "1em",
    height: "1em",
    viewBox: "0 0 25 25",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref,
    ...props,
    children: (0, import_jsx_runtime3.jsx)("path", {
      d: "M17.0407 5.14624L17.4649 5.57051C17.6166 5.41887 17.6757 5.19783 17.6202 4.99071C17.5646 4.78359 17.4027 4.62189 17.1955 4.56656L17.0407 5.14624ZM14.4013 7.7856L13.977 7.36134C13.8288 7.50959 13.7687 7.72447 13.8185 7.92813L14.4013 7.7856ZM12.8778 6.26211L12.4535 5.83784V5.83784L12.8778 6.26211ZM11.8309 10.6568L12.2552 11.0811C12.4152 10.9211 12.4716 10.6847 12.401 10.4697L11.8309 10.6568ZM5.63925 16.8485L5.21498 16.4242H5.21498L5.63925 16.8485ZM5.63925 19.935L6.06351 19.5108H6.06351L5.63925 19.935ZM8.72581 19.935L9.15007 20.3593L8.72581 19.935ZM15.1184 13.5425L15.2301 12.953C15.0351 12.916 14.8344 12.9779 14.6941 13.1182L15.1184 13.5425ZM18.9718 12.3561L19.3961 12.7804L18.9718 12.3561ZM20.0877 8.19324L20.6674 8.03843C20.612 7.83125 20.4503 7.66934 20.2432 7.61375C20.0361 7.55816 19.815 7.61734 19.6634 7.76898L20.0877 8.19324ZM17.4483 10.8326L17.3058 11.4154C17.5094 11.4652 17.7243 11.4051 17.8726 11.2569L17.4483 10.8326ZM15 10.2339L14.4172 10.3764C14.4704 10.5938 14.6401 10.7635 14.8575 10.8167L15 10.2339ZM16.6164 4.72198L13.977 7.36134L14.8256 8.20986L17.4649 5.57051L16.6164 4.72198ZM13.3021 6.68637C14.2723 5.71612 15.6467 5.39501 16.8859 5.72593L17.1955 4.56656C15.5595 4.12966 13.7389 4.55245 12.4535 5.83784L13.3021 6.68637ZM12.401 10.4697C11.9779 9.18109 12.2794 7.70907 13.3021 6.68637L12.4535 5.83784C11.0985 7.19284 10.7021 9.14218 11.2608 10.844L12.401 10.4697ZM11.4066 10.2326L5.21498 16.4242L6.06351 17.2727L12.2552 11.0811L11.4066 10.2326ZM5.21498 16.4242C4.12834 17.5109 4.12834 19.2727 5.21498 20.3593L6.06351 19.5108C5.4455 18.8928 5.4455 17.8908 6.06351 17.2727L5.21498 16.4242ZM5.21498 20.3593C6.30163 21.446 8.06343 21.446 9.15007 20.3593L8.30155 19.5108C7.68353 20.1288 6.68153 20.1288 6.06351 19.5108L5.21498 20.3593ZM9.15007 20.3593L15.5426 13.9668L14.6941 13.1182L8.30155 19.5108L9.15007 20.3593ZM18.5475 11.9318C17.6463 12.8331 16.3968 13.1742 15.2301 12.953L15.0066 14.132C16.5466 14.4239 18.2023 13.9741 19.3961 12.7804L18.5475 11.9318ZM19.508 8.34804C19.8389 9.58721 19.5178 10.9616 18.5475 11.9318L19.3961 12.7804C20.6815 11.495 21.1043 9.67445 20.6674 8.03843L19.508 8.34804ZM17.8726 11.2569L20.5119 8.6175L19.6634 7.76898L17.024 10.4083L17.8726 11.2569ZM14.8575 10.8167L17.3058 11.4154L17.5908 10.2498L15.1426 9.65106L14.8575 10.8167ZM13.8185 7.92813L14.4172 10.3764L15.5829 10.0914L14.9841 7.64307L13.8185 7.92813Z",
      fill: "currentColor"
    })
  });
});
var icons2 = {
  "access-denied": AccessDeniedIcon2,
  activity: ActivityIcon2,
  "add-circle": AddCircleIcon2,
  "add-comment": AddCommentIcon2,
  add: AddIcon2,
  api: ApiIcon2,
  archive: ArchiveIcon2,
  "arrow-down": ArrowDownIcon2,
  "arrow-left": ArrowLeftIcon2,
  "arrow-right": ArrowRightIcon2,
  "arrow-top-right": ArrowTopRightIcon2,
  "arrow-up": ArrowUpIcon2,
  asterisk: AsteriskIcon2,
  "bar-chart": BarChartIcon2,
  basket: BasketIcon2,
  bell: BellIcon2,
  bill: BillIcon2,
  "binary-document": BinaryDocumentIcon2,
  "block-content": BlockContentIcon2,
  "block-element": BlockElementIcon2,
  blockquote: BlockquoteIcon2,
  bold: BoldIcon2,
  bolt: BoltIcon2,
  book: BookIcon2,
  bottle: BottleIcon2,
  "bulb-filled": BulbFilledIcon2,
  "bulb-outline": BulbOutlineIcon2,
  calendar: CalendarIcon2,
  case: CaseIcon2,
  "chart-upward": ChartUpwardIcon2,
  "checkmark-circle": CheckmarkCircleIcon2,
  checkmark: CheckmarkIcon2,
  "chevron-down": ChevronDownIcon2,
  "chevron-left": ChevronLeftIcon2,
  "chevron-right": ChevronRightIcon2,
  "chevron-up": ChevronUpIcon2,
  circle: CircleIcon2,
  clipboard: ClipboardIcon2,
  "clipboard-image": ClipboardImageIcon2,
  clock: ClockIcon2,
  "close-circle": CloseCircleIcon2,
  close: CloseIcon2,
  "code-block": CodeBlockIcon2,
  code: CodeIcon2,
  cog: CogIcon2,
  collapse: CollapseIcon2,
  "color-wheel": ColorWheelIcon2,
  comment: CommentIcon2,
  component: ComponentIcon2,
  compose: ComposeIcon2,
  confetti: ConfettiIcon2,
  controls: ControlsIcon2,
  copy: CopyIcon2,
  "credit-card": CreditCardIcon2,
  crop: CropIcon2,
  cube: CubeIcon2,
  dashboard: DashboardIcon2,
  database: DatabaseIcon2,
  desktop: DesktopIcon2,
  diamond: DiamondIcon2,
  document: DocumentIcon2,
  "document-pdf": DocumentPdfIcon2,
  "document-remove": DocumentRemoveIcon2,
  "document-sheet": DocumentSheetIcon2,
  "document-text": DocumentTextIcon2,
  "document-video": DocumentVideoIcon2,
  "document-word": DocumentWordIcon2,
  "document-zip": DocumentZipIcon2,
  documents: DocumentsIcon2,
  dot: DotIcon2,
  "double-chevron-down": DoubleChevronDownIcon2,
  "double-chevron-left": DoubleChevronLeftIcon2,
  "double-chevron-right": DoubleChevronRightIcon2,
  "double-chevron-up": DoubleChevronUpIcon2,
  download: DownloadIcon2,
  "drag-handle": DragHandleIcon2,
  drop: DropIcon2,
  "earth-americas": EarthAmericasIcon2,
  "earth-globe": EarthGlobeIcon2,
  edit: EditIcon2,
  "ellipsis-horizontal": EllipsisHorizontalIcon2,
  "ellipsis-vertical": EllipsisVerticalIcon2,
  enter: EnterIcon2,
  "enter-right": EnterRightIcon2,
  envelope: EnvelopeIcon2,
  equal: EqualIcon2,
  "error-filled": ErrorFilledIcon2,
  "error-outline": ErrorOutlineIcon2,
  expand: ExpandIcon2,
  "eye-closed": EyeClosedIcon2,
  "eye-open": EyeOpenIcon2,
  filter: FilterIcon2,
  folder: FolderIcon2,
  generate: GenerateIcon2,
  groq: GroqIcon2,
  hash: HashIcon2,
  "heart-filled": HeartFilledIcon2,
  heart: HeartIcon2,
  "help-circle": HelpCircleIcon2,
  highlight: HighlightIcon2,
  home: HomeIcon2,
  "ice-cream": IceCreamIcon2,
  image: ImageIcon2,
  "image-remove": ImageRemoveIcon2,
  images: ImagesIcon2,
  "info-filled": InfoFilledIcon2,
  "info-outline": InfoOutlineIcon2,
  "inline-element": InlineElementIcon2,
  inline: InlineIcon2,
  "insert-above": InsertAboveIcon2,
  "insert-below": InsertBelowIcon2,
  italic: ItalicIcon2,
  joystick: JoystickIcon2,
  json: JsonIcon2,
  launch: LaunchIcon2,
  leave: LeaveIcon2,
  lemon: LemonIcon2,
  link: LinkIcon2,
  "link-removed": LinkRemovedIcon2,
  lock: LockIcon2,
  "logo-js": LogoJsIcon2,
  "logo-ts": LogoTsIcon2,
  "master-detail": MasterDetailIcon2,
  menu: MenuIcon2,
  "mobile-device": MobileDeviceIcon2,
  moon: MoonIcon2,
  number: NumberIcon2,
  "ok-hand": OkHandIcon2,
  olist: OlistIcon2,
  overage: OverageIcon2,
  package: PackageIcon2,
  "panel-left": PanelLeftIcon2,
  "panel-right": PanelRightIcon2,
  pause: PauseIcon2,
  pin: PinIcon2,
  "pin-removed": PinRemovedIcon2,
  play: PlayIcon2,
  plug: PlugIcon2,
  presentation: PresentationIcon2,
  projects: ProjectsIcon2,
  publish: PublishIcon2,
  "read-only": ReadOnlyIcon2,
  redo: RedoIcon2,
  refresh: RefreshIcon2,
  "remove-circle": RemoveCircleIcon2,
  remove: RemoveIcon2,
  reset: ResetIcon2,
  restore: RestoreIcon2,
  retrieve: RetrieveIcon2,
  retry: RetryIcon2,
  revert: RevertIcon2,
  robot: RobotIcon2,
  rocket: RocketIcon2,
  schema: SchemaIcon2,
  search: SearchIcon2,
  select: SelectIcon2,
  share: ShareIcon2,
  sort: SortIcon2,
  sparkle: SparkleIcon2,
  sparkles: SparklesIcon2,
  spinner: SpinnerIcon2,
  "split-horizontal": SplitHorizontalIcon2,
  "split-vertical": SplitVerticalIcon2,
  square: SquareIcon2,
  "stack-compact": StackCompactIcon2,
  stack: StackIcon2,
  star: StarIcon2,
  stop: StopIcon2,
  strikethrough: StrikethroughIcon2,
  string: StringIcon2,
  sun: SunIcon2,
  sync: SyncIcon2,
  "tablet-device": TabletDeviceIcon2,
  tag: TagIcon2,
  tags: TagsIcon2,
  task: TaskIcon2,
  terminal: TerminalIcon2,
  text: TextIcon2,
  "th-large": ThLargeIcon2,
  "th-list": ThListIcon2,
  tiers: TiersIcon2,
  "toggle-arrow-right": ToggleArrowRightIcon2,
  token: TokenIcon2,
  transfer: TransferIcon2,
  translate: TranslateIcon2,
  trash: TrashIcon2,
  "trend-upward": TrendUpwardIcon2,
  "triangle-outline": TriangleOutlineIcon2,
  trolley: TrolleyIcon2,
  truncate: TruncateIcon2,
  twitter: TwitterIcon2,
  ulist: UlistIcon2,
  underline: UnderlineIcon2,
  undo: UndoIcon2,
  unknown: UnknownIcon2,
  unlock: UnlockIcon2,
  unpublish: UnpublishIcon2,
  upload: UploadIcon2,
  user: UserIcon2,
  users: UsersIcon2,
  "warning-filled": WarningFilledIcon2,
  "warning-outline": WarningOutlineIcon2,
  wrench: WrenchIcon2
};
(0, import_react48.forwardRef)(function(props, ref) {
  const {
    symbol,
    ...restProps
  } = props, iconComponent = icons2[symbol];
  return iconComponent ? (0, import_react48.createElement)(iconComponent, {
    ...restProps,
    ref
  }) : null;
});
function ProgressBar(_ref4) {
  let {
    progress: progress2
  } = _ref4;
  if (typeof progress2 === "undefined") {
    console.warn("No progress prop passed to ProgressBar");
    return null;
  }
  return (0, import_jsx_runtime3.jsxs)(Card, {
    border: true,
    radius: 2,
    style: {
      width: "100%",
      position: "relative"
    },
    children: [(0, import_jsx_runtime3.jsx)(Flex, {
      style: {
        position: "absolute",
        left: 0,
        right: 0,
        top: 0,
        bottom: 0,
        zIndex: 1
      },
      align: "center",
      justify: "center",
      children: (0, import_jsx_runtime3.jsxs)(Label, {
        size: 1,
        children: [progress2, "%"]
      })
    }), (0, import_jsx_runtime3.jsx)(Card, {
      style: {
        width: "100%",
        transform: "scaleX(".concat(progress2 / 100, ")"),
        transformOrigin: "left",
        transition: "transform .2s ease",
        boxSizing: "border-box"
      },
      padding: 2,
      tone: "positive"
    })]
  });
}
var LanguageStatus = (_ref5) => {
  let {
    title,
    progress: progress2,
    importFile
  } = _ref5;
  const [isBusy, setIsBusy] = (0, import_react48.useState)(false);
  const handleImport = (0, import_react48.useCallback)(async () => {
    setIsBusy(true);
    await importFile();
    setIsBusy(false);
  }, [importFile, setIsBusy]);
  return (0, import_jsx_runtime3.jsx)(Card, {
    shadow: 1,
    children: (0, import_jsx_runtime3.jsxs)(Grid, {
      columns: 5,
      gap: 3,
      padding: 3,
      children: [(0, import_jsx_runtime3.jsx)(Flex, {
        columnStart: 1,
        columnEnd: 3,
        align: "center",
        children: (0, import_jsx_runtime3.jsx)(Text, {
          weight: "bold",
          size: 1,
          children: title
        })
      }), typeof progress2 === "number" ? (0, import_jsx_runtime3.jsx)(Flex, {
        columnStart: 3,
        columnEnd: 5,
        align: "center",
        children: (0, import_jsx_runtime3.jsx)(ProgressBar, {
          progress: progress2
        })
      }) : null, (0, import_jsx_runtime3.jsx)(Box, {
        columnStart: 5,
        columnEnd: 6,
        children: (0, import_jsx_runtime3.jsx)(Button, {
          style: {
            width: "100%"
          },
          mode: "ghost",
          onClick: handleImport,
          text: isBusy ? "Importing..." : "Import",
          icon: isBusy ? null : DownloadIcon2,
          disabled: isBusy || !progress2 || progress2 < 1
        })
      })]
    })
  });
};
var getLocale = (localeId, locales) => locales.find((l) => l.localeId === localeId);
var TaskView = (_ref6) => {
  let {
    task,
    locales,
    refreshTask
  } = _ref6;
  const context = (0, import_react48.useContext)(TranslationContext);
  const toast = useToast();
  const [isRefreshing, setIsRefreshing] = (0, import_react48.useState)(false);
  const importFile = (0, import_react48.useCallback)(async (localeId) => {
    if (!context) {
      toast.push({
        title: "Missing context, unable to import translation. Try refreshing or clicking away from this tab and back.",
        status: "error",
        closable: true
      });
      return;
    }
    const locale = getLocale(localeId, locales);
    const localeTitle = (locale == null ? void 0 : locale.description) || localeId;
    try {
      const translation = await context.adapter.getTranslation(task.taskId, localeId, context.secrets);
      const sanityId = context.localeIdAdapter ? await context.localeIdAdapter(localeId) : localeId;
      await context.importTranslation(sanityId, translation);
      toast.push({
        title: "Imported ".concat(localeTitle, " translation"),
        status: "success",
        closable: true
      });
    } catch (err) {
      let errorMsg;
      if (err instanceof Error) {
        errorMsg = err.message;
      } else {
        errorMsg = err ? String(err) : null;
      }
      toast.push({
        title: "Error getting ".concat(localeTitle, " translation"),
        description: errorMsg,
        status: "error",
        closable: true
      });
    }
  }, [locales, context, task.taskId, toast]);
  const handleRefreshClick = (0, import_react48.useCallback)(async () => {
    setIsRefreshing(true);
    await refreshTask();
    setIsRefreshing(false);
  }, [refreshTask, setIsRefreshing]);
  return (0, import_jsx_runtime3.jsxs)(Stack, {
    space: 4,
    children: [(0, import_jsx_runtime3.jsxs)(Flex, {
      align: "center",
      justify: "space-between",
      children: [(0, import_jsx_runtime3.jsx)(Text, {
        as: "h2",
        weight: "semibold",
        size: 2,
        children: "Current Job Progress"
      }), (0, import_jsx_runtime3.jsxs)(Flex, {
        gap: 3,
        children: [task.linkToVendorTask && (0, import_jsx_runtime3.jsx)(Button, {
          as: "a",
          text: "View Job",
          iconRight: ArrowTopRightIcon2,
          href: task.linkToVendorTask,
          target: "_blank",
          rel: "noreferrer noopener",
          fontSize: 1,
          padding: 2,
          mode: "bleed"
        }), (0, import_jsx_runtime3.jsx)(Button, {
          fontSize: 1,
          padding: 2,
          text: isRefreshing ? "Refreshing" : "Refresh Status",
          onClick: handleRefreshClick,
          disabled: isRefreshing
        })]
      })]
    }), (0, import_jsx_runtime3.jsx)(Box, {
      children: task.locales.map((localeTask) => {
        const reportPercent = localeTask.progress || 0;
        const locale = getLocale(localeTask.localeId, locales);
        return (0, import_jsx_runtime3.jsx)(LanguageStatus, {
          importFile: async () => {
            await importFile(localeTask.localeId);
          },
          title: (locale == null ? void 0 : locale.description) || localeTask.localeId,
          progress: reportPercent
        }, [task.taskId, localeTask.localeId].join("."));
      })
    })]
  });
};
var TranslationView = () => {
  const [locales, setLocales] = (0, import_react48.useState)([]);
  const [task, setTask] = (0, import_react48.useState)(null);
  const context = (0, import_react48.useContext)(TranslationContext);
  const toast = useToast();
  (0, import_react48.useEffect)(() => {
    function fetchData() {
      if (!context) {
        toast.push({
          title: "Unable to load translation data: missing context",
          status: "error",
          closable: true
        });
        return;
      }
      context.adapter.getLocales(context.secrets).then(setLocales).then(() => context == null ? void 0 : context.adapter.getTranslationTask(context.documentId, context.secrets)).then(setTask).catch((err) => {
        let errorMsg;
        if (err instanceof Error) {
          errorMsg = err.message;
        } else {
          errorMsg = err ? String(err) : null;
        }
        toast.push({
          title: "Error creating translation job",
          description: errorMsg,
          status: "error",
          closable: true
        });
      });
    }
    fetchData();
  }, [context, toast]);
  const refreshTask = (0, import_react48.useCallback)(async () => {
    await (context == null ? void 0 : context.adapter.getTranslationTask(context.documentId, context.secrets).then(setTask));
  }, [context, setTask]);
  return (0, import_jsx_runtime3.jsxs)(Stack, {
    space: 6,
    children: [(0, import_jsx_runtime3.jsx)(NewTask, {
      locales,
      refreshTask
    }), task && (0, import_jsx_runtime3.jsx)(TaskView, {
      task,
      locales,
      refreshTask
    })]
  });
};
var useClient2 = () => {
  return useClient({
    apiVersion: "2022-12-07"
  });
};
function useSecrets(id3) {
  const [loading, setLoading] = (0, import_react48.useState)(true);
  const [secrets, setSecrets] = (0, import_react48.useState)(null);
  const client = useClient2();
  (0, import_react48.useEffect)(() => {
    function fetchData() {
      client.fetch("* [_id == $id][0]", {
        id: id3
      }).then((doc) => {
        const result = {};
        for (const key2 in doc) {
          if (key2[0] !== "_") {
            result[key2] = doc[key2];
          }
        }
        setSecrets(result);
        setLoading(false);
      });
    }
    fetchData();
  }, [id3, client]);
  return {
    loading,
    secrets
  };
}
var TranslationTab = (props) => {
  const {
    displayed
  } = props.document;
  const client = useClient2();
  const schema = useSchema();
  const documentId = displayed && displayed._id ? displayed._id.split("drafts.").pop() : "";
  const {
    errors,
    importTranslation,
    exportForTranslation
  } = (0, import_react48.useMemo)(() => {
    const {
      serializationOptions,
      baseLanguage,
      languageField,
      mergeWithTargetLocale
    } = props.options;
    const ctx = {
      client,
      schema
    };
    const allErrors = [];
    const importTranslationFunc = props.options.importTranslation;
    if (!importTranslationFunc) {
      allErrors.push({
        key: randomKey(12),
        text: (0, import_jsx_runtime3.jsxs)(import_jsx_runtime3.Fragment, {
          children: ["You need to provide an ", (0, import_jsx_runtime3.jsx)("code", {
            children: "importTranslation"
          }), " function. See documentation."]
        })
      });
    }
    const contextImportTranslation = (localeId, doc) => {
      return importTranslationFunc(documentId, localeId, doc, ctx, baseLanguage, serializationOptions, languageField, mergeWithTargetLocale);
    };
    const exportTranslationFunc = props.options.exportForTranslation;
    if (!exportTranslationFunc) {
      allErrors.push({
        key: randomKey(12),
        text: (0, import_jsx_runtime3.jsxs)(import_jsx_runtime3.Fragment, {
          children: ["You need to provide an ", (0, import_jsx_runtime3.jsx)("code", {
            children: "exportForTranslation"
          }), " function. See documentation."]
        })
      });
    }
    const contextExportForTranslation = (id3) => {
      return exportTranslationFunc(id3, ctx, baseLanguage, serializationOptions, languageField);
    };
    return {
      errors: allErrors,
      importTranslation: contextImportTranslation,
      exportForTranslation: contextExportForTranslation
    };
  }, [props.options, documentId, client, schema]);
  const {
    loading,
    secrets
  } = useSecrets("".concat(props.options.secretsNamespace || "translationService", ".secrets"));
  const hasErrors = errors.length > 0;
  if (loading || !secrets) {
    return (0, import_jsx_runtime3.jsx)(ThemeProvider, {
      children: (0, import_jsx_runtime3.jsx)(Flex, {
        padding: 5,
        align: "center",
        justify: "center",
        children: (0, import_jsx_runtime3.jsx)(Spinner, {})
      })
    });
  } else if (!secrets) {
    return (0, import_jsx_runtime3.jsx)(ThemeProvider, {
      children: (0, import_jsx_runtime3.jsx)(Box, {
        padding: 4,
        children: (0, import_jsx_runtime3.jsx)(Card, {
          tone: "caution",
          padding: [2, 3, 4, 4],
          shadow: 1,
          radius: 2,
          children: (0, import_jsx_runtime3.jsx)(Text, {
            children: "Can't find secrets for your translation service. Did you load them into this dataset?"
          })
        })
      })
    });
  }
  return (0, import_jsx_runtime3.jsx)(ThemeProvider, {
    children: (0, import_jsx_runtime3.jsx)(Box, {
      padding: 4,
      children: (0, import_jsx_runtime3.jsx)(Layer, {
        children: (0, import_jsx_runtime3.jsxs)(ToastProvider, {
          paddingY: 7,
          children: [hasErrors && (0, import_jsx_runtime3.jsx)(Stack, {
            space: 3,
            children: errors.map((error) => (0, import_jsx_runtime3.jsx)(Card, {
              tone: "caution",
              padding: [2, 3, 4, 4],
              shadow: 1,
              radius: 2,
              children: (0, import_jsx_runtime3.jsx)(Text, {
                children: error.text
              })
            }, error.key))
          }), !hasErrors && (0, import_jsx_runtime3.jsx)(TranslationContext.Provider, {
            value: {
              documentId,
              secrets,
              importTranslation,
              exportForTranslation,
              adapter: props.options.adapter,
              baseLanguage: props.options.baseLanguage,
              workflowOptions: props.options.workflowOptions,
              localeIdAdapter: props.options.localeIdAdapter,
              callbackUrl: props.options.callbackUrl,
              mergeWithTargetLocale: props.options.mergeWithTargetLocale
            },
            children: (0, import_jsx_runtime3.jsx)(TranslationView, {})
          })]
        })
      })
    })
  });
};
var getTasks = () => {
  const taskJSON = window.localStorage.getItem("dummyTasks");
  if (!taskJSON)
    return [];
  return JSON.parse(taskJSON);
};
var addTask = (task) => {
  const tasks = getTasks();
  window.localStorage.setItem("dummyTasks", JSON.stringify([...tasks, task]));
};
var getTaskDetails = (taskId) => {
  const task = getTasks().find((t) => t.taskId === taskId);
  return task || null;
};
var DummyAdapter = {
  getLocales: () => {
    return new Promise((resolve) => {
      resolve([{
        enabled: true,
        description: "German",
        localeId: "de"
      }, {
        enabled: true,
        description: "Norwegian (Bokmål)",
        localeId: "no_nb"
      }, {
        enabled: false,
        description: "Icelandic",
        localeId: "is"
      }]);
    });
  },
  getTranslationTask: (documentId) => {
    console.debug("Fetching translation tasks for document", documentId);
    return new Promise((resolve) => {
      const tasks = getTasks();
      const result = tasks.length ? tasks[tasks.length - 1] : null;
      resolve(result != null ? result : {
        documentId,
        taskId: documentId,
        locales: []
      });
    });
  },
  createTask: (documentId, document2, localeIds) => {
    console.debug("Sending over serialized document", document2);
    return new Promise((resolve) => {
      const task = {
        taskId: (/* @__PURE__ */ new Date()).getTime().toString(),
        documentId,
        locales: localeIds.map((l) => ({
          localeId: l,
          progress: 80
        }))
      };
      addTask(task);
      resolve(task);
    });
  },
  getTranslation: async (taskId, localeId) => {
    console.debug("Fetching translation for locale", localeId);
    await setTimeout(() => {
    }, 1e3);
    const task = getTaskDetails(taskId);
    if (!task) {
      return null;
    }
    return new Promise((resolve) => {
      resolve({
        _id: task.documentId,
        title: "This is just a dummy translation"
      });
    });
  }
};
var findDocumentAtRevision = async (documentId, rev, client) => {
  const dataset = client.config().dataset;
  const baseUrl = "/data/history/".concat(dataset, "/documents/").concat(documentId, "?revision=").concat(rev);
  const url = client.getUrl(baseUrl);
  const revisionDoc = await fetch(url, {
    credentials: "include"
  }).then((req) => req.json()).then((req) => {
    if (req.documents && req.documents.length) {
      return req.documents[0];
    }
    return null;
  });
  return revisionDoc;
};
var findLatestDraft = (documentId, client) => {
  const query = "*[_id == $id || _id == $draftId]";
  const params = {
    id: documentId,
    draftId: "drafts.".concat(documentId)
  };
  return client.fetch(query, params).then((docs) => {
    var _a3;
    return (_a3 = docs.find((doc) => doc._id.includes("draft"))) != null ? _a3 : docs[0];
  });
};
var createI18nDocAndPatchMetadata = function(translatedDoc, localeId, client, translationMetadata) {
  let languageField = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : "language";
  translatedDoc[languageField] = localeId;
  const translations = translationMetadata.translations;
  const existingLocaleKey = translations.find((translation) => translation._key === localeId);
  const operation = existingLocaleKey ? "replace" : "after";
  const location = existingLocaleKey ? 'translations[_key == "'.concat(localeId, '"]') : "translations[-1]";
  const {
    _updatedAt,
    _createdAt,
    ...rest
  } = translatedDoc;
  client.create({
    ...rest,
    _id: "drafts."
  }).then((doc) => {
    const _ref = doc._id.replace("drafts.", "");
    client.transaction().patch(translationMetadata._id, (p) => p.insert(operation, location, [{
      _key: localeId,
      _type: "internationalizedArrayReferenceValue",
      value: {
        _type: "reference",
        _ref,
        _weak: true,
        _strengthenOnPublish: {
          type: doc._type
        }
      }
    }])).commit();
  });
};
var createTranslationMetadata = (document2, client, baseLanguage) => {
  const baseLangEntry = {
    _key: baseLanguage,
    _type: "internationalizedArrayReferenceValue",
    value: {
      _type: "reference",
      _ref: document2._id.replace("drafts.", "")
    }
  };
  if (document2._id.startsWith("drafts.")) {
    baseLangEntry.value = {
      ...baseLangEntry.value,
      _weak: true,
      //this should reflect doc i18n config when this
      //plugin is able to take that as a config option
      _strengthenOnPublish: {
        type: document2._type
      }
    };
  }
  return client.create({
    _type: "translation.metadata",
    translations: [baseLangEntry]
  });
};
var getTranslationMetadata = (id3, client, baseLanguage) => {
  return client.fetch("*[\n        _type == 'translation.metadata' &&\n        translations[_key == $baseLanguage][0].value._ref == $id\n      ][0]", {
    baseLanguage,
    id: id3
  });
};
var patchI18nDoc = (i18nDocId, mergedDocument, translatedFields, client) => {
  const cleanedMerge = {};
  Object.entries(mergedDocument).forEach((_ref7) => {
    let [key2, value] = _ref7;
    if (
      //only patch those fields that had translated strings
      Object.keys(translatedFields).includes(key2) && //don't overwrite any existing system values on the i18n doc
      !["_id", "_rev", "_updatedAt", "language"].includes(key2)
    ) {
      cleanedMerge[key2] = value;
    }
  });
  client.transaction().patch(i18nDocId, (p) => p.set(cleanedMerge)).commit();
};
var documentLevelPatch = async function(documentId, translatedFields, localeId, client) {
  let baseLanguage = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : "en";
  let languageField = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : "language";
  let mergeWithTargetLocale = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : false;
  var _a3, _b2;
  let baseDoc = null;
  let i18nDoc = null;
  if (translatedFields._id && translatedFields._rev) {
    baseDoc = await findDocumentAtRevision(translatedFields._id, translatedFields._rev, client);
  }
  if (!baseDoc) {
    baseDoc = await findLatestDraft(documentId, client);
  }
  let translationMetadata = await getTranslationMetadata(documentId, client, baseLanguage);
  if (!translationMetadata) {
    translationMetadata = await createTranslationMetadata(baseDoc, client, baseLanguage);
  }
  const i18nDocId = (_b2 = (_a3 = translationMetadata.translations.find((translation) => translation._key === localeId)) == null ? void 0 : _a3.value) == null ? void 0 : _b2._ref;
  if (i18nDocId) {
    i18nDoc = await findLatestDraft(i18nDocId, client);
  }
  if (mergeWithTargetLocale && i18nDoc) {
    baseDoc = i18nDoc;
  } else if (translatedFields._id && translatedFields._rev) {
    baseDoc = await findDocumentAtRevision(translatedFields._id, translatedFields._rev, client);
  }
  if (!baseDoc) {
    baseDoc = await findLatestDraft(documentId, client);
  }
  const merged = BaseDocumentMerger.documentLevelMerge(translatedFields, baseDoc);
  if (i18nDoc) {
    patchI18nDoc(i18nDoc._id, merged, translatedFields, client);
  } else {
    createI18nDocAndPatchMetadata(merged, localeId, client, translationMetadata, languageField);
  }
};
var legacyDocumentLevelPatch = async (documentId, translatedFields, localeId, client) => {
  let baseDoc = null;
  if (translatedFields._id && translatedFields._rev) {
    baseDoc = await findDocumentAtRevision(translatedFields._id, translatedFields._rev, client);
  }
  if (!baseDoc) {
    baseDoc = await findLatestDraft(documentId, client);
  }
  const merged = BaseDocumentMerger.documentLevelMerge(translatedFields, baseDoc);
  const targetId = "drafts.".concat(documentId, "__i18n_").concat(localeId);
  const i18nDoc = await findLatestDraft(targetId, client);
  if (i18nDoc) {
    const cleanedMerge = {};
    Object.entries(merged).forEach((_ref8) => {
      let [key2, value] = _ref8;
      if (Object.keys(translatedFields).includes(key2) && !["_id", "_rev", "_updatedAt"].includes(key2)) {
        cleanedMerge[key2] = value;
      }
    });
    await client.transaction().patch(i18nDoc._id, (p) => p.set(cleanedMerge)).commit();
  } else {
    merged._id = targetId;
    merged.__i18n_lang = localeId;
    client.create(merged);
  }
};
var baseDocumentLevelConfig = {
  exportForTranslation: async function() {
    var _a3, _b2;
    for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {
      params[_key] = arguments[_key];
    }
    const [id3, context, baseLanguage = "en", serializationOptions = {}, languageField = "language"] = params;
    const {
      client,
      schema
    } = context;
    const stopTypes = [...(_a3 = serializationOptions.additionalStopTypes) != null ? _a3 : [], ...defaultStopTypes];
    const serializers = {
      ...customSerializers,
      types: {
        ...customSerializers.types,
        ...(_b2 = serializationOptions.additionalSerializers) != null ? _b2 : {}
      }
    };
    const doc = await findLatestDraft(id3, client);
    delete doc[languageField];
    const serialized = BaseDocumentSerializer(schema).serializeDocument(doc, "document", baseLanguage, stopTypes, serializers);
    serialized.name = id3;
    return serialized;
  },
  importTranslation: function() {
    var _a3, _b2;
    for (var _len2 = arguments.length, params = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      params[_key2] = arguments[_key2];
    }
    const [id3, localeId, document2, context, baseLanguage = "en", serializationOptions = {}, languageField = "language", mergeWithTargetLocale = false] = params;
    const {
      client
    } = context;
    const deserializers = {
      types: {
        ...(_a3 = serializationOptions.additionalDeserializers) != null ? _a3 : {}
      }
    };
    const blockDeserializers = [...(_b2 = serializationOptions.additionalBlockDeserializers) != null ? _b2 : [], ...customBlockDeserializers];
    const deserialized = BaseDocumentDeserializer.deserializeDocument(document2, deserializers, blockDeserializers);
    return documentLevelPatch(id3, deserialized, localeId, client, baseLanguage, languageField, mergeWithTargetLocale);
  },
  adapter: DummyAdapter,
  secretsNamespace: "translationService",
  baseLanguage: "en"
};
var legacyDocumentLevelConfig = {
  ...baseDocumentLevelConfig,
  importTranslation: function() {
    var _a3, _b2;
    for (var _len3 = arguments.length, params = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      params[_key3] = arguments[_key3];
    }
    const [id3, localeId, document2, context, , serializationOptions = {}] = params;
    const {
      client
    } = context;
    const deserializers = {
      types: {
        ...(_a3 = serializationOptions.additionalDeserializers) != null ? _a3 : {}
      }
    };
    const blockDeserializers = [...(_b2 = serializationOptions.additionalBlockDeserializers) != null ? _b2 : [], ...customBlockDeserializers];
    const deserialized = BaseDocumentDeserializer.deserializeDocument(document2, deserializers, blockDeserializers);
    return legacyDocumentLevelPatch(id3, deserialized, localeId, client);
  }
};
var fieldLevelPatch = async function(documentId, translatedFields, localeId, client) {
  let baseLanguage = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : "en";
  let mergeWithTargetLocale = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : false;
  let baseDoc;
  if (translatedFields._rev && translatedFields._id) {
    baseDoc = await findDocumentAtRevision(translatedFields._id, translatedFields._rev, client);
  } else {
    baseDoc = await findLatestDraft(documentId, client);
  }
  const merged = BaseDocumentMerger.fieldLevelMerge(translatedFields, baseDoc, localeId, mergeWithTargetLocale ? baseLanguage : localeId);
  await client.patch(baseDoc._id).set(merged).commit();
};
var baseFieldLevelConfig = {
  exportForTranslation: async function() {
    var _a3, _b2;
    for (var _len4 = arguments.length, params = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      params[_key4] = arguments[_key4];
    }
    const [id3, context, baseLanguage = "en", serializationOptions = {}] = params;
    const {
      client,
      schema
    } = context;
    const stopTypes = [...(_a3 = serializationOptions.additionalStopTypes) != null ? _a3 : [], ...defaultStopTypes];
    const serializers = {
      ...customSerializers,
      types: {
        ...customSerializers.types,
        ...(_b2 = serializationOptions.additionalSerializers) != null ? _b2 : {}
      }
    };
    const doc = await findLatestDraft(id3, client);
    const serialized = BaseDocumentSerializer(schema).serializeDocument(doc, "field", baseLanguage, stopTypes, serializers);
    serialized.name = id3;
    return serialized;
  },
  importTranslation: function() {
    var _a3, _b2;
    for (var _len5 = arguments.length, params = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
      params[_key5] = arguments[_key5];
    }
    const [id3, localeId, document2, context, baseLanguage = "en", serializationOptions = {}, , mergeWithTargetLocale] = params;
    const {
      client
    } = context;
    const deserializers = {
      types: {
        ...(_a3 = serializationOptions.additionalDeserializers) != null ? _a3 : {}
      }
    };
    const blockDeserializers = [...(_b2 = serializationOptions.additionalBlockDeserializers) != null ? _b2 : [], ...customBlockDeserializers];
    const deserialized = BaseDocumentDeserializer.deserializeDocument(document2, deserializers, blockDeserializers);
    return fieldLevelPatch(id3, deserialized, localeId, client, baseLanguage, mergeWithTargetLocale);
  },
  adapter: DummyAdapter,
  secretsNamespace: "translationService",
  baseLanguage: "en"
};

// node_modules/sanity-plugin-transifex/dist/index.esm.js
var baseTransifexUrl = "https://rest.api.transifex.com";
var getHeaders = (secrets) => ({
  Authorization: "Bearer ".concat(secrets == null ? void 0 : secrets.token),
  "Content-Type": "application/vnd.api+json"
});
var projOrgSlug = (secrets) => "o:".concat(secrets == null ? void 0 : secrets.organization, ":p:").concat(secrets == null ? void 0 : secrets.project);
var getLocales = async (secrets) => {
  let locales = [];
  if (secrets) {
    locales = await fetch("".concat(baseTransifexUrl, "/projects/").concat(projOrgSlug(secrets), "/languages"), {
      headers: getHeaders(secrets)
    }).then((res) => res.json()).then((res) => res.data.map((lang) => ({
      enabled: true,
      description: lang.attributes.name,
      localeId: lang.attributes.code
    })));
  }
  return locales;
};
var getTranslationTask = async (documentId, secrets) => {
  if (!documentId || !secrets) {
    return {
      taskId: documentId,
      documentId,
      locales: []
    };
  }
  const projectFilter = "filter[project]=".concat(projOrgSlug(secrets));
  const resourceFilter = "filter[resource]=".concat(projOrgSlug(secrets), ":r:").concat(documentId);
  const task = await fetch("".concat(baseTransifexUrl, "/resource_language_stats?").concat(projectFilter, "&").concat(resourceFilter), {
    headers: getHeaders(secrets)
  }).then((res) => {
    if (res.ok) {
      return res.json();
    } else if (res.status === 404) {
      return {
        data: []
      };
    }
    throw Error("Failed to retrieve tasks from Transifex. Status: ".concat(res.status));
  }).then((res) => ({
    taskId: "".concat(projOrgSlug(secrets), ":r:").concat(documentId),
    documentId,
    locales: res.data.map((locale) => ({
      localeId: locale.relationships.language.data.id.split(":")[1],
      progress: Math.floor(100 * (locale.attributes.reviewed_strings / parseFloat(locale.attributes.total_strings)))
    }))
  }));
  const locales = await getLocales(secrets);
  const localeIds = locales.map((l) => l.localeId);
  const validLocales = task.locales.filter((locale) => localeIds.find((id3) => id3 === locale.localeId));
  task.locales = validLocales;
  return task;
};
var pollForFileDownloadLocation = async (resourceDownloadUrl, translationDownloadId, headers) => {
  const response = await fetch("".concat(resourceDownloadUrl, "/").concat(translationDownloadId), {
    headers
  });
  if (response.status === 500) {
    console.info("Transifex plugin message: Received 500 for translation download ID ".concat(translationDownloadId, ". Trying to reconnect..."));
    await new Promise((resolve) => setTimeout(resolve, 3e3));
    return pollForFileDownloadLocation(resourceDownloadUrl, translationDownloadId, headers);
  } else if (response.redirected) {
    console.info("Transifex plugin message: Received redirect for translation download ID ".concat(translationDownloadId, ". Following redirect now for file download."));
    return response.url;
  } else if (response.status === 200) {
    console.info("Transifex plugin message: Requested download location for translation download ID ".concat(translationDownloadId, ". Location is still pending, trying again."));
    await new Promise((resolve) => setTimeout(resolve, 3e3));
    return pollForFileDownloadLocation(resourceDownloadUrl, translationDownloadId, headers);
  }
  console.error("Transifex plugin message: Requested download location for translation download ID ".concat(translationDownloadId, " but received error code ").concat(response.status, ". Waiting and trying again."));
  await new Promise((resolve) => setTimeout(resolve, 3e3));
  return pollForFileDownloadLocation(resourceDownloadUrl, translationDownloadId, headers);
};
var handleFileDownload = (url) => {
  return fetch(url).then((res) => res.text());
};
var getTranslation = async (taskId, localeId, secrets) => {
  const resourceDownloadBody = {
    data: {
      attributes: {
        content_encoding: "text"
      },
      relationships: {
        language: {
          data: {
            id: "l:".concat(localeId),
            type: "languages"
          }
        },
        resource: {
          data: {
            id: taskId,
            type: "resources"
          }
        }
      },
      type: "resource_translations_async_downloads"
    }
  };
  const resourceDownloadUrl = "".concat(baseTransifexUrl, "/resource_translations_async_downloads");
  const translationDownloadId = await fetch(resourceDownloadUrl, {
    headers: getHeaders(secrets),
    method: "POST",
    body: JSON.stringify(resourceDownloadBody)
  }).then((res) => res.json()).then((res) => res.data.id);
  const headers = getHeaders(secrets);
  const location = await pollForFileDownloadLocation(resourceDownloadUrl, translationDownloadId, headers);
  return handleFileDownload(location);
};
var createResource = (doc, documentId, secrets) => {
  const resourceCreateBody = {
    data: {
      attributes: {
        accept_translations: true,
        name: doc.name,
        slug: documentId
      },
      relationships: {
        i18n_format: {
          data: {
            id: "HTML_FRAGMENT",
            type: "i18n_formats"
          }
        },
        project: {
          data: {
            id: projOrgSlug(secrets),
            type: "projects"
          }
        }
      },
      type: "resources"
    }
  };
  return fetch("".concat(baseTransifexUrl, "/resources"), {
    headers: getHeaders(secrets),
    method: "POST",
    body: JSON.stringify(resourceCreateBody)
  }).then((res) => res.json()).then((res) => res.data.id);
};
var createTask = async (documentId, document2, localeIds, secrets) => {
  let resourceId = await fetch("".concat(baseTransifexUrl, "/resources/").concat(projOrgSlug(secrets), ":r:").concat(documentId), {
    headers: getHeaders(secrets)
  }).then((res) => res.json()).then((res) => res.data ? res.data.id : null);
  if (!resourceId) {
    resourceId = await createResource(document2, documentId, secrets);
  }
  const resourceUploadUrl = "".concat(baseTransifexUrl, "/resource_strings_async_uploads");
  const resourceUploadBody = {
    data: {
      attributes: {
        content: document2.content,
        content_encoding: "text"
      },
      relationships: {
        resource: {
          data: {
            id: resourceId,
            type: "resources"
          }
        }
      },
      type: "resource_strings_async_uploads"
    }
  };
  return fetch(resourceUploadUrl, {
    method: "POST",
    body: JSON.stringify(resourceUploadBody),
    headers: getHeaders(secrets)
  }).then(() => getTranslationTask(documentId, secrets));
};
var TransifexAdapter = {
  getLocales,
  getTranslationTask,
  createTask,
  getTranslation
};
var defaultDocumentLevelConfig = {
  ...baseDocumentLevelConfig,
  adapter: TransifexAdapter,
  secretsNamespace: "transifex"
};
var legacyDocumentLevelConfig2 = {
  ...legacyDocumentLevelConfig,
  adapter: TransifexAdapter,
  secretsNamespace: "transifex"
};
var defaultFieldLevelConfig = {
  ...baseFieldLevelConfig,
  adapter: TransifexAdapter,
  secretsNamespace: "transifex"
};
export {
  BaseDocumentDeserializer,
  BaseDocumentMerger,
  BaseDocumentSerializer,
  TransifexAdapter,
  TranslationTab as TranslationsTab,
  customSerializers,
  defaultDocumentLevelConfig,
  defaultFieldLevelConfig,
  defaultStopTypes,
  documentLevelPatch,
  fieldLevelPatch,
  findLatestDraft,
  legacyDocumentLevelConfig2 as legacyDocumentLevelConfig,
  legacyDocumentLevelPatch
};
//# sourceMappingURL=sanity-plugin-transifex.js.map
