{"version":3,"file":"index.esm.js","sources":["../src/components/DeleteTranslationDialog/DocumentPreview.tsx","../src/constants.ts","../src/components/DeleteTranslationDialog/separateReferences.ts","../src/components/DeleteTranslationDialog/index.tsx","../src/components/DeleteTranslationFooter.tsx","../node_modules/suspend-react/index.js","../src/components/DocumentInternationalizationContext.tsx","../src/actions/DeleteTranslationAction.tsx","../src/hooks/useLanguageMetadata.tsx","../src/hooks/useOpenInNewPane.tsx","../src/components/LanguageManage.tsx","../src/utils/createReference.ts","../src/utils/excludePaths.ts","../src/components/LanguageOption.tsx","../src/components/LanguagePatch.tsx","../src/components/ConstrainedBox.tsx","../src/components/Warning.tsx","../src/components/DocumentInternationalizationMenu.tsx","../src/actions/DeleteMetadataAction.tsx","../src/badges/index.tsx","../src/components/BulkPublish/DocumentCheck.tsx","../src/components/BulkPublish/InfoIcon.tsx","../src/components/BulkPublish/Info.tsx","../src/components/BulkPublish/index.tsx","../src/components/OptimisticallyStrengthen/ReferencePatcher.tsx","../src/components/OptimisticallyStrengthen/index.tsx","../src/schema/translation/metadata.ts","../src/plugin.tsx"],"sourcesContent":["import {Preview, useSchema} from 'sanity'\nimport {Feedback} from 'sanity-plugin-utils'\n\ntype DocumentPreviewProps = {\n  value: unknown\n  type: string\n}\n\n// Wrapper of Preview just so that the schema type is satisfied by schema.get()\nexport default function DocumentPreview(props: DocumentPreviewProps) {\n  const schema = useSchema()\n\n  const schemaType = schema.get(props.type)\n  if (!schemaType) {\n    return <Feedback tone=\"critical\" title=\"Schema type not found\" />\n  }\n\n  return <Preview value={props.value} schemaType={schemaType} />\n}\n","import type {PluginConfigContext} from './types'\n\nexport const METADATA_SCHEMA_NAME = `translation.metadata`\nexport const TRANSLATIONS_ARRAY_NAME = `translations`\nexport const API_VERSION = `2023-05-22`\nexport const DEFAULT_CONFIG: PluginConfigContext = {\n  supportedLanguages: [],\n  schemaTypes: [],\n  languageField: `language`,\n  weakReferences: false,\n  bulkPublish: false,\n  metadataFields: [],\n  apiVersion: API_VERSION,\n}\n","import type {SanityDocument} from 'sanity'\n\nimport {METADATA_SCHEMA_NAME} from '../../constants'\n\nexport function separateReferences(data: SanityDocument[] | null = []): {\n  translations: SanityDocument[]\n  otherReferences: SanityDocument[]\n} {\n  const translations: SanityDocument[] = []\n  const otherReferences: SanityDocument[] = []\n\n  if (data && data.length > 0) {\n    data.forEach((doc) => {\n      if (doc._type === METADATA_SCHEMA_NAME) {\n        translations.push(doc)\n      } else {\n        otherReferences.push(doc)\n      }\n    })\n  }\n\n  return {translations, otherReferences}\n}\n","import {Card, Flex, Spinner, Stack, Text} from '@sanity/ui'\nimport {useEffect, useMemo} from 'react'\nimport type {SanityDocument} from 'sanity'\nimport {useListeningQuery} from 'sanity-plugin-utils'\n\nimport DocumentPreview from './DocumentPreview'\nimport {separateReferences} from './separateReferences'\n\ntype DeleteTranslationDialogProps = {\n  doc: SanityDocument\n  documentId: string\n  setTranslations: (translations: SanityDocument[]) => void\n}\n\nexport default function DeleteTranslationDialog(\n  props: DeleteTranslationDialogProps\n) {\n  const {doc, documentId, setTranslations} = props\n\n  // Get all references and check if any of them are translations metadata\n  const {data, loading} = useListeningQuery<SanityDocument[]>(\n    `*[references($id)]{_id, _type}`,\n    {params: {id: documentId}, initialValue: []}\n  )\n  const {translations, otherReferences} = useMemo(\n    () => separateReferences(data),\n    [data]\n  )\n\n  useEffect(() => {\n    setTranslations(translations)\n  }, [setTranslations, translations])\n\n  if (loading) {\n    return (\n      <Flex padding={4} align=\"center\" justify=\"center\">\n        <Spinner />\n      </Flex>\n    )\n  }\n\n  return (\n    <Stack space={4}>\n      {translations && translations.length > 0 ? (\n        <Text>\n          This document is a language-specific version which other translations\n          depend on.\n        </Text>\n      ) : (\n        <Text>This document does not have connected translations.</Text>\n      )}\n      <Card border padding={3}>\n        <Stack space={4}>\n          <Text size={1} weight=\"semibold\">\n            {translations && translations.length > 0 ? (\n              <>Before this document can be deleted</>\n            ) : (\n              <>This document can now be deleted</>\n            )}\n          </Text>\n          <DocumentPreview value={doc} type={doc._type} />\n          {translations && translations.length > 0 ? (\n            <>\n              <Card borderTop />\n              <Text size={1} weight=\"semibold\">\n                The reference in{' '}\n                {translations.length === 1\n                  ? `this translations document`\n                  : `these translations documents`}{' '}\n                must be removed\n              </Text>\n              {translations.map((translation) => (\n                <DocumentPreview\n                  key={translation._id}\n                  value={translation}\n                  type={translation._type}\n                />\n              ))}\n            </>\n          ) : null}\n          {otherReferences && otherReferences.length > 0 ? (\n            <>\n              <Card borderTop />\n              <Text size={1} weight=\"semibold\">\n                {otherReferences.length === 1\n                  ? `There is an additional reference`\n                  : `There are additional references`}{' '}\n                to this document\n              </Text>\n              {otherReferences.map((reference) => (\n                <DocumentPreview\n                  key={reference._id}\n                  value={reference}\n                  type={reference._type}\n                />\n              ))}\n            </>\n          ) : null}\n        </Stack>\n      </Card>\n      {otherReferences.length === 0 ? (\n        <Text>This document has no other references.</Text>\n      ) : (\n        <Text>\n          You may not be able to delete this document because other documents\n          refer to it.\n        </Text>\n      )}\n    </Stack>\n  )\n}\n","import {Button, Grid} from '@sanity/ui'\n\ntype DeleteTranslationFooterProps = {\n  translations: unknown[]\n  onClose: () => void\n  onProceed: () => void\n}\n\nexport default function DeleteTranslationFooter(\n  props: DeleteTranslationFooterProps\n) {\n  const {translations, onClose, onProceed} = props\n\n  return (\n    <Grid columns={2} gap={2}>\n      <Button text=\"Cancel\" onClick={onClose} mode=\"ghost\" />\n      <Button\n        text={\n          translations && translations.length > 0\n            ? `Unset translation reference`\n            : `Delete document`\n        }\n        onClick={onProceed}\n        tone=\"critical\"\n      />\n    </Grid>\n  )\n}\n","const isPromise = promise => typeof promise === 'object' && typeof promise.then === 'function';\n\nconst globalCache = [];\n\nfunction shallowEqualArrays(arrA, arrB, equal = (a, b) => a === b) {\n  if (arrA === arrB) return true;\n  if (!arrA || !arrB) return false;\n  const len = arrA.length;\n  if (arrB.length !== len) return false;\n\n  for (let i = 0; i < len; i++) if (!equal(arrA[i], arrB[i])) return false;\n\n  return true;\n}\n\nfunction query(fn, keys = null, preload = false, config = {}) {\n  // If no keys were given, the function is the key\n  if (keys === null) keys = [fn];\n\n  for (const entry of globalCache) {\n    // Find a match\n    if (shallowEqualArrays(keys, entry.keys, entry.equal)) {\n      // If we're pre-loading and the element is present, just return\n      if (preload) return undefined; // If an error occurred, throw\n\n      if (Object.prototype.hasOwnProperty.call(entry, 'error')) throw entry.error; // If a response was successful, return\n\n      if (Object.prototype.hasOwnProperty.call(entry, 'response')) {\n        if (config.lifespan && config.lifespan > 0) {\n          if (entry.timeout) clearTimeout(entry.timeout);\n          entry.timeout = setTimeout(entry.remove, config.lifespan);\n        }\n\n        return entry.response;\n      } // If the promise is still unresolved, throw\n\n\n      if (!preload) throw entry.promise;\n    }\n  } // The request is new or has changed.\n\n\n  const entry = {\n    keys,\n    equal: config.equal,\n    remove: () => {\n      const index = globalCache.indexOf(entry);\n      if (index !== -1) globalCache.splice(index, 1);\n    },\n    promise: // Execute the promise\n    (isPromise(fn) ? fn : fn(...keys) // When it resolves, store its value\n    ).then(response => {\n      entry.response = response; // Remove the entry in time if a lifespan was given\n\n      if (config.lifespan && config.lifespan > 0) {\n        entry.timeout = setTimeout(entry.remove, config.lifespan);\n      }\n    }) // Store caught errors, they will be thrown in the render-phase to bubble into an error-bound\n    .catch(error => entry.error = error)\n  }; // Register the entry\n\n  globalCache.push(entry); // And throw the promise, this yields control back to React\n\n  if (!preload) throw entry.promise;\n  return undefined;\n}\n\nconst suspend = (fn, keys, config) => query(fn, keys, false, config);\n\nconst preload = (fn, keys, config) => void query(fn, keys, true, config);\n\nconst peek = keys => {\n  var _globalCache$find;\n\n  return (_globalCache$find = globalCache.find(entry => shallowEqualArrays(keys, entry.keys, entry.equal))) == null ? void 0 : _globalCache$find.response;\n};\n\nconst clear = keys => {\n  if (keys === undefined || keys.length === 0) globalCache.splice(0, globalCache.length);else {\n    const entry = globalCache.find(entry => shallowEqualArrays(keys, entry.keys, entry.equal));\n    if (entry) entry.remove();\n  }\n};\n\nexport { clear, peek, preload, suspend };\n","import {useContext} from 'react'\nimport {createContext} from 'react'\nimport {type LayoutProps, useClient, useWorkspace} from 'sanity'\nimport {suspend} from 'suspend-react'\n\nimport {DEFAULT_CONFIG} from '../constants'\nimport type {PluginConfig, PluginConfigContext} from '../types'\n\nconst DocumentInternationalizationContext =\n  createContext<PluginConfigContext>(DEFAULT_CONFIG)\n\nexport function useDocumentInternationalizationContext() {\n  return useContext(DocumentInternationalizationContext)\n}\n\ntype DocumentInternationalizationProviderProps = LayoutProps & {\n  pluginConfig: Required<PluginConfig>\n}\n\n/**\n * This Provider wraps the Studio and provides the DocumentInternationalization context to document actions and components.\n */\nexport function DocumentInternationalizationProvider(\n  props: DocumentInternationalizationProviderProps\n) {\n  const {pluginConfig} = props\n\n  const client = useClient({apiVersion: pluginConfig.apiVersion})\n  const workspace = useWorkspace()\n  const supportedLanguages = Array.isArray(pluginConfig.supportedLanguages)\n    ? pluginConfig.supportedLanguages\n    : // eslint-disable-next-line require-await\n      suspend(async () => {\n        if (typeof pluginConfig.supportedLanguages === 'function') {\n          return pluginConfig.supportedLanguages(client)\n        }\n        return pluginConfig.supportedLanguages\n      }, [workspace])\n\n  return (\n    <DocumentInternationalizationContext.Provider\n      value={{...pluginConfig, supportedLanguages}}\n    >\n      {props.renderDefault(props)}\n    </DocumentInternationalizationContext.Provider>\n  )\n}\n","import {TrashIcon} from '@sanity/icons'\nimport {type ButtonTone, useToast} from '@sanity/ui'\nimport {useCallback, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type SanityDocument,\n  useClient,\n} from 'sanity'\n\nimport DeleteTranslationDialog from '../components/DeleteTranslationDialog'\nimport DeleteTranslationFooter from '../components/DeleteTranslationFooter'\nimport {useDocumentInternationalizationContext} from '../components/DocumentInternationalizationContext'\nimport {API_VERSION, TRANSLATIONS_ARRAY_NAME} from '../constants'\n\nexport const DeleteTranslationAction: DocumentActionComponent = (props) => {\n  const {id: documentId, published, draft} = props\n  const doc = draft || published\n  const {languageField} = useDocumentInternationalizationContext()\n\n  const [isDialogOpen, setDialogOpen] = useState(false)\n  const [translations, setTranslations] = useState<SanityDocument[]>([])\n  const onClose = useCallback(() => setDialogOpen(false), [])\n  const documentLanguage = doc ? doc[languageField] : null\n\n  const toast = useToast()\n  const client = useClient({apiVersion: API_VERSION})\n\n  // Remove translation reference and delete document in one transaction\n  const onProceed = useCallback(() => {\n    const tx = client.transaction()\n    let operation = 'DELETE'\n\n    if (documentLanguage && translations.length > 0) {\n      operation = 'UNSET'\n      translations.forEach((translation) => {\n        tx.patch(translation._id, (patch) =>\n          patch.unset([\n            `${TRANSLATIONS_ARRAY_NAME}[_key == \"${documentLanguage}\"]`,\n          ])\n        )\n      })\n    } else {\n      tx.delete(documentId)\n      tx.delete(`drafts.${documentId}`)\n    }\n\n    tx.commit()\n      .then(() => {\n        if (operation === 'DELETE') {\n          onClose()\n        }\n        toast.push({\n          status: 'success',\n          title:\n            operation === 'UNSET'\n              ? 'Translation reference unset'\n              : 'Document deleted',\n          description:\n            operation === 'UNSET' ? 'The document can now be deleted' : null,\n        })\n      })\n      .catch((err) => {\n        toast.push({\n          status: 'error',\n          title:\n            operation === 'unset'\n              ? 'Failed to unset translation reference'\n              : 'Failed to delete document',\n          description: err.message,\n        })\n      })\n  }, [client, documentLanguage, translations, documentId, onClose, toast])\n\n  return {\n    label: `Delete translation...`,\n    disabled: !doc || !documentLanguage,\n    icon: TrashIcon,\n    tone: 'critical' as ButtonTone,\n    onHandle: () => {\n      setDialogOpen(true)\n    },\n    dialog: isDialogOpen && {\n      type: 'dialog',\n      onClose,\n      header: 'Delete translation',\n      content: doc ? (\n        <DeleteTranslationDialog\n          doc={doc}\n          documentId={documentId}\n          setTranslations={setTranslations}\n        />\n      ) : null,\n      footer: (\n        <DeleteTranslationFooter\n          onClose={onClose}\n          onProceed={onProceed}\n          translations={translations}\n        />\n      ),\n    },\n  }\n}\n","import {useListeningQuery} from 'sanity-plugin-utils'\n\nimport {METADATA_SCHEMA_NAME} from '../constants'\nimport type {Metadata} from '../types'\n\n// Using references() seemed less reliable for updating the listener\n// results than querying raw values in the array\n// AFAIK: references is _faster_ when querying with GROQ\n// const query = `*[_type == $translationSchema && references($id)]`\nconst query = `*[_type == $translationSchema && $id in translations[].value._ref]{\n  _id,\n  _createdAt,\n  translations\n}`\n\nexport function useTranslationMetadata(id: string): {\n  data: Metadata[] | null\n  loading: boolean\n  error: boolean | unknown | ProgressEvent\n} {\n  const {data, loading, error} = useListeningQuery<Metadata[]>(query, {\n    params: {id, translationSchema: METADATA_SCHEMA_NAME},\n  })\n\n  return {data, loading, error}\n}\n","import {useCallback, useContext} from 'react'\nimport {RouterContext} from 'sanity/router'\nimport {usePaneRouter} from 'sanity/structure'\n\nexport function useOpenInNewPane(id?: string, type?: string) {\n  const routerContext = useContext(RouterContext)\n  const {routerPanesState, groupIndex} = usePaneRouter()\n\n  const openInNewPane = useCallback(() => {\n    if (!routerContext || !id || !type) {\n      return\n    }\n\n    // No panes open, function might be called outside Structure\n    if (!routerPanesState.length) {\n      routerContext.navigateIntent('edit', {id, type})\n      return\n    }\n\n    const panes = [...routerPanesState]\n    panes.splice(groupIndex + 1, 0, [\n      {\n        id: id,\n        params: {type},\n      },\n    ])\n\n    const href = routerContext.resolvePathFromState({panes})\n    routerContext.navigateUrl({path: href})\n  }, [id, type, routerContext, routerPanesState, groupIndex])\n\n  return openInNewPane\n}\n","import {CogIcon} from '@sanity/icons'\nimport {Box, Button, Stack, Text, Tooltip} from '@sanity/ui'\n\nimport {METADATA_SCHEMA_NAME} from '../constants'\nimport {useOpenInNewPane} from '../hooks/useOpenInNewPane'\n\ntype LanguageManageProps = {\n  id?: string\n}\n\nexport default function LanguageManage(props: LanguageManageProps) {\n  const {id} = props\n  const open = useOpenInNewPane(id, METADATA_SCHEMA_NAME)\n\n  return (\n    <Tooltip\n      animate\n      content={\n        id ? null : (\n          <Box padding={2}>\n            <Text muted size={1}>\n              Document has no other translations\n            </Text>\n          </Box>\n        )\n      }\n      fallbackPlacements={['right', 'left']}\n      placement=\"top\"\n      portal\n    >\n      <Stack>\n        <Button\n          disabled={!id}\n          mode=\"ghost\"\n          text=\"Manage Translations\"\n          icon={CogIcon}\n          onClick={() => open()}\n        />\n      </Stack>\n    </Tooltip>\n  )\n}\n","import type {TranslationReference} from '../types'\n\nexport function createReference(\n  key: string,\n  ref: string,\n  type: string,\n  strengthenOnPublish: boolean = true\n): TranslationReference {\n  return {\n    _key: key,\n    _type: 'internationalizedArrayReferenceValue',\n    value: {\n      _type: 'reference',\n      _ref: ref,\n      _weak: true,\n      // If the user has configured weakReferences, we won't want to strengthen them\n      ...(strengthenOnPublish ? {_strengthenOnPublish: {type}} : {}),\n    },\n  }\n}\n","import {extractWithPath, Mutation} from '@sanity/mutator'\nimport {\n  isDocumentSchemaType,\n  type ObjectSchemaType,\n  type Path,\n  pathToString,\n  type SanityDocument,\n  type SchemaType,\n} from 'sanity'\n\nexport interface DocumentMember {\n  schemaType: SchemaType\n  path: Path\n  name: string\n  value: unknown\n}\n\nexport function removeExcludedPaths(\n  doc: SanityDocument | null,\n  schemaType: ObjectSchemaType\n): SanityDocument | null {\n  // If the supplied doc is null or the schemaType\n  // isn't a document, return as is.\n  if (!isDocumentSchemaType(schemaType) || !doc) {\n    return doc\n  }\n\n  // The extractPaths function gets all the fields in the doc with\n  // a value, along with their schemaTypes and paths. We'll end up\n  // with an array of paths in string form which we want to exclude\n  const pathsToExclude: string[] = extractPaths(doc, schemaType, [])\n    // We filter for any fields which should be excluded from the document\n    // duplicate action, based on the schemaType option being set.\n    .filter(\n      (field) =>\n        field.schemaType?.options?.documentInternationalization?.exclude ===\n        true\n    )\n    // then we return the stringified version of the path\n    .map((field) => {\n      return pathToString(field.path)\n    })\n\n  // Now we can use the Mutation class from @sanity/mutator to patch the document\n  // to remove all the paths that are for one of the excluded fields. This is just\n  // done locally, and the documents themselves are not patched in the Content Lake.\n  const mut = new Mutation({\n    mutations: [\n      {\n        patch: {\n          id: doc._id,\n          unset: pathsToExclude,\n        },\n      },\n    ],\n  })\n\n  return mut.apply(doc) as SanityDocument\n}\n\nfunction extractPaths(\n  doc: SanityDocument,\n  schemaType: ObjectSchemaType,\n  path: Path\n): DocumentMember[] {\n  return schemaType.fields.reduce<DocumentMember[]>((acc, field) => {\n    const fieldPath = [...path, field.name]\n    const fieldSchema = field.type\n    const {value} = extractWithPath(pathToString(fieldPath), doc)[0] ?? {}\n    if (!value) {\n      return acc\n    }\n\n    const thisFieldWithPath: DocumentMember = {\n      path: fieldPath,\n      name: field.name,\n      schemaType: fieldSchema,\n      value,\n    }\n\n    if (fieldSchema.jsonType === 'object') {\n      const innerFields = extractPaths(doc, fieldSchema, fieldPath)\n\n      return [...acc, thisFieldWithPath, ...innerFields]\n    } else if (\n      fieldSchema.jsonType === 'array' &&\n      fieldSchema.of.length &&\n      fieldSchema.of.some((item) => 'fields' in item)\n    ) {\n      const {value: arrayValue} =\n        extractWithPath(pathToString(fieldPath), doc)[0] ?? {}\n\n      let arrayPaths: DocumentMember[] = []\n      if ((arrayValue as any)?.length) {\n        for (const item of arrayValue as any[]) {\n          const itemPath = [...fieldPath, {_key: item._key}]\n          let itemSchema = fieldSchema.of.find((t) => t.name === item._type)\n          if (!item._type) {\n            itemSchema = fieldSchema.of[0]\n          }\n          if (item._key && itemSchema) {\n            const innerFields = extractPaths(\n              doc,\n              itemSchema as ObjectSchemaType,\n              itemPath\n            )\n            const arrayMember = {\n              path: itemPath,\n              name: item._key,\n              schemaType: itemSchema,\n              value: item,\n            }\n            arrayPaths = [...arrayPaths, arrayMember, ...innerFields]\n          }\n        }\n      }\n\n      return [...acc, thisFieldWithPath, ...arrayPaths]\n    }\n\n    return [...acc, thisFieldWithPath]\n  }, [])\n}\n","import {AddIcon, CheckmarkIcon, SplitVerticalIcon} from '@sanity/icons'\nimport {\n  Badge,\n  Box,\n  Button,\n  Flex,\n  Spinner,\n  Text,\n  Tooltip,\n  useToast,\n} from '@sanity/ui'\nimport {uuid} from '@sanity/uuid'\nimport {useCallback} from 'react'\nimport {type ObjectSchemaType, type SanityDocument, useClient} from 'sanity'\n\nimport {METADATA_SCHEMA_NAME} from '../constants'\nimport {useOpenInNewPane} from '../hooks/useOpenInNewPane'\nimport type {Language, Metadata, TranslationReference} from '../types'\nimport {createReference} from '../utils/createReference'\nimport {removeExcludedPaths} from '../utils/excludePaths'\nimport {useDocumentInternationalizationContext} from './DocumentInternationalizationContext'\n\ntype LanguageOptionProps = {\n  language: Language\n  schemaType: ObjectSchemaType\n  documentId: string\n  disabled: boolean\n  current: boolean\n  source: SanityDocument | null\n  metadataId: string | null\n  metadata?: Metadata | null\n  sourceLanguageId?: string\n}\n\nexport default function LanguageOption(props: LanguageOptionProps) {\n  const {\n    language,\n    schemaType,\n    documentId,\n    current,\n    source,\n    sourceLanguageId,\n    metadata,\n    metadataId,\n  } = props\n  const disabled =\n    props.disabled || current || !source || !sourceLanguageId || !metadataId\n  const translation: TranslationReference | undefined = metadata?.translations\n    .length\n    ? metadata.translations.find((t) => t._key === language.id)\n    : undefined\n  const {apiVersion, languageField, weakReferences} =\n    useDocumentInternationalizationContext()\n  const client = useClient({apiVersion})\n  const toast = useToast()\n\n  const open = useOpenInNewPane(translation?.value?._ref, schemaType.name)\n  const handleOpen = useCallback(() => open(), [open])\n\n  const handleCreate = useCallback(async () => {\n    if (!source) {\n      throw new Error(`Cannot create translation without source document`)\n    }\n\n    if (!sourceLanguageId) {\n      throw new Error(`Cannot create translation without source language ID`)\n    }\n\n    if (!metadataId) {\n      throw new Error(`Cannot create translation without a metadata ID`)\n    }\n\n    const transaction = client.transaction()\n\n    // 1. Duplicate source document\n    const newTranslationDocumentId = uuid()\n    let newTranslationDocument = {\n      ...source,\n      _id: `drafts.${newTranslationDocumentId}`,\n      // 2. Update language of the translation\n      [languageField]: language.id,\n    }\n\n    // Remove fields / paths we don't want to duplicate\n    newTranslationDocument = removeExcludedPaths(\n      newTranslationDocument,\n      schemaType\n    ) as SanityDocument\n\n    transaction.create(newTranslationDocument)\n\n    // 3. Maybe create the metadata document\n    const sourceReference = createReference(\n      sourceLanguageId,\n      documentId,\n      schemaType.name,\n      !weakReferences\n    )\n    const newTranslationReference = createReference(\n      language.id,\n      newTranslationDocumentId,\n      schemaType.name,\n      !weakReferences\n    )\n    const newMetadataDocument = {\n      _id: metadataId,\n      _type: METADATA_SCHEMA_NAME,\n      schemaTypes: [schemaType.name],\n      translations: [sourceReference],\n    }\n\n    transaction.createIfNotExists(newMetadataDocument)\n\n    // 4. Patch translation to metadata document\n    // Note: If the document was only just created in the operation above\n    // This patch operation will have no effect\n    const metadataPatch = client\n      .patch(metadataId)\n      .setIfMissing({translations: [sourceReference]})\n      .insert(`after`, `translations[-1]`, [newTranslationReference])\n\n    transaction.patch(metadataPatch)\n\n    // 5. Commit!\n    transaction\n      .commit()\n      .then(() => {\n        const metadataExisted = Boolean(metadata?._createdAt)\n\n        return toast.push({\n          status: 'success',\n          title: `Created \"${language.title}\" translation`,\n          description: metadataExisted\n            ? `Updated Translations Metadata`\n            : `Created Translations Metadata`,\n        })\n      })\n      .catch((err) => {\n        console.error(err)\n\n        return toast.push({\n          status: 'error',\n          title: `Error creating translation`,\n          description: err.message,\n        })\n      })\n  }, [\n    client,\n    documentId,\n    language.id,\n    language.title,\n    languageField,\n    metadata?._createdAt,\n    metadataId,\n    schemaType,\n    source,\n    sourceLanguageId,\n    toast,\n    weakReferences,\n  ])\n\n  let message\n\n  if (current) {\n    message = `Current document`\n  } else if (translation) {\n    message = `Open ${language.title} translation`\n  } else if (!translation) {\n    message = `Create new ${language.title} translation`\n  }\n\n  return (\n    <Tooltip\n      animate\n      content={\n        <Box padding={2}>\n          <Text muted size={1}>\n            {message}\n          </Text>\n        </Box>\n      }\n      fallbackPlacements={['right', 'left']}\n      placement=\"top\"\n      portal\n    >\n      <Button\n        onClick={translation ? handleOpen : handleCreate}\n        mode={current && disabled ? `default` : `bleed`}\n        disabled={disabled}\n      >\n        <Flex gap={3} align=\"center\">\n          {disabled && !current ? (\n            <Spinner />\n          ) : (\n            <Text size={2}>\n              {/* eslint-disable-next-line no-nested-ternary */}\n              {translation ? (\n                <SplitVerticalIcon />\n              ) : current ? (\n                <CheckmarkIcon />\n              ) : (\n                <AddIcon />\n              )}\n            </Text>\n          )}\n          <Box flex={1}>\n            <Text>{language.title}</Text>\n          </Box>\n          <Badge tone={disabled || current ? `default` : `primary`}>\n            {language.id}\n          </Badge>\n        </Flex>\n      </Button>\n    </Tooltip>\n  )\n}\n","import {EditIcon} from '@sanity/icons'\nimport {Badge, Box, Button, Flex, Text, useToast} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {type SanityDocument, useClient} from 'sanity'\n\nimport type {Language} from '../types'\nimport {useDocumentInternationalizationContext} from './DocumentInternationalizationContext'\n\ntype LanguagePatchProps = {\n  language: Language\n  source: SanityDocument | null\n  disabled: boolean\n}\n\nexport default function LanguagePatch(props: LanguagePatchProps) {\n  const {language, source} = props\n  const {apiVersion, languageField} = useDocumentInternationalizationContext()\n  const disabled = props.disabled || !source\n  const client = useClient({apiVersion})\n  const toast = useToast()\n\n  const handleClick = useCallback(() => {\n    if (!source) {\n      throw new Error(`Cannot patch missing document`)\n    }\n\n    const currentId = source._id\n\n    client\n      .patch(currentId)\n      .set({[languageField]: language.id})\n      .commit()\n      .then(() => {\n        toast.push({\n          title: `Set document language to ${language.title}`,\n          status: `success`,\n        })\n      })\n      .catch((err) => {\n        console.error(err)\n\n        return toast.push({\n          title: `Failed to set document language to ${language.title}`,\n          status: `error`,\n        })\n      })\n  }, [source, client, languageField, language, toast])\n\n  return (\n    <Button\n      mode=\"bleed\"\n      onClick={handleClick}\n      disabled={disabled}\n      justify=\"flex-start\"\n    >\n      <Flex gap={3} align=\"center\">\n        <Text size={2}>\n          <EditIcon />\n        </Text>\n        <Box flex={1}>\n          <Text>{language.title}</Text>\n        </Box>\n        <Badge>{language.id}</Badge>\n      </Flex>\n    </Button>\n  )\n}\n","import {Box} from '@sanity/ui'\nimport {styled} from 'styled-components'\n\nexport default styled(Box)`\n  max-width: 280px;\n`\n","import {Card, Flex, Text} from '@sanity/ui'\nimport type {PropsWithChildren} from 'react'\n\nimport ConstrainedBox from './ConstrainedBox'\n\nexport default function Warning({children}: PropsWithChildren) {\n  return (\n    <Card tone=\"caution\" padding={3}>\n      <Flex justify=\"center\">\n        <ConstrainedBox>\n          <Text size={1} align=\"center\">\n            {children}\n          </Text>\n        </ConstrainedBox>\n      </Flex>\n    </Card>\n  )\n}\n","import {TranslateIcon} from '@sanity/icons'\nimport {\n  Box,\n  Button,\n  Card,\n  Popover,\n  Stack,\n  Text,\n  TextInput,\n  useClickOutside,\n} from '@sanity/ui'\nimport {uuid} from '@sanity/uuid'\nimport {type FormEvent, useCallback, useMemo, useState} from 'react'\nimport {useEditState} from 'sanity'\n\nimport {useTranslationMetadata} from '../hooks/useLanguageMetadata'\nimport type {DocumentInternationalizationMenuProps} from '../types'\nimport {useDocumentInternationalizationContext} from './DocumentInternationalizationContext'\nimport LanguageManage from './LanguageManage'\nimport LanguageOption from './LanguageOption'\nimport LanguagePatch from './LanguagePatch'\nimport Warning from './Warning'\n\nexport function DocumentInternationalizationMenu(\n  props: DocumentInternationalizationMenuProps\n) {\n  const {documentId} = props\n  const schemaType = props.schemaType\n  const {languageField, supportedLanguages} =\n    useDocumentInternationalizationContext()\n\n  // Search filter query\n  const [query, setQuery] = useState(``)\n  const handleQuery = useCallback((event: FormEvent<HTMLInputElement>) => {\n    if (event.currentTarget.value) {\n      setQuery(event.currentTarget.value)\n    } else {\n      setQuery(``)\n    }\n  }, [])\n\n  // UI Handlers\n  const [open, setOpen] = useState(false)\n  const handleClick = useCallback(() => setOpen((o) => !o), [])\n  const [button, setButton] = useState<HTMLElement | null>(null)\n  const [popover, setPopover] = useState<HTMLElement | null>(null)\n  const handleClickOutside = useCallback(() => setOpen(false), [])\n  useClickOutside(handleClickOutside, [button, popover])\n\n  // Get metadata from content lake\n  const {data, loading, error} = useTranslationMetadata(documentId)\n  const metadata = Array.isArray(data) && data.length ? data[0] : null\n\n  // Optimistically set a metadata ID for a newly created metadata document\n  // Cannot rely on generated metadata._id from useTranslationMetadata\n  // As the document store might not have returned it before creating another translation\n  const metadataId = useMemo(() => {\n    if (loading) {\n      return null\n    }\n\n    // Once created, these two values should be the same anyway\n    return metadata?._id ?? uuid()\n  }, [loading, metadata?._id])\n\n  // Duplicate a new language version from the most recent version of this document\n  const {draft, published} = useEditState(documentId, schemaType.name)\n  const source = draft || published\n\n  // Check for data issues\n  const documentIsInOneMetadataDocument = useMemo(() => {\n    return Array.isArray(data) && data.length <= 1\n  }, [data])\n  const sourceLanguageId = source?.[languageField] as string | undefined\n  const sourceLanguageIsValid = supportedLanguages.some(\n    (l) => l.id === sourceLanguageId\n  )\n  const allLanguagesAreValid = useMemo(() => {\n    const valid = supportedLanguages.every((l) => l.id && l.title)\n    if (!valid) {\n      console.warn(\n        `Not all languages are valid. It should be an array of objects with an \"id\" and \"title\" property. Or a function that returns an array of objects with an \"id\" and \"title\" property.`,\n        supportedLanguages\n      )\n    }\n\n    return valid\n  }, [supportedLanguages])\n\n  const content = (\n    <Box padding={1}>\n      {error ? (\n        <Card tone=\"critical\" padding={1}>\n          <Text>There was an error returning translations metadata</Text>\n        </Card>\n      ) : (\n        <Stack space={1}>\n          <LanguageManage id={metadata?._id} />\n          {supportedLanguages.length > 4 ? (\n            <TextInput\n              onChange={handleQuery}\n              value={query}\n              placeholder=\"Filter languages\"\n            />\n          ) : null}\n          {supportedLanguages.length > 0 ? (\n            <>\n              {/* Once metadata is loaded, there may be issues */}\n              {loading ? null : (\n                <>\n                  {/* Not all languages are valid */}\n                  {data && documentIsInOneMetadataDocument ? null : (\n                    <Warning>\n                      {/* TODO: Surface these documents to the user */}\n                      This document has been found in more than one Translations\n                      Metadata documents\n                    </Warning>\n                  )}\n                  {/* Not all languages are valid */}\n                  {allLanguagesAreValid ? null : (\n                    <Warning>\n                      Not all language objects are valid. See the console.\n                    </Warning>\n                  )}\n                  {/* Current document has no language field */}\n                  {sourceLanguageId ? null : (\n                    <Warning>\n                      Choose a language to apply to{' '}\n                      <strong>this Document</strong>\n                    </Warning>\n                  )}\n                  {/* Current document has an invalid language field */}\n                  {sourceLanguageId && !sourceLanguageIsValid ? (\n                    <Warning>\n                      Select a supported language. Current language value:{' '}\n                      <code>{sourceLanguageId}</code>\n                    </Warning>\n                  ) : null}\n                </>\n              )}\n              {supportedLanguages\n                .filter((language) => {\n                  if (query) {\n                    return language.title\n                      .toLowerCase()\n                      .includes(query.toLowerCase())\n                  }\n                  return true\n                })\n                .map((language) =>\n                  !loading && sourceLanguageId && sourceLanguageIsValid ? (\n                    // Button to duplicate this document to a new translation\n                    // And either create or update the metadata document\n                    <LanguageOption\n                      key={language.id}\n                      language={language}\n                      schemaType={schemaType}\n                      documentId={documentId}\n                      disabled={loading || !allLanguagesAreValid}\n                      current={language.id === sourceLanguageId}\n                      metadata={metadata}\n                      metadataId={metadataId}\n                      source={source}\n                      sourceLanguageId={sourceLanguageId}\n                    />\n                  ) : (\n                    // Button to set a language field on *this* document\n                    <LanguagePatch\n                      key={language.id}\n                      source={source}\n                      language={language}\n                      // Only allow language patch change to:\n                      // - Keys not in metadata\n                      // - The key of this document in the metadata\n                      disabled={\n                        (loading ||\n                          !allLanguagesAreValid ||\n                          metadata?.translations\n                            .filter((t) => t?.value?._ref !== documentId)\n                            .some((t) => t._key === language.id)) ??\n                        false\n                      }\n                    />\n                  )\n                )}\n            </>\n          ) : null}\n        </Stack>\n      )}\n    </Box>\n  )\n\n  const issueWithTranslations =\n    !loading && sourceLanguageId && !sourceLanguageIsValid\n\n  if (!documentId) {\n    return null\n  }\n\n  if (!schemaType || !schemaType.name) {\n    return null\n  }\n\n  return (\n    <Popover\n      animate\n      constrainSize\n      content={content}\n      open={open}\n      portal\n      ref={setPopover}\n      overflow=\"auto\"\n      tone=\"default\"\n    >\n      <Button\n        text=\"Translations\"\n        mode=\"bleed\"\n        disabled={!source}\n        tone={\n          !source || loading || !issueWithTranslations ? undefined : `caution`\n        }\n        icon={TranslateIcon}\n        onClick={handleClick}\n        ref={setButton}\n        selected={open}\n      />\n    </Popover>\n  )\n}\n","import {TrashIcon} from '@sanity/icons'\nimport {type ButtonTone, useToast} from '@sanity/ui'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type KeyedObject,\n  type Reference,\n  type TypedObject,\n  useClient,\n} from 'sanity'\n\nimport {API_VERSION, TRANSLATIONS_ARRAY_NAME} from '../constants'\n\ntype TranslationReference = TypedObject &\n  KeyedObject & {\n    value: Reference\n  }\n\nexport const DeleteMetadataAction: DocumentActionComponent = (props) => {\n  const {id: documentId, published, draft, onComplete} = props\n  const doc = draft || published\n\n  const [isDialogOpen, setDialogOpen] = useState(false)\n  const onClose = useCallback(() => setDialogOpen(false), [])\n  const translations: TranslationReference[] = useMemo(\n    () =>\n      doc && Array.isArray(doc[TRANSLATIONS_ARRAY_NAME])\n        ? (doc[TRANSLATIONS_ARRAY_NAME] as TranslationReference[])\n        : [],\n    [doc]\n  )\n\n  const toast = useToast()\n  const client = useClient({apiVersion: API_VERSION})\n\n  // Remove translation reference and delete document in one transaction\n  const onProceed = useCallback(() => {\n    const tx = client.transaction()\n\n    tx.patch(documentId, (patch) => patch.unset([TRANSLATIONS_ARRAY_NAME]))\n\n    if (translations.length > 0) {\n      translations.forEach((translation) => {\n        tx.delete(translation.value._ref)\n        tx.delete(`drafts.${translation.value._ref}`)\n      })\n    }\n\n    tx.delete(documentId)\n    // Shouldn't exist as this document type is in liveEdit\n    tx.delete(`drafts.${documentId}`)\n\n    tx.commit()\n      .then(() => {\n        onClose()\n\n        toast.push({\n          status: 'success',\n          title: 'Deleted document and translations',\n        })\n      })\n      .catch((err) => {\n        toast.push({\n          status: 'error',\n          title: 'Failed to delete document and translations',\n          description: err.message,\n        })\n      })\n  }, [client, translations, documentId, onClose, toast])\n\n  return {\n    label: `Delete all translations`,\n    disabled: !doc || !translations.length,\n    icon: TrashIcon,\n    tone: 'critical' as ButtonTone,\n    onHandle: () => {\n      setDialogOpen(true)\n    },\n    dialog: isDialogOpen && {\n      type: 'confirm',\n      onCancel: onComplete,\n      onConfirm: () => {\n        onProceed()\n        onComplete()\n      },\n      tone: 'critical' as ButtonTone,\n      message:\n        translations.length === 1\n          ? `Delete 1 translation and this document`\n          : `Delete all ${translations.length} translations and this document`,\n    },\n  }\n}\n","import type {DocumentBadgeDescription, DocumentBadgeProps} from 'sanity'\n\nimport {useDocumentInternationalizationContext} from '../components/DocumentInternationalizationContext'\n\nexport function LanguageBadge(\n  props: DocumentBadgeProps\n): DocumentBadgeDescription | null {\n  const source = props?.draft || props?.published\n  const {languageField, supportedLanguages} =\n    useDocumentInternationalizationContext()\n  const languageId = source?.[languageField]\n\n  if (!languageId) {\n    return null\n  }\n\n  const language = Array.isArray(supportedLanguages)\n    ? supportedLanguages.find((l) => l.id === languageId)\n    : null\n\n  // Currently we only show the language id if the supportedLanguages are async\n  return {\n    label: language?.id ?? String(languageId),\n    title: language?.title ?? undefined,\n    color: `primary`,\n  }\n}\n","import {Card, Spinner} from '@sanity/ui'\nimport {useEffect, useMemo} from 'react'\nimport {Preview, useEditState, useSchema, useValidationStatus} from 'sanity'\n\ntype DocumentCheckProps = {\n  id: string\n  onCheckComplete: (id: string) => void\n  addInvalidId: (id: string) => void\n  removeInvalidId: (id: string) => void\n  addDraftId: (id: string) => void\n  removeDraftId: (id: string) => void\n}\n\n// Check if the document has a draft\n// Check if that draft is valid\n// Report back to parent that it can be added to bulk publish\nexport default function DocumentCheck(props: DocumentCheckProps) {\n  const {\n    id,\n    onCheckComplete,\n    addInvalidId,\n    removeInvalidId,\n    addDraftId,\n    removeDraftId,\n  } = props\n  const editState = useEditState(id, ``)\n  const {isValidating, validation} = useValidationStatus(id, ``)\n  const schema = useSchema()\n\n  const validationHasErrors = useMemo(() => {\n    return (\n      !isValidating &&\n      validation.length > 0 &&\n      validation.some((item) => item.level === 'error')\n    )\n  }, [isValidating, validation])\n\n  useEffect(() => {\n    if (validationHasErrors) {\n      addInvalidId(id)\n    } else {\n      removeInvalidId(id)\n    }\n\n    if (editState.draft) {\n      addDraftId(id)\n    } else {\n      removeDraftId(id)\n    }\n\n    if (!isValidating) {\n      onCheckComplete(id)\n    }\n  }, [\n    addDraftId,\n    addInvalidId,\n    editState.draft,\n    id,\n    isValidating,\n    onCheckComplete,\n    removeDraftId,\n    removeInvalidId,\n    validationHasErrors,\n  ])\n\n  // We only care about drafts\n  if (!editState.draft) {\n    return null\n  }\n\n  const schemaType = schema.get(editState.draft._type)\n\n  return (\n    <Card\n      border\n      padding={2}\n      tone={validationHasErrors ? `critical` : `positive`}\n    >\n      {editState.draft && schemaType ? (\n        <Preview\n          layout=\"default\"\n          value={editState.draft}\n          schemaType={schemaType}\n        />\n      ) : (\n        <Spinner />\n      )}\n    </Card>\n  )\n}\n","import {Box, type ButtonTone, Text, Tooltip} from '@sanity/ui'\nimport type {ComponentType, PropsWithChildren} from 'react'\nimport {TextWithTone} from 'sanity'\n\ntype InfoIconProps = PropsWithChildren & {\n  icon: ComponentType\n  tone: ButtonTone\n  text?: string\n}\n\nexport default function InfoIcon(props: InfoIconProps) {\n  const {text, icon, tone, children} = props\n  const Icon = icon\n\n  return (\n    <Tooltip\n      animate\n      portal\n      content={\n        children ? (\n          <>{children}</>\n        ) : (\n          <Box padding={2}>\n            <Text size={1}>{text}</Text>\n          </Box>\n        )\n      }\n    >\n      <TextWithTone tone={tone} size={1}>\n        <Icon />\n      </TextWithTone>\n    </Tooltip>\n  )\n}\n","import {InfoOutlineIcon} from '@sanity/icons'\nimport {Box, Stack, Text} from '@sanity/ui'\n\nimport InfoIcon from './InfoIcon'\n\nexport default function Info() {\n  return (\n    <InfoIcon icon={InfoOutlineIcon} tone=\"primary\">\n      <Stack padding={3} space={4} style={{maxWidth: 250}}>\n        <Box>\n          <Text size={1}>Bulk publishing uses the Scheduling API.</Text>\n        </Box>\n        <Box>\n          <Text size={1}>\n            Customized Document Actions in the Studio will not execute. Webhooks\n            will execute.\n          </Text>\n        </Box>\n        <Box>\n          <Text size={1}>\n            Validation is checked before rendering the button below, but the\n            Scheduling API will not check for – or enforce – validation.\n          </Text>\n        </Box>\n      </Stack>\n    </InfoIcon>\n  )\n}\n","import {Button, Card, Dialog, Inline, Stack, Text, useToast} from '@sanity/ui'\nimport {useCallback, useState} from 'react'\nimport {TextWithTone, useClient, useWorkspace} from 'sanity'\n\nimport {API_VERSION} from '../../constants'\nimport type {TranslationReference} from '../../types'\nimport DocumentCheck from './DocumentCheck'\nimport Info from './Info'\n\nexport type BulkPublishProps = {\n  translations: TranslationReference[]\n}\n\n// A root-level component with UI for hitting the Publishing API\nexport default function BulkPublish(props: BulkPublishProps) {\n  const {translations} = props\n  const client = useClient({apiVersion: API_VERSION})\n  const {projectId, dataset} = useWorkspace()\n  const toast = useToast()\n  const [invalidIds, setInvalidIds] = useState<string[] | null>(null)\n  const [checkedIds, setCheckedIds] = useState<string[]>([])\n\n  const onCheckComplete = useCallback((id: string) => {\n    setCheckedIds((ids) => Array.from(new Set([...ids, id])))\n  }, [])\n\n  // Handle dialog\n  const [open, setOpen] = useState(false)\n  const onOpen = useCallback(() => setOpen(true), [])\n  const onClose = useCallback(() => setOpen(false), [])\n\n  const addInvalidId = useCallback((id: string) => {\n    setInvalidIds((ids) => (ids ? Array.from(new Set([...ids, id])) : [id]))\n  }, [])\n\n  const removeInvalidId = useCallback((id: string) => {\n    setInvalidIds((ids) => (ids ? ids.filter((i) => i !== id) : []))\n  }, [])\n\n  const [draftIds, setDraftIds] = useState<string[]>([])\n\n  const addDraftId = useCallback((id: string) => {\n    setDraftIds((ids) => Array.from(new Set([...ids, id])))\n  }, [])\n\n  const removeDraftId = useCallback((id: string) => {\n    setDraftIds((ids) => ids.filter((i) => i !== id))\n  }, [])\n\n  const handleBulkPublish = useCallback(() => {\n    const body = translations.map((translation) => ({\n      documentId: translation.value._ref,\n    }))\n    client\n      .request({\n        uri: `/publish/${projectId}/${dataset}`,\n        method: 'POST',\n        body,\n      })\n      .then(() => {\n        toast.push({\n          status: 'success',\n          title: 'Success',\n          description: 'Bulk publish complete',\n        })\n      })\n      .catch((err) => {\n        console.error(err)\n        toast.push({\n          status: 'error',\n          title: 'Error',\n          description: 'Bulk publish failed',\n        })\n      })\n  }, [translations, client, projectId, dataset, toast])\n\n  const disabled =\n    // Not all documents have been checked\n    checkedIds.length !== translations.length ||\n    // Some document(s) are invalid\n    Boolean(invalidIds && invalidIds?.length > 0) ||\n    // No documents are drafts\n    !draftIds.length\n\n  return translations?.length > 0 ? (\n    <Card padding={4} border radius={2}>\n      <Stack space={3}>\n        <Inline space={3}>\n          <Text weight=\"bold\" size={1}>\n            Bulk publishing\n          </Text>\n          <Info />\n        </Inline>\n\n        <Stack>\n          <Button\n            onClick={onOpen}\n            text=\"Prepare bulk publishing\"\n            mode=\"ghost\"\n          />\n        </Stack>\n\n        {open && (\n          <Dialog\n            animate\n            header=\"Bulk publishing\"\n            id=\"bulk-publish-dialog\"\n            onClose={onClose}\n            zOffset={1000}\n            width={3}\n          >\n            <Stack space={4} padding={4}>\n              {draftIds.length > 0 ? (\n                <Stack space={2}>\n                  <Text size={1}>\n                    There{' '}\n                    {draftIds.length === 1\n                      ? `is 1 draft document`\n                      : `are ${draftIds.length} draft documents`}\n                    .\n                  </Text>\n                  {invalidIds && invalidIds.length > 0 ? (\n                    <TextWithTone tone=\"critical\" size={1}>\n                      {invalidIds && invalidIds.length === 1\n                        ? `1 draft document has`\n                        : `${\n                            invalidIds && invalidIds.length\n                          } draft documents have`}{' '}\n                      validation issues that must addressed first\n                    </TextWithTone>\n                  ) : (\n                    <TextWithTone tone=\"positive\" size={1}>\n                      All drafts are valid and can be bulk published\n                    </TextWithTone>\n                  )}\n                </Stack>\n              ) : null}\n\n              <Stack space={1}>\n                {translations\n                  .filter((translation) => translation?.value?._ref)\n                  .map((translation) => (\n                    <DocumentCheck\n                      key={translation._key}\n                      id={translation.value._ref}\n                      onCheckComplete={onCheckComplete}\n                      addInvalidId={addInvalidId}\n                      removeInvalidId={removeInvalidId}\n                      addDraftId={addDraftId}\n                      removeDraftId={removeDraftId}\n                    />\n                  ))}\n              </Stack>\n              {draftIds.length > 0 ? (\n                <Button\n                  mode=\"ghost\"\n                  tone={\n                    invalidIds && invalidIds?.length > 0\n                      ? 'caution'\n                      : 'positive'\n                  }\n                  text={\n                    draftIds.length === 1\n                      ? `Publish draft document`\n                      : `Bulk publish ${draftIds.length} draft documents`\n                  }\n                  onClick={handleBulkPublish}\n                  disabled={disabled}\n                />\n              ) : (\n                <Text muted size={1}>\n                  No draft documents to publish\n                </Text>\n              )}\n            </Stack>\n          </Dialog>\n        )}\n      </Stack>\n    </Card>\n  ) : null\n}\n","import {useEffect} from 'react'\nimport {PatchEvent, unset, useClient, useEditState} from 'sanity'\nimport {useDocumentPane} from 'sanity/structure'\n\nimport {API_VERSION} from '../../constants'\nimport type {TranslationReference} from '../../types'\n\ntype ReferencePatcherProps = {\n  translation: TranslationReference\n  documentType: string\n  metadataId: string\n}\n\n// For every reference, check if it is published, and if so, strengthen the reference\nexport default function ReferencePatcher(props: ReferencePatcherProps) {\n  const {translation, documentType, metadataId} = props\n  const editState = useEditState(translation.value._ref, documentType)\n  const client = useClient({apiVersion: API_VERSION})\n  const {onChange} = useDocumentPane()\n\n  useEffect(() => {\n    if (\n      // We have a reference\n      translation.value._ref &&\n      // It's still weak and not-yet-strengthened\n      translation.value._weak &&\n      // We also want to keep this check because maybe the user *configured* weak refs\n      translation.value._strengthenOnPublish &&\n      // The referenced document has just been published\n      !editState.draft &&\n      editState.published &&\n      editState.ready\n    ) {\n      const referencePathBase = [\n        'translations',\n        {_key: translation._key},\n        'value',\n      ]\n\n      onChange(\n        new PatchEvent([\n          unset([...referencePathBase, '_weak']),\n          unset([...referencePathBase, '_strengthenOnPublish']),\n        ])\n      )\n    }\n  }, [translation, editState, metadataId, client, onChange])\n\n  return null\n}\n","import type {TranslationReference} from '../../types'\nimport ReferencePatcher from './ReferencePatcher'\n\ntype OptimisticallyStrengthenProps = {\n  translations: TranslationReference[]\n  metadataId: string\n}\n\n// There's no good reason to leave published references as weak\n// So this component will run on every render and strengthen them\nexport default function OptimisticallyStrengthen(\n  props: OptimisticallyStrengthenProps\n) {\n  const {translations = [], metadataId} = props\n\n  if (!translations.length) {\n    return null\n  }\n\n  return (\n    <>\n      {translations.map((translation) =>\n        translation.value._strengthenOnPublish?.type ? (\n          <ReferencePatcher\n            key={translation._key}\n            translation={translation}\n            documentType={translation.value._strengthenOnPublish.type}\n            metadataId={metadataId}\n          />\n        ) : null\n      )}\n    </>\n  )\n}\n","import {TranslateIcon} from '@sanity/icons'\nimport {\n  defineField,\n  defineType,\n  type DocumentDefinition,\n  type FieldDefinition,\n} from 'sanity'\n\nimport {METADATA_SCHEMA_NAME, TRANSLATIONS_ARRAY_NAME} from '../../constants'\n\nexport default (\n  schemaTypes: string[],\n  metadataFields: FieldDefinition[]\n): DocumentDefinition =>\n  defineType({\n    type: 'document',\n    name: METADATA_SCHEMA_NAME,\n    title: 'Translation metadata',\n    icon: TranslateIcon,\n    liveEdit: true,\n    fields: [\n      defineField({\n        name: TRANSLATIONS_ARRAY_NAME,\n        type: 'internationalizedArrayReference',\n      }),\n      defineField({\n        name: 'schemaTypes',\n        description:\n          'Optional: Used to filter the reference fields above so all translations share the same types.',\n        type: 'array',\n        of: [{type: 'string'}],\n        options: {list: schemaTypes},\n        readOnly: ({value}) => Boolean(value),\n      }),\n      ...metadataFields,\n    ],\n    preview: {\n      select: {\n        translations: TRANSLATIONS_ARRAY_NAME,\n        documentSchemaTypes: 'schemaTypes',\n      },\n      prepare(selection) {\n        const {translations = [], documentSchemaTypes = []} = selection\n        const title =\n          translations.length === 1\n            ? `1 Translation`\n            : `${translations.length} Translations`\n        const languageKeys = translations.length\n          ? translations\n              .map((t: {_key: string}) => t._key.toUpperCase())\n              .join(', ')\n          : ``\n        const subtitle = [\n          languageKeys ? `(${languageKeys})` : null,\n          documentSchemaTypes?.length\n            ? documentSchemaTypes.map((s: string) => s).join(`, `)\n            : ``,\n        ]\n          .filter(Boolean)\n          .join(` `)\n\n        return {\n          title,\n          subtitle,\n        }\n      },\n    },\n  })\n","import {Stack} from '@sanity/ui'\nimport {defineField, definePlugin, isSanityDocument} from 'sanity'\nimport {internationalizedArray} from 'sanity-plugin-internationalized-array'\n\nimport {DeleteMetadataAction} from './actions/DeleteMetadataAction'\nimport {LanguageBadge} from './badges'\nimport BulkPublish from './components/BulkPublish'\nimport {DocumentInternationalizationProvider} from './components/DocumentInternationalizationContext'\nimport {DocumentInternationalizationMenu} from './components/DocumentInternationalizationMenu'\nimport OptimisticallyStrengthen from './components/OptimisticallyStrengthen'\nimport {API_VERSION, DEFAULT_CONFIG, METADATA_SCHEMA_NAME} from './constants'\nimport metadata from './schema/translation/metadata'\nimport type {PluginConfig, TranslationReference} from './types'\n\nexport const documentInternationalization = definePlugin<PluginConfig>(\n  (config) => {\n    const pluginConfig = {...DEFAULT_CONFIG, ...config}\n    const {\n      supportedLanguages,\n      schemaTypes,\n      languageField,\n      bulkPublish,\n      metadataFields,\n    } = pluginConfig\n\n    if (schemaTypes.length === 0) {\n      throw new Error(\n        'You must specify at least one schema type on which to enable document internationalization. Update the `schemaTypes` option in the documentInternationalization() configuration.'\n      )\n    }\n\n    return {\n      name: '@sanity/document-internationalization',\n\n      studio: {\n        components: {\n          layout: (props) =>\n            DocumentInternationalizationProvider({...props, pluginConfig}),\n        },\n      },\n\n      // Adds:\n      // - A bulk-publishing UI component to the form\n      // - Will only work for projects on a compatible plan\n      form: {\n        components: {\n          input: (props) => {\n            if (\n              props.id === 'root' &&\n              props.schemaType.name === METADATA_SCHEMA_NAME &&\n              isSanityDocument(props?.value)\n            ) {\n              const metadataId = props?.value?._id\n              const translations =\n                (props?.value?.translations as TranslationReference[]) ?? []\n              const weakAndTypedTranslations = translations.filter(\n                ({value}) => value?._weak && value._strengthenOnPublish\n              )\n\n              return (\n                <Stack space={5}>\n                  {bulkPublish ? (\n                    <BulkPublish translations={translations} />\n                  ) : null}\n                  {weakAndTypedTranslations.length > 0 ? (\n                    <OptimisticallyStrengthen\n                      metadataId={metadataId}\n                      translations={weakAndTypedTranslations}\n                    />\n                  ) : null}\n                  {props.renderDefault(props)}\n                </Stack>\n              )\n            }\n\n            return props.renderDefault(props)\n          },\n        },\n      },\n\n      // Adds:\n      // - The `Translations` dropdown to the editing form\n      // - `Badges` to documents with a language value\n      // - The `DeleteMetadataAction` action to the metadata document type\n      document: {\n        unstable_languageFilter: (prev, ctx) => {\n          const {schemaType, documentId} = ctx\n\n          return schemaTypes.includes(schemaType) && documentId\n            ? [\n                ...prev,\n                (props) =>\n                  DocumentInternationalizationMenu({...props, documentId}),\n              ]\n            : prev\n        },\n        badges: (prev, {schemaType}) => {\n          if (!schemaTypes.includes(schemaType)) {\n            return prev\n          }\n\n          return [(props) => LanguageBadge(props), ...prev]\n        },\n        actions: (prev, {schemaType}) => {\n          if (schemaType === METADATA_SCHEMA_NAME) {\n            return [...prev, DeleteMetadataAction]\n          }\n\n          return prev\n        },\n      },\n\n      // Adds:\n      // - The `Translations metadata` document type to the schema\n      schema: {\n        // Create the metadata document type\n        types: [metadata(schemaTypes, metadataFields)],\n\n        // For every schema type this plugin is enabled on\n        // Create an initial value template to set the language\n        templates: (prev, {schema}) => {\n          // Templates are not setup for async languages\n          if (!Array.isArray(supportedLanguages)) {\n            return prev\n          }\n\n          const parameterizedTemplates = schemaTypes.map((schemaType) => ({\n            id: `${schemaType}-parameterized`,\n            title: `${\n              schema?.get(schemaType)?.title ?? schemaType\n            }: with Language`,\n            schemaType,\n            parameters: [\n              {name: `languageId`, title: `Language ID`, type: `string`},\n            ],\n            value: ({languageId}: {languageId: string}) => ({\n              [languageField]: languageId,\n            }),\n          }))\n\n          const staticTemplates = schemaTypes.flatMap((schemaType) => {\n            return supportedLanguages.map((language) => ({\n              id: `${schemaType}-${language.id}`,\n              title: `${language.title} ${\n                schema?.get(schemaType)?.title ?? schemaType\n              }`,\n              schemaType,\n              value: {\n                [languageField]: language.id,\n              },\n            }))\n          })\n\n          return [...prev, ...parameterizedTemplates, ...staticTemplates]\n        },\n      },\n\n      // Uses:\n      // - `sanity-plugin-internationalized-array` to maintain the translations array\n      plugins: [\n        // Translation metadata stores its references using this plugin\n        // It cuts down on attribute usage and gives UI conveniences to add new translations\n        internationalizedArray({\n          languages: supportedLanguages,\n          fieldTypes: [\n            defineField(\n              {\n                name: 'reference',\n                type: 'reference',\n                to: schemaTypes.map((type) => ({type})),\n                weak: pluginConfig.weakReferences,\n                // Reference filters don't actually enforce validation!\n                validation: (Rule) =>\n                  // @ts-expect-error - fix typings\n                  Rule.custom(async (item: TranslationReference, context) => {\n                    if (!item?.value?._ref || !item?._key) {\n                      return true\n                    }\n\n                    const client = context.getClient({apiVersion: API_VERSION})\n                    const valueLanguage = await client.fetch(\n                      `*[_id in [$ref, $draftRef]][0].${languageField}`,\n                      {\n                        ref: item.value._ref,\n                        draftRef: `drafts.${item.value._ref}`,\n                      }\n                    )\n\n                    if (valueLanguage && valueLanguage === item._key) {\n                      return true\n                    }\n\n                    return `Referenced document does not have the correct language value`\n                  }),\n                options: {\n                  // @ts-expect-error - Update type once it knows the values of this filter\n                  filter: ({parent, document}) => {\n                    if (!parent) return null\n\n                    // I'm not sure in what instance there's an array of parents\n                    // But the Type suggests it's possible\n                    const parentArray = Array.isArray(parent)\n                      ? parent\n                      : [parent]\n                    const language = parentArray.find((p) => p._key)\n\n                    if (!language?._key) return null\n\n                    if (document.schemaTypes) {\n                      return {\n                        filter: `_type in $schemaTypes && ${languageField} == $language`,\n                        params: {\n                          schemaTypes: document.schemaTypes,\n                          language: language._key,\n                        },\n                      }\n                    }\n\n                    return {\n                      filter: `${languageField} == $language`,\n                      params: {language: language._key},\n                    }\n                  },\n                },\n              },\n              {strict: false}\n            ),\n          ],\n        }),\n      ],\n    }\n  }\n)\n"],"names":["query","entry","metadata","_a"],"mappings":"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","x_google_ignoreList":[5]}